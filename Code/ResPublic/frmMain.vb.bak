Imports System
Imports EnzoLib
Imports System.Runtime.InteropServices
Imports UserInactivityMonitoring

Imports AForge.Imaging.Drawing

Imports LasCore

Imports System.Windows.Forms.DataVisualization.Charting
Imports System.Data.SqlClient


Public Enum LasImageMode
    LiveOff
    LiveOn
End Enum

Public Enum LasImageSource
    File
    Camera
End Enum

Public Class frmMain

    'Implements IMessageFilter 'This interface allows an application to capture a message before it is dispatched to a control or form.
    'Private WithEvents tmrCheckInactivity As New Windows.Forms.Timer


#Region "Private data"

    Private Const iTabSequence = 0

    Private Const iTabResultElet = 1
    Private Const iTabResultGeom = 2
    Private Const iTabResultAiming = 3
    Private Const iTabResultPhotom = 4
    Private Const iTabResultMotor = 5
    Private Const iTabResultECUs = 6
    Private Const iTabResultLEDs = 7
    Private Const iTabResultOthers = 8

    Private GrabTime As New LasCore.Cronometro


    Private ScrewdriverInsertionInProgress() As Boolean

    Private Enum enumGraphResultActive
        None
        Geometric
        Aiming
        Photom
        Motor
        LEDs
        ECUs
        Others
    End Enum

    Private GrapResultActive As enumGraphResultActive = enumGraphResultActive.None

    Private TextsManag As LasCore.TextsManagement



    Private xfrmAbout As frmAbout
    Private xfrmAboutCizeta As frmAboutCizeta

    Private WithEvents Plc As ePlc
    Private plcCnf As AppConfig.udtParams.udtPlcConfig
    Private frmPlcHmi As frmPlcHMI

    Private WithEvents myBcr As eBcr

    Private WithEvents myBadgeReader As BadgeReader

    Private WithEvents bgwDoReadLabels As System.ComponentModel.BackgroundWorker
    Private WithEvents bgwDoCompleteTest As System.ComponentModel.BackgroundWorker
    Private WithEvents bgwDoMakeRecipeWizard As System.ComponentModel.BackgroundWorker
    Private WithEvents bgwDoUpdateRecipeWizard As System.ComponentModel.BackgroundWorker
    Private WithEvents bgwDoInternalCameraAlignWizard As System.ComponentModel.BackgroundWorker
    Private WithEvents bgwDoSetCameraReference As System.ComponentModel.BackgroundWorker
    Private WithEvents bgwDoCheckCameraReferencen As System.ComponentModel.BackgroundWorker
    Private WithEvents bgwDoRecipeEdit As System.ComponentModel.BackgroundWorker
    Private WithEvents bgwDoPrintLabels As System.ComponentModel.BackgroundWorker

    Private bgwInProgress As System.ComponentModel.BackgroundWorker

    Dim DisplayID As Int32

    Private WithEvents tmrCheckInitialization As Windows.Forms.Timer
    Private WithEvents tmrKeepAlivePlc As Windows.Forms.Timer
    Private WithEvents tmrFromPlc As Windows.Forms.Timer
    Private WithEvents tmrVisual As Windows.Forms.Timer
    Private WithEvents tmrInfoOp As Windows.Forms.Timer
    Private WithEvents tmrVisualFast As Windows.Forms.Timer
    Private WithEvents tmrCheckTraceConnection As New Windows.Forms.Timer
    Private WithEvents tmrCameraRestart As New Windows.Forms.Timer

    Dim SplashScreen As New Splash

    'For HV moving
    Private InitialX As Integer = 0
    Private InitialY As Integer = 0

    'Autologoff
    Private WithEvents InactivityMonitor As IInactivityMonitor = Nothing

    Private bmpLowBeamToShow As Bitmap

    Private msgPlcComOK As String = ""
    Private msgPlcComNOK As String = ""
    Private msgPlcNotEnabled As String = ""

    Private bitmapLock As New Object
    Private bmpImageShown As Bitmap
    Public Property BmpShown As Bitmap

    Private InitializationDone As Boolean = False

    Private ReprintReq As Boolean = False

#End Region

#Region " Properties "

    Private _ActualImageFile As String
    Public Property ActualImageFile() As String
        Get
            Return _ActualImageFile
        End Get
        Set(ByVal value As String)
            _ActualImageFile = value
            ActualImage = Image.FromFile(ActualImageFile)
        End Set
    End Property

    Private _ActualImage As Image
    Public Property ActualImage() As Image
        Get
            Return _ActualImage
        End Get
        Set(ByVal value As Image)
            _ActualImage = value
            picImageCamera.Image = Image.FromFile(ActualImageFile)
        End Set
    End Property

    Private _ImageMode As LasImageMode
    Public Property ImageMode() As LasImageMode
        Get
            Return _ImageMode
        End Get
        Set(ByVal value As LasImageMode)
            _ImageMode = value
        End Set
    End Property

    Private _ImageSource As LasImageSource
    Public Property ImageSource() As LasImageSource
        Get
            Return _ImageSource
        End Get
        Set(ByVal value As LasImageSource)
            _ImageSource = value
        End Set
    End Property

    Public ReadOnly Property IsLiveOn() As Boolean
        Get
            Return IIf((ImageSource = LasImageSource.Camera And ImageMode = LasImageMode.LiveOn), True, False)
        End Get
    End Property

#End Region

    Private Sub EndProgram()

        Dim frm As New Splash
        frm.Show()
        Dim crono As New Stopwatch
        frm.Cursor = Cursors.WaitCursor
        mnu.SuspendMenu()

        Try
            xDataStorage.AddEvent("System", "End program", "OK")
        Catch ex As Exception

        End Try


        Try
            InactivityMonitor.Dispose()

        Catch ex As Exception
        End Try

        Try
            If xAppConfig.Params.Trace.Enabled Then xTraceInterface.Finish()
        Catch ex As Exception
        End Try

        Try
            xProduction.StoreProduction()
        Catch ex As Exception
        End Try

        Try
            xScrewdrivers.Close()
        Catch ex As Exception

        End Try

        crono.Restart()
        Do
            Application.DoEvents()
            Threading.Thread.Sleep(10)
        Loop While crono.ElapsedMilliseconds < 1000


        'Stops backups
        Try
            xDataBackUp.EndBackup()
        Catch ex As Exception
        End Try

        'All outputs off
        Try
            If xInOutConfig.ConfigData.ControllerIO.Enabled Then
                xInOut.AllOutputsOff()
            End If
        Catch ex As Exception

        End Try


        'Ferma telecamere
        Try
            xCameraManagement.Close()
        Catch ex As Exception

        End Try


        Try
            If xAppConfig.Params.EcuInterface.Enabled Then
                xEcu.TeminateCommunicationWithECU()
            End If
        Catch ex As Exception

        End Try

        'Ferma lettura PLC
        Try
            Plc.Finish()
        Catch ex As Exception
        End Try

        Try
            xBcr.Finish()
        Catch ex As Exception
        End Try

        Try
            xPrinterHousingLabel.Finish()
        Catch ex As Exception
        End Try



        Try
            End
        Catch ex As Exception

        End Try


    End Sub


    'Private Sub New()


    '    '' Put the following code before InitializeComponent()
    '    '' Sets the culture to French (France)
    '    'Thread.CurrentThread.CurrentCulture = New CultureInfo("en-EN")
    '    '' Sets the UI culture to French (France)
    '    'Thread.CurrentThread.CurrentUICulture = New CultureInfo("en-EN")


    '    ' This call is required by the designer.
    '    InitializeComponent()


    'End Sub

#Region " Form events "

    Private Sub frmMain_Activated(sender As Object, e As EventArgs) Handles Me.Activated
        xGlobals.VaiColCinema = True

        If Not InitializationDone Then
            tmrCheckInitialization = New Timer
            tmrCheckInitialization.Enabled = True
            tmrCheckInitialization.Interval = 3000
        End If

    End Sub

    Private Sub frmMain_Paint(ByVal sender As Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles Me.Paint
        frmMainLocationX = 0 'Me.Location.X
        frmMainLocationY = 0 'Me.Location.Y
        Debug.Print("X= " & Me.Location.X.ToString & "Y= " & Me.Location.Y.ToString & vbCrLf)
    End Sub

    Private Sub frmMain_FormClosing(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles Me.FormClosing
        If Not xGlobals.ForceEndProgram Then
            ' If MsgBox(xMultiLangPublic.GetMsgText("EndProgramReq"), MsgBoxStyle.Exclamation + MsgBoxStyle.YesNo + MsgBoxStyle.DefaultButton2) = MsgBoxResult.Yes Then
            If MsgBox(xTextsManag.GetPublicText("EndProgramReq"), MsgBoxStyle.Exclamation + MsgBoxStyle.YesNo + MsgBoxStyle.DefaultButton2) = MsgBoxResult.Yes Then
                Call EndProgram()
            Else
                e.Cancel = True
            End If
        Else
            Call EndProgram()
        End If

    End Sub

    Private Sub frmMain_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load

        Dim ConfigFileName As String = ""
        Dim EndProgramForced As Boolean = False

        'Try

        '    Dim culture As System.Globalization.CultureInfo = System.Globalization.CultureInfo.CurrentCulture

        '    System.Threading.Thread.CurrentThread.CurrentCulture = New System.Globalization.CultureInfo("en-US")
        '    System.Threading.Thread.CurrentThread.CurrentUICulture = New System.Globalization.CultureInfo("en-US")
        '    Dim s As String = My.Computer.Info.InstalledUICulture.NumberFormat.NumberDecimalSeparator
        'Catch ex As Exception

        'End Try


        xGlobals = New Globals
        xGlobals.ForceEndProgram = False

        'xGlobals.PicturePath = System.IO.Path.GetFullPath(System.Windows.Forms.Application.StartupPath & "\Pictures\")

        xGlobals.IncludePath = System.IO.Path.GetFullPath(System.Windows.Forms.Application.StartupPath & "\Include\")


        Dim DiskDrive As String = System.IO.Path.GetPathRoot(System.Windows.Forms.Application.StartupPath)
        xGlobals.DataPath = DiskDrive & System.Windows.Forms.Application.ProductName & "\Data\"
        xGlobals.TmpPath = DiskDrive & System.Windows.Forms.Application.ProductName & "\Data\tmp\"
        xGlobals.DatabasePath = DiskDrive & System.Windows.Forms.Application.ProductName & "\Database\"
        xGlobals.LogPath = DiskDrive & System.Windows.Forms.Application.ProductName & "\Data\Log\"
        ' xGlobals.MeasuresPath = DiskDrive & System.Windows.Forms.Application.ProductName & "\Data\Measures\"
        xGlobals.ArchivesPath = DiskDrive & System.Windows.Forms.Application.ProductName & "\Archives\"
        xGlobals.RecipesPath = DiskDrive & System.Windows.Forms.Application.ProductName & "\Data\Recipes\"
        xGlobals.LabelsPath = DiskDrive & System.Windows.Forms.Application.ProductName & "\Data\Labels\"
        xGlobals.WizardPath = DiskDrive & System.Windows.Forms.Application.ProductName & "\Data\Wizard\"
        ' xGlobals.TracePath = DiskDrive & System.Windows.Forms.Application.ProductName & "\Data\Trace\"
        xGlobals.PicturePath = DiskDrive & System.Windows.Forms.Application.ProductName & "\Data\Pictures\"

        xGlobals.myInOutConfigFile = xGlobals.DataPath & "InOutConfig.xml"

        xGlobals.myRecipeFile = xGlobals.RecipesPath & "Recipes.xml"
        xGlobals.myRecipeEletFile = xGlobals.RecipesPath & "RecipesElet.xml"
        xGlobals.myRecipeGeomFile = xGlobals.RecipesPath & "RecipesGeom.xml"
        xGlobals.myRecipePhotomFile = xGlobals.RecipesPath & "RecipesPhotom.xml"
        xGlobals.myRecipeAimingFile = xGlobals.RecipesPath & "RecipesAiming.xml"
        xGlobals.myRecipeLabelsFile = xGlobals.RecipesPath & "RecipesLabels.xml"
        xGlobals.myRecipeMotorsFile = xGlobals.RecipesPath & "RecipesMotors.xml"
        xGlobals.myRecipeECUsFile = xGlobals.RecipesPath & "RecipesECUs.xml"
        xGlobals.myRecipeLEDsFile = xGlobals.RecipesPath & "RecipeLEDs.xml"
        xGlobals.myRecipeDriveSideFile = xGlobals.RecipesPath & "RecipeDriveSide.xml"

        My.Computer.FileSystem.CreateDirectory(xGlobals.TmpPath)
        My.Computer.FileSystem.CreateDirectory(xGlobals.LogPath)
        My.Computer.FileSystem.CreateDirectory(xGlobals.ArchivesPath)
        My.Computer.FileSystem.CreateDirectory(xGlobals.RecipesPath)
        My.Computer.FileSystem.CreateDirectory(xGlobals.LabelsPath)
        My.Computer.FileSystem.CreateDirectory(xGlobals.WizardPath)
        My.Computer.FileSystem.CreateDirectory(xGlobals.DataPath & "Images\")
        My.Computer.FileSystem.CreateDirectory(xGlobals.DataPath & "Images\Movies\")



        If Not LasCore.InitLicense(xGlobals.DataPath & "License.bin") Then
            Dim frm As New frmNoLicense
            frm.ShowDialog()
            End
        End If

        Call UpdateRecipes()

        xGlobals.VaiColCinema = False


        xSizeableShape = New CsharpLibrary.SizeableShape(CsharpLibrary.SizeableShape.ShapeType.Rectangle)
        xSizeableShape.SetPictureBox(picImageCamera)

        xPatternManag = New LasCore.PatternManagement(picImageCamera)



        SplashScreen.pbrInit.Minimum = 0
        SplashScreen.pbrInit.Maximum = 30
        SplashScreen.pbrInit.Value = 0
        SplashScreen.lblProgress.Text = "Reading config...."
        SplashScreen.Show()
        Application.DoEvents()



        'Variabili retentive
        xRetentive = New RetentiveVariables(xGlobals.DataPath & "RetentiveVariables.xml", xGlobals.ArchivesPath)
        If xRetentive.ReadDataFromFile <> "" Then EndProgramForced = True


        Dim LastModel As New Model(xRetentive.Variables.LastRunningRecipe)

        'Config       
        xAppConfig = New AppConfig(xGlobals.DataPath & "myConfig.xml", xGlobals.ArchivesPath)
        If xAppConfig.ReadDataFromFile <> "" Then EndProgramForced = True
        If EndProgramForced Then
            MsgBox(xTextsManag.GetPublicText("ForcedEndProgram"), MsgBoxStyle.Critical + MsgBoxStyle.OkOnly)
            End
        End If

        'Config
        xConfig = New Configuration
        If Not xConfig.ReadMeasuresConfig(xGlobals.DataPath & "Measures.xml", xGlobals.ArchivesPath) Then EndProgramForced = True
        If Not xConfig.ReadMenusConfig(xGlobals.DataPath & "Menus.xml", xGlobals.ArchivesPath) Then EndProgramForced = True




        SplashScreen.pbrInit.Value = 1


        If xAppConfig.Params.DataBackup.FilesBackup.BackupFolder <> "" Then
            xGlobals.ArchivesPath = xAppConfig.Params.DataBackup.FilesBackup.BackupFolder
        End If


        If Not System.Diagnostics.Debugger.IsAttached Then
            Threading.Thread.Sleep(xAppConfig.Params.StartDelay)
        End If


        SplashScreen.lblProgress.Text = "Reading Input/Outputs ...."
        Application.DoEvents()
        xInOutConfig = New LasCore.InOutConfig(xGlobals.myInOutConfigFile, xGlobals.ArchivesPath)
        If xInOutConfig.ReadDataFromFile <> "" Then EndProgramForced = True
        SplashScreen.pbrInit.Value = 2

        SplashScreen.lblProgress.Text = "Reading screwdrivers configuration ...."
        Application.DoEvents()
        xScrewdrivers = New LasCore.Screwdrivers(xGlobals.DataPath & "ScrewdriversConfig.xml", xGlobals.ArchivesPath)
        If xScrewdrivers.ReadDataFromFile <> "" Then EndProgramForced = True
        SplashScreen.pbrInit.Value = 3


        'Texts managements
        xTextsManag = New TextsManagement(xAppConfig.Params.Language)
        xTextsManag.ReadTexts(xGlobals.DataPath & "Texts.xml", xGlobals.ArchivesPath)

        xResultTestCodes = New ResultCodes(xGlobals.DataPath & "ResultCodes.xml", xGlobals.ArchivesPath)
        If xResultTestCodes.ReadDataFromFile <> "" Then EndProgramForced = True


        My.Computer.FileSystem.CreateDirectory(xAppConfig.Params.GraphResultsPath)


        'PlcHMI     
        xPlcHmi = New PlcHMI(xGlobals.DataPath & "PlcHMI.xml", xTextsManag.LanguageToUse, xGlobals.ArchivesPath)
        If xPlcHmi.ReadDataFromFile() <> "" Then EndProgramForced = True
        chkPlcHMI.Enabled = xAppConfig.Params.PLCs(0).HMI

        'Work data
        xWorkData = New WorkData(xGlobals.DataPath & "Works.xml", xGlobals.ArchivesPath)
        If xWorkData.ReadDataFromFile() <> "" Then EndProgramForced = True

        'Shifts
        xShift = New Shifts(xGlobals.DataPath & "Shift.xml", xGlobals.ArchivesPath)
        If xShift.ReadDataFromFile() <> "" Then EndProgramForced = True
        SplashScreen.pbrInit.Value = 4

        'Users
        xUsers = New LasCore.Users(xGlobals.DataPath + "Users.xml", xGlobals.DataPath & "SuperUsers.xml")
        xUsers.ReadDataFromFile()

        xWorkers = New LasCore.Workers(xGlobals.DataPath + "Workers.xml")
        If Not xWorkers.ReadDataFromFile() Then EndProgramForced = True
        ' xLasWorkers.WriteDataToFile()



        If EndProgramForced Then
            MsgBox(xTextsManag.GetPublicText("ForcedEndProgram"), MsgBoxStyle.Critical + MsgBoxStyle.OkOnly)
            End
        End If



        'Load LOGOs
        Dim nf As String = xGlobals.DataPath & xAppConfig.Params.Customer.LOGO
        If My.Computer.FileSystem.FileExists(nf) Then
            picCustomer.Image = Image.FromFile(nf)
        Else
            picCustomer.Image = Nothing   'Image.FromFile(xGlobals.DataPath & "LogoCizeta.jpg")
        End If
        nf = xGlobals.DataPath & xAppConfig.Params.Supplier.LOGO
        If My.Computer.FileSystem.FileExists(nf) Then
            picSupplier.Image = Image.FromFile(nf)
        Else
            picSupplier.Image = Nothing  'Image.FromFile(xGlobals.DataPath & "LogoCizeta.jpg")
        End If


        Me.Icon = New System.Drawing.Icon(xGlobals.IncludePath & "myApp.ico")
        ChartBurnIn.Location = New Point(-10000, 0)
        ChartBurnIn.Size = picImageCamera.Size
        ChartOutage.Location = New Point(-10000, 0)
        ChartOutage.Size = picImageCamera.Size


        '**********************************************
        '... e vai con il database...
        '********************************************** 
        SplashScreen.lblProgress.Text = "Connecting database...."
        Application.DoEvents()
        If Not CheckConnectionsToDatabases() Then
            MsgBox(xTextsManag.GetPublicText("ForcedEndProgram"), MsgBoxStyle.Critical + MsgBoxStyle.OkOnly)
            End
        End If
        SplashScreen.pbrInit.Value = 5

        'Data Storage
        xDataStorage = New DataStorage(xAppConfig.Params.DataStorage.Enabled)
        xDataStorage.DataStoreOnRemote = xAppConfig.Params.DataStorage.RemoteDataStore.Enabled
        xDataStorage.KeepMeasuresLastCycleOnly = xAppConfig.Params.DataStorage.KeepMeasuresLastCycleOnly
        xDataStorage.AddEvent("System", "Program initialization", "")

        'DataBackUp
        Call StartDataBackup()

        'Production
        xProduction = New Production
        xProduction.InitProduction()

        'Capability
        xCapability = New Capability
        xCapability.ActualCapabilityTableName = ""


        xGeometry = New LasCore.Geometry
        LasCore.Geometry.LightingBoxCnf.FocalLength = xAppConfig.Params.Geometry.FocalLength
        LasCore.Geometry.LightingBoxCnf.ScreenHoriSize = xAppConfig.Params.Geometry.ScreenHoriSize



        SplashScreen.lblProgress.Text = "Restore data...."
        Application.DoEvents()

        'Recipes
        InitRecipes()
        SplashScreen.pbrInit.Value = 6




        KeyPreview = True
        'Autologoff        
        InactivityMonitor = MonitorCreator.CreateInstance(MonitorType.ApplicationMonitor)
        InactivityMonitor.SynchronizingObject = Me
        InactivityMonitor.Enabled = False
        InactivityMonitor.MonitorKeyboardEvents = True
        InactivityMonitor.MonitorMouseEvents = True



        'Printers
        xPrinterHousingLabel = New Printer("HousingLabelPrinter")
        ucPrnHousingLabel.myPrn = xPrinterHousingLabel.myPrn
        xPrinterHousingLabel.Start()
        ucPrnHousingLabel.Activate()



        xMakeRecipeWizard = New MakeRecipeWizard
        xMakeRecipeWizNavigator = New MakeRecipeWizNavigator
        xUpdateRecipeWizNavigator = New UpdateRecipeWizNavigator

        xCameraAlignWizard = New CameraAlignWizard
        xCameraAlignWizNavigator = New CameraAlignWizNavigator
        xCameraReference = New CameraReference

        SplashScreen.pbrInit.Value = 7



        ucResourceMonitor.Activate()

        InitBackgroundWorkers()

        StartTrace()


        'Supply
        picVcc.Image = Image.FromFile(xGlobals.PicturePath & "plsTensDiAlim.ico")    'My.Resources.plsTensDiAlim.ToBitmap
        If Not xAppConfig.Params.Supply.MeasureEnabled Then
            panVcc.Left = -10000
        End If

        'Printer
        If xAppConfig.IsAnyPrinterEnabled Then
            panPrinter.Left = 519
        Else
            panPrinter.Left = -10000
        End If



        SplashScreen.lblProgress.Text = "Init devices...."
        Application.DoEvents()
        StartInputOutputs(LastModel)
        StartECU(LastModel)
        ' xTest = New Test(LastModel, xEcu, False)
        xLightFuncs = New LasCore.LightFunctions(SetLightFunctionsClassParams(LastModel, xEcu, xAppConfig.Params.LightFuncs))
        StartPlc()
        StartBcr()
        StartBadgeReader()
        xScrewdrivers.Open(xInOut)
        If Not xScrewdrivers.ConnectionOK Then
            Dim sMsg As String = xTextsManag.GetPublicText("ScrewdriversNOK") & vbCrLf & xTextsManag.GetPublicText("ForcedEndProgram")
            MsgBox(sMsg, MsgBoxStyle.Critical + MsgBoxStyle.OkOnly)
            EndProgram()
            End
        End If
        'Icon
        ucScrewdrivers.myScrewdriver = xScrewdrivers
        ucScrewdrivers.TextManagement = xTextsManag
        ucScrewdrivers.LoadText()
        ucScrewdrivers.Activate()
        SplashScreen.pbrInit.Value = 15




        If xAppConfig.Params.ProdUserLoginRequired Then
            panWorker.Visible = True
            panWorker.Location = New Point(1695, 62)
            panProduz.Size = New Size(385, 40)
            lblProduzInCorso.Size = New Size(370, 29)
        Else
            panWorker.Visible = False
            panWorker.Location = New Point(-10000, 62)
            panProduz.Size = New Size(592, 40)
            lblProduzInCorso.Size = New Size(577, 29)
        End If


        DisplayID = picImageCamera.Handle.ToInt32()
        frmMainImageGraphics = picImageCamera.CreateGraphics

        'Cameras
        SplashScreen.lblProgress.Text = "Init cameras...."
        Application.DoEvents()
        Dim ErrMsg As String = StartCameras()
        If ErrMsg <> "" Then
            xGlobals.ForceEndProgram = True
            MsgBox(ErrMsg, MsgBoxStyle.Critical + MsgBoxStyle.OkOnly)
            End
        End If
        SplashScreen.pbrInit.Value = 25

        'Create graphic for drawing
        Dim cam As LasCore.Icamera = xCameraManagement.GetCamera(LasCore.CameraManagement.enumCameraId.CameraCentral)
        xGraphRes = New GraphicResults(picImageCamera.CreateGraphics, 0, 0, picImageCamera.Width, picImageCamera.Height)
        xGraphRes.Grid.DeltaXfor1Grad = cam.Config.Alignement.GradToPixelHori
        xGraphRes.Grid.DeltaYfor1Grad = cam.Config.Alignement.GradToPixelVert

        xDrawsOnLive = New DrawsOnLive(0, 0, picImageCamera.Width, picImageCamera.Height)
        xDrawsOnLive.DeltaXfor1Grad = cam.Config.Alignement.GradToPixelHori
        xDrawsOnLive.DeltaYfor1Grad = cam.Config.Alignement.GradToPixelVert



        'Verifica se tutto OK
        If xGlobals.ForceEndProgram Then
            MsgBox(xTextsManag.GetPublicText("ForcedEndProgram"), MsgBoxStyle.Critical + MsgBoxStyle.OkOnly)
            EndProgram()
            End
        End If



        SplashScreen.lblProgress.Text = "Starting...."
        Application.DoEvents()

        StartECU(LastModel)
        xTest = New Test(LastModel, xEcu, False)

        KeyPreview = True

        'Start chaos
        tmrVisual = New Windows.Forms.Timer
        tmrVisual.Enabled = True
        tmrVisual.Interval = 2000
        tmrInfoOp = New Windows.Forms.Timer
        tmrInfoOp.Enabled = True
        tmrInfoOp.Interval = 1000
        tmrVisualFast = New Windows.Forms.Timer
        tmrVisualFast.Enabled = True
        tmrVisualFast.Interval = 50
        tmrCheckTraceConnection = New Windows.Forms.Timer
        tmrCheckTraceConnection.Enabled = True
        tmrCheckTraceConnection.Interval = 5000

        tmrCameraRestart = New Windows.Forms.Timer
        tmrCameraRestart.Enabled = True
        tmrCameraRestart.Interval = 50

        xPicImage = picImageCamera

        LastRunningModel = New Model(0)


        mnu.CreateMenu(Me, xConfig.GetMenus(MyBase.Name), xTextsManag.LanguageToUse, xUsers.UserLogged)

        xInfoOp = New List(Of String)


        SplashScreen.lblProgress.Text = "Activating...."
        Application.DoEvents()

        ReDim ScrewdriverInsertionInProgress(xScrewdrivers.ConfigData.Screwdrivers.Count - 1)

        ucpanCamera.Activate(xTextsManag)
        ucpanTeam.Activate(xTextsManag)
        ucpanHost.Activate(xTextsManag)

        xCameraManagement.ActivateCamera(LastModel.Generic.DefaultCamera)
        xCameraManagement.StartLiveOnCamera(LastModel.Generic.DefaultCamera)

        GrabTime.Start()

        'Carica i messaggi sui controlli
        Call LoadText()

        If xAppConfig.Params.MasterScheduling Then
            ucMasterMonitor.Activate(xGlobals.DataPath + "MasterScheduling.xml")
        Else
            ucMasterMonitor.Visible = False
        End If

        Logout()

        If xUsers.Login("", "") Then
            Login()
            mnu.CreateMenu(Me, xConfig.GetMenus(MyBase.Name), xTextsManag.LanguageToUse, xUsers.UserLogged)
            mnu.ShowMenu("Main")
        Else
            mnu.ShowMenu("Login")
        End If

        SplashScreen.Dispose()
        SplashScreen = Nothing

        InitializationDone = True

        xDataStorage.AddEvent("System", "Program started", "")

    End Sub

#End Region


#Region "Private"

    Private Sub LoadText()

        '   xTextsManag.LanguageToUse = xAppConfig.SelectedLanguage
        Try
            TextsManag = New TextsManagement(xTextsManag.LanguageToUse)
            TextsManag = xTextsManag.DeepCopy
            TextsManag.ReadFormTexts(MyBase.Name)
        Catch ex As Exception

        End Try


        Dim str As String = String.Format("{0} Rev: {1}.{2}.{3}", Application.ProductName, My.Application.Info.Version.Major,
                                          My.Application.Info.Version.Minor, My.Application.Info.Version.Build)

        Me.Text = str

        lblWorkOrder.Text = xAppConfig.Params.WorkOrder
        lblWorkOrder2.Text = xAppConfig.Params.WorkOrder2

        lblLAS.Text = "LAS " & String.Format("{0}.{1}.{2}", My.Application.Info.Version.Major, My.Application.Info.Version.Minor, My.Application.Info.Version.Build)
        lblLasLicense.Text = xTextsManag.GetPublicText("LicenseNr") & LasCore.LicenseSerialNr.ToString

        xPlcHmi.Language = xTextsManag.LanguageToUse

        ucpanCamera.LoadText(xTextsManag)
        ucpanTeam.LoadText(xTextsManag)
        ucpanHost.LoadText(xTextsManag)

        ucScrewdrivers.TextManagement = xTextsManag
        ucScrewdrivers.LoadText()


        lblDescrCycles.Text = TextsManag.GetText("lblDescrCycles", ".")
        lblDescrGoodTot.Text = TextsManag.GetText("lblDescrGood", ".")
        lblDescrScrapTot.Text = TextsManag.GetText("lblDescrScrap", ".")
        lblDescrGoodAct.Text = TextsManag.GetText("lblDescrGood", ".")
        lblDescrScrapAct.Text = TextsManag.GetText("lblDescrScrap", ".")

        'Results
        tabResults.TabPages(iTabSequence).Text = TextsManag.GetText("tabSequence", ".")
        tabResults.TabPages(iTabResultElet).Text = TextsManag.GetText("lblDescrEletTest", ".")
        tabResults.TabPages(iTabResultGeom).Text = TextsManag.GetText("lblDescrGeomTest", ".")
        tabResults.TabPages(iTabResultAiming).Text = TextsManag.GetText("lblDescrAimingTest", ".")
        tabResults.TabPages(iTabResultPhotom).Text = TextsManag.GetText("lblDescrPhotomTest", ".")
        tabResults.TabPages(iTabResultMotor).Text = TextsManag.GetText("lbDescrlMotorTest", ".")
        tabResults.TabPages(iTabResultECUs).Text = TextsManag.GetText("lblDescrEcuTest", ".")
        tabResults.TabPages(iTabResultOthers).Text = TextsManag.GetText("lblDescrOthersTest", ".")

        'Electrical
        lblAbsortion.Text = TextsManag.GetText("lblAbsortion", ".")
        lblAbsortionMin.Text = TextsManag.GetText("lblAbsortionMin", ".")
        lblAbsortionVal.Text = TextsManag.GetText("lblAbsortionVal", ".")
        lblAbsortionMax.Text = TextsManag.GetText("lblAbsortionMax", ".")

        ucViewElectResultLB.Init(TextsManag.GetText("lblDescrAbsLowBeam", "."), xLightFuncs.LowBeamFormat, 0, 10, 0.1)
        ucViewElectResultHB.Init(TextsManag.GetText("lblDescrAbsHighBeam", "."), xLightFuncs.DisplayFormat(LightFunctions.enumLightFunctions.HighBeam), 0, 10, 0.1)
        ucViewElectResultPL.Init(TextsManag.GetText("lblDescrAbsParkLight", "."), xLightFuncs.DisplayFormat(LightFunctions.enumLightFunctions.ParkLight), 0, 10, 0.1)
        ucViewElectResultTL.Init(TextsManag.GetText("lblDescrAbsTurnLight", "."), xLightFuncs.DisplayFormat(LightFunctions.enumLightFunctions.TurnIndicator), 0, 10, 0.1)
        ucViewElectResultFB.Init(TextsManag.GetText("lblDescrAbsFogLight", "."), xLightFuncs.DisplayFormat(LightFunctions.enumLightFunctions.FogBeam), 0, 10, 0.1)
        ucViewElectResultDL.Init(TextsManag.GetText("lblDescrAbsDayLight", "."), xLightFuncs.DisplayFormat(LightFunctions.enumLightFunctions.DayLight), 0, 10, 0.1)
        ucViewElectResultSM.Init(TextsManag.GetText("lblDescrAbsSideMarker", "."), xLightFuncs.DisplayFormat(LightFunctions.enumLightFunctions.SideMarker), 0, 10, 0.1)
        ucViewElectResultCL.Init(TextsManag.GetText("lblDescrAbsCorneringLight", "."), xLightFuncs.DisplayFormat(LightFunctions.enumLightFunctions.CorneringLight), 0, 10, 0.1)
        ucViewElectResultVcc.Init("Vcc [V]", "#0.00", 9, 16, 0.1)

        ucViewBurnInResultCurrentDrop.Init(TextsManag.GetText("lblDescrBurnInCurrentDrop", "."), "#0", 0, 50, 1)
        ucViewBurnInResultGoodCycles.Init(TextsManag.GetText("lblDescrBurnInGoodCycles", "."), "#0", 0, 10, 0)
        ucViewBurnInResultBadCycles.Init(TextsManag.GetText("lblDescrBurnInBadCycles", "."), "#0", 0, 10, 0)
        ucViewBurnInResultVcc.Init("Vcc [V]", "#0.00", 9, 16, 0.1)

        grpElectCurrentCurve.Text = TextsManag.GetText("grpElectCurrentCurve", ".")
        ucCurrentCurveResult.LoadText(TextsManag)

        ucViewLowBeamCutoffSharpness.Init("#0.00", 0, 1, 0.01)
        ucViewLowBeamCutoffFlatness.Init("#0.00", -1, 1, 0.01)
        ucViewLowBeamCutoffFWHM.Init("#0.00", 0, 1, 0.01)
        ucViewLowBeamBaseCutoffSharpness.Init("#0.00", 0, 1, 0.01)
        ucViewLowBeamBaseCutoffFlatness.Init("#0.00", -1, 1, 0.01)
        ucViewLowBeamBaseCutoffFWHM.Init("#0.00", 0, 2, 0.01)
        ucViewLowBeamTopCutoffSharpness.Init("#0.00", 0, 1, 0.01)
        ucViewLowBeamTopCutoffFlatness.Init("#0.00", -1, 1, 0.01)
        ucViewLowBeamTopCutoffFWHM.Init("#0.00", 0, 2, 0.01)

        'ucViewShapeLowBeamResults.Init("0.0", -10, 10, -10, 90, 0, 6, 0.1)


        'Results motors test
        grpMotorsPos.Text = TextsManag.GetText("grpPos", ".")
        lblDescrMtrPosVert.Text = TextsManag.GetText("lblDescrMtrPosVert", ".")
        lblDescrMtrPosHori.Text = TextsManag.GetText("lblDescrMtrPosHori", ".")
        lblDescrMtrPosCurrent.Text = TextsManag.GetText("lblDescrMtrPosCurrent", ".")
        lblDescrMtrReference.Text = TextsManag.GetText("lblDescrMtrReference", ".")

        'Results geometrics test
        grpGeomPointPos.Text = TextsManag.GetText("grpGeomPointPos", ".")
        lblGeoPointPosVert.Text = TextsManag.GetText("lblGeoPointPosVert", ".")
        lblGeoPointPosHori.Text = TextsManag.GetText("lblGeoPointPosHori", ".")
        ' lblGeoDescrHC.Text = TextsManag.GetText("lblGeoDescrHC")
        ucViewGeomPointHC.Label = TextsManag.GetText("lblGeoDescrHC", ".")
        ucViewGeomPointLBHS.Label = TextsManag.GetText("lblGeoDescrLBHS", ".")
        ucViewGeomPointHBHS.Label = TextsManag.GetText("lblGeoDescrHBHS", ".")
        ucViewGeomPointFBHS.Label = TextsManag.GetText("lblGeoDescrFBHS", ".")
        ucViewGeomPointCLHS.Label = TextsManag.GetText("lblGeoDescrCLHS", ".")
        ucViewGeomPointCLMG.Label = TextsManag.GetText("lblGeoDescrCLMG", ".")
        ucViewGeomPointLowBeamBaseMG.Label = TextsManag.GetText("lblGeoDescrBIGLMG", ".")
        ucViewLowBeamCutoffPosition.Label = TextsManag.GetText("lblDescrLowBeamCutoffPosition", ".")
        ucViewGeomPointLowBeamTopMG.Label = TextsManag.GetText("lblDescrLowBeamTopCutoffPosition", ".")


        'grpShape.Text = TextsManag.GetText("grpShape", ".")
        'ucViewShapeLowBeamResults.Label = TextsManag.GetText("lblDescrShapeLowBeam", ".")
        '' lblDescrShapeFogBeam.Text = TextsManag.GetText("lblDescrShapeFogBeam")
        'lblDescrShapeSite.Text = TextsManag.GetText("lblDescrShapeSite", ".")
        'lblDescrShapeAzim.Text = TextsManag.GetText("lblDescrShapeAzim", ".")
        'lblDescrShapeHight.Text = TextsManag.GetText("lblDescrShapeHight", ".")



        'Cutoff
        grpCutoff.Text = TextsManag.GetText("grpCutoff", ".")
        tabCutoff.TabPages(0).Text = TextsManag.GetText("CutoffLowBeam", ".")
        tabCutoff.TabPages(1).Text = TextsManag.GetText("CutoffLowBeamBase", ".")
        lblLowBeamSharpnessScanPos.Text = TextsManag.GetText("lblSharpnessScanPos", ".")
        ucViewLowBeamCutoffSharpness.Label = TextsManag.GetText("lblDescrSharpness", ".")
        ucViewLowBeamCutoffFlatness.Label = TextsManag.GetText("lblDescrFlatness", ".")
        lblLowBeamBaseSharpnessScanPos.Text = TextsManag.GetText("lblSharpnessScanPos", ".")
        ucViewLowBeamBaseCutoffSharpness.Label = TextsManag.GetText("lblDescrSharpness", ".")
        ucViewLowBeamBaseCutoffFlatness.Label = TextsManag.GetText("lblDescrFlatness", ".")
        lblLowBeamTopSharpnessScanPos.Text = TextsManag.GetText("lblSharpnessScanPos", ".")
        ucViewLowBeamTopCutoffSharpness.Label = TextsManag.GetText("lblDescrSharpness", ".")
        ucViewLowBeamTopCutoffFlatness.Label = TextsManag.GetText("lblDescrFlatness", ".")

        lblDescrGeomDriveTypeTestResult.Text = TextsManag.GetText("lblDescrGeomDriveTypeTestResult", ".")
        grpGeomDriveType.Text = TextsManag.GetText("lblDescrGeomDriveTypeTest", ".")

        'Result aiming test
        grpLowBeamCap.Text = TextsManag.GetText("grpLowBeamCap", ".")
        lblDescrCapUpLB.Text = TextsManag.GetText("lblDescrCapUp", ".")
        lblDescrCapDownLB.Text = TextsManag.GetText("lblDescrCapDown", ".")
        lblDescrCapLeftLB.Text = TextsManag.GetText("lblDescrCapLeft", ".")
        lblDescrCapRightLB.Text = TextsManag.GetText("lblDescrCapRight", ".")
        lblDescrCapStrokeLB.Text = TextsManag.GetText("lblDescrCapStroke", ".")
        grpHighBeamCap.Text = TextsManag.GetText("grpHighBeamCap", ".")
        lblDescrCapUpHB.Text = TextsManag.GetText("lblDescrCapUp", ".")
        lblDescrCapDownHB.Text = TextsManag.GetText("lblDescrCapDown", ".")
        lblDescrCapLeftHB.Text = TextsManag.GetText("lblDescrCapLeft", ".")
        lblDescrCapRightHB.Text = TextsManag.GetText("lblDescrCapRight", ".")
        lblDescrCapStrokeHB.Text = TextsManag.GetText("lblDescrCapStroke", ".")
        grpConerLightCap.Text = TextsManag.GetText("grpConerLightCap", ".")
        lblDescrCapUpCL.Text = TextsManag.GetText("lblDescrCapUp", ".")
        lblDescrCapDownCL.Text = TextsManag.GetText("lblDescrCapDown", ".")
        ' lblDescrCapLeftCL.Text = TextsManag.GetText("lblDescrCapLeft")
        ' lblDescrCapRightCL.Text = TextsManag.GetText("lblDescrCapRight")
        lblDescrCapStrokeFB.Text = TextsManag.GetText("lblDescrCapStroke", ".")

        'Result photom
        tabPhotom.TabPages(0).Text = TextsManag.GetText("lblDescrPhotomLowBeam", ".")
        tabPhotom.TabPages(1).Text = TextsManag.GetText("lblDescrPhotomHighBeam", ".")
        tabPhotom.TabPages(2).Text = TextsManag.GetText("lblDescrAbsPhotomFogBeam", ".")
        tabPhotom.TabPages(3).Text = TextsManag.GetText("tabLEDsDRL", ".")
        tabPhotom.TabPages(4).Text = TextsManag.GetText("tabLEDsTI", ".")
        ucViewPhotomResultsLowBeam.Init(xTextsManag)
        ucViewPhotomResultsHighBeam.Init(xTextsManag)
        ucViewPhotomResultsFogBeam.Init(xTextsManag)
        ucViewPhotomResultsDrl.Init(xTextsManag)
        ucViewPhotomResultsTi.Init(xTextsManag)



        'Results LEDs
        tabLEDs.TabPages(0).Text = TextsManag.GetText("tabLEDsLB", ".")
        tabLEDs.TabPages(1).Text = TextsManag.GetText("tabLEDsHB", ".")
        tabLEDs.TabPages(2).Text = TextsManag.GetText("tabLEDsPOS", ".")
        tabLEDs.TabPages(3).Text = TextsManag.GetText("tabLEDsTI", ".")
        tabLEDs.TabPages(4).Text = TextsManag.GetText("tabLEDsDRL", ".")
        tabLEDs.TabPages(5).Text = TextsManag.GetText("tabLEDsSM", ".")
        tabLEDs.TabPages(6).Text = TextsManag.GetText("tabLEDsCH", ".")
        tabLEDs.TabPages(7).Text = TextsManag.GetText("tabLEDsCL", ".")
        tabLEDs.TabPages(8).Text = TextsManag.GetText("tabLEDsWIPE", ".")

        ucViewLEDsLowBeamResults.Init(xTextsManag)
        ucViewLEDsHighBeamResults.Init(xTextsManag)
        ucViewLEDsPosResults.Init(xTextsManag)
        ucViewLEDsTurnResults.Init(xTextsManag)
        ucViewLEDsDayResults.Init(xTextsManag)
        ucViewLEDsSideResults.Init(xTextsManag)
        ucViewLEDsComingHomeResults.Init(xTextsManag)
        ucViewLEDsCorneringLightResults.Init(xTextsManag)
        ucViewWipeResults.Init(xTextsManag)


        'Results ECUs
        ucViewParamsEcuHLI.LoadText(TextsManag, False)
        lblEcuTempHLI.Text = TextsManag.GetText("lblEcuTemp", ".")
        lblDescrEcuTempCh1HLI.Text = TextsManag.GetText("lblDescrEcuTempCh", ".") & "1"
        lblDescrEcuTempCh2HLI.Text = TextsManag.GetText("lblDescrEcuTempCh", ".") & "2"
        lblDescrEcuTempCh3HLI.Text = TextsManag.GetText("lblDescrEcuTempCh", ".") & "3"
        lblDescrEcuTempCh4HLI.Text = TextsManag.GetText("lblDescrEcuTempCh", ".") & "4"
        lblDescrEcuTempCh5HLI.Text = TextsManag.GetText("lblDescrEcuTempCh", ".") & "5"
        lblDescrEcuTempCh6HLI.Text = TextsManag.GetText("lblDescrEcuTempCh", ".") & "6"
        lblDescrEcuTempInternalHLI.Text = TextsManag.GetText("lblDescrEcuTempInternal", ".")
        lblEcuTempLCU.Text = TextsManag.GetText("lblEcuTemp", ".")
        ucViewParamsEcuLCU.LoadText(TextsManag, True)
        lblDescrEcuTempCh1LCU.Text = TextsManag.GetText("lblDescrEcuTempCh", ".") & "1"
        lblDescrEcuTempCh2LCU.Text = TextsManag.GetText("lblDescrEcuTempCh", ".") & "2"
        lblDescrEcuTempCh3LCU.Text = TextsManag.GetText("lblDescrEcuTempCh", ".") & "3"
        lblDescrFanHLI.Text = TextsManag.GetText("lblDescrFan", ".")
        lblEcuLevelSensorHLI.Text = TextsManag.GetText("lblEcuLevelSensorHLI", ".")
        lblDescrVertLevelSensorHLI.Text = TextsManag.GetText("lblDescrVertLevelSensorHLI", ".")
        lblDescrHoriLevelSensorHLI.Text = TextsManag.GetText("lblDescrHoriLevelSensorHLI", ".")


        lblDescrStepsHorizMotors.Text = TextsManag.GetText("lblDescrStepsHorizMotors", ".")
        lblDescrStepsVertMotors.Text = TextsManag.GetText("lblDescrStepsVertMotors", ".")
        lblDescrStepsLfxMotors.Text = TextsManag.GetText("lblDescrStepsLfxMotors", ".")
        lblDescrStepsMotorsPos1.Text = TextsManag.GetText("lblDescrStepsMotorsPos", ".") & "1"
        lblDescrStepsMotorsPos2.Text = TextsManag.GetText("lblDescrStepsMotorsPos", ".") & "2"
        lblDescrStepsMotorsPos3.Text = TextsManag.GetText("lblDescrStepsMotorsPos", ".") & "3"
        lblDescrStepsMotorsPos4.Text = TextsManag.GetText("lblDescrStepsMotorsPos", ".") & "4"
        lblDescrStepsMotorsPos5.Text = TextsManag.GetText("lblDescrStepsMotorsPos", ".") & "5"
        lblDescrStepsMotorsPos1HB.Text = TextsManag.GetText("lblDescrStepsMotorsPos1HB", ".")
        lblDescrFanLCU.Text = TextsManag.GetText("lblDescrFan", ".")


        'LED22
        ucLed22DiagSignalsResults.LoadText(TextsManag)

        'OTP
        lblOtpDescrCoding.Text = TextsManag.GetText("lblOtpDescrCoding", ".")
        lblOtpDescrChecking.Text = TextsManag.GetText("lblOtpDescrChecking", ".")


        'LEDLeimo
        grpLedLeimoDiagnostic.Text = TextsManag.GetText("lblDiagnostic", ".")
        lblLedLeimoDiagOn.Text = TextsManag.GetText("lblDiagOn", ".")
        lblLedLeimoDiagOff.Text = TextsManag.GetText("lblDiagOff", ".")

        'M156
        ucEcuM156ViewResults.LoadText()

        'LED61KL
        ucEcuLed61KLViewResults.LoadText()


        'Results Others
        grpHighBeamShutter.Text = TextsManag.GetText("lblDescrShapeHighBeamShutter", ".")
        lblHighBeamShutterON.Text = TextsManag.GetText("lblDescrShapeHighBeamShutterON", ".")
        lblHighBeamShutterOFF.Text = TextsManag.GetText("lblDescrShapeHighBeamShutterOFF", ".")

        grpInitialPosition.Text = TextsManag.GetText("grpInitialPosition", ".")
        lblOtherInitialPosHor.Text = TextsManag.GetText("lblOtherInitialPosHor", ".")
        lblOtherInitialPosVer.Text = TextsManag.GetText("lblOtherInitialPosVer", ".")
        ucViewInitialPosition.Label = TextsManag.GetText("lblInitialPositionLowBeam", ".")


        'Menu pls
        plsLive.Text = TextsManag.GetText("plsLive", ".")
        plsFreeze.Text = TextsManag.GetText("plsFreeze", ".")
        plsSaveLastImage.Text = TextsManag.GetText("plsSave", ".")

        chkSaveTestImages.Text = TextsManag.GetText("chkSaveTestImages", ".")
        chkIsolux.Text = TextsManag.GetText("chkIsolux", ".")


        msgPlcComOK = TextsManag.GetText("PlcConnected", ".")
        msgPlcComNOK = TextsManag.GetText("PlcUnconnected", ".")
        msgPlcNotEnabled = TextsManag.GetText("PlcNotEnabled", ".")


        ucHSX.LoadText(xTextsManag)
        ucNI_USB_8476.LoadText(xTextsManag)

        ucMasterMonitor.LoadText(xTextsManag)


        'Menu
        mnu.CreateMenu(Me, xConfig.GetMenus(MyBase.Name), xTextsManag.LanguageToUse, xUsers.UserLogged)
        mnu.ShowMenu("Config")




    End Sub

    Private Sub UpdateRecipes()

        Dim CameraManagement = New LasCore.CameraManagement(xGlobals.DataPath & "CamerasConfig.xml")

        Dim UpdateRequired As Boolean = False
        Dim iRec = 0
        Dim myRecipe As Recipe
        myRecipe = New Recipe(xGlobals.myRecipeFile)
        myRecipe.ReadDataFromFile()
        For Each rec As Recipe.udtParams In myRecipe.RecipeList
            'Update test sequence
            If rec.TestSequence.Count = 0 Then
                Dim myRecipeOld As RecipeOld
                myRecipeOld = New RecipeOld(xGlobals.myRecipeFile)
                myRecipeOld.ReadDataFromFile()

                Dim myRecParams As New RecipeOld.udtParams
                myRecParams = myRecipeOld.ReadParams(rec.Id)
                For Each item As RecipeOld.enumTestType In myRecParams.TestSequence
                    myRecipe.RecipeList(iRec).TestSequence.Add(item.ToString)
                    UpdateRequired = True
                Next
                iRec += 1
            End If
            ''Update LampShape
            'If rec.LowBeamShape.ToUpdate Then

            '    Dim RicGeom As RecipeGeom
            '    RicGeom = New RecipeGeom(xGlobals.myRecipeGeomFile)
            '    RicGeom.ReadDataFromFile()
            '    Dim RecipeGeomParms As RecipeGeom.udtParams
            '    RecipeGeomParms = RicGeom.ReadParams(rec.IdRecipeGeom)

            '    'If Not IsNothing(RecipeGeomParms) Then
            '    '    Dim cam As LasCore.Icamera = CameraManagement.GetCamera(LasCore.CameraManagement.enumCameraId.CameraCentral)
            '    '    Dim AzimSlope As Single = RecipeGeomParms.PointHC.Advanced.ShapePattern.AzimSlope
            '    '    Dim SiteSlope As Single = RecipeGeomParms.PointHC.Advanced.ShapePattern.SiteSlope
            '    '    Dim StepHeight As Integer = RecipeGeomParms.PointHC.Advanced.ShapePattern.StepHeight * cam.Config.Alignement.GradToPixelVert
            '    '    Dim StepSlope As Single = RecipeGeomParms.PointHC.Advanced.ShapePattern.StepSlope
            '    '    Dim LHT As Boolean = RecipeGeomParms.PointHC.Advanced.ShapePattern.RHD
            '    '    Dim HvKpGap = New Point(-CInt(rec.HvHcGap.H * cam.Config.Alignement.GradToPixelHori), CInt(rec.HvHcGap.V * cam.Config.Alignement.GradToPixelVert))
            '    '    Dim LeftFromKp As Integer = RecipeGeomParms.PointHC.Advanced.SeekPointHC.PatternSizeLeftFromKP * cam.Config.Alignement.GradToPixelHori
            '    '    Dim RightFromKP As Integer = RecipeGeomParms.PointHC.Advanced.SeekPointHC.PatternSizeRightFromKP * cam.Config.Alignement.GradToPixelHori
            '    '    Dim HV As Point = New Point(rec.CoordHV.X, rec.CoordHV.Y)
            '    '    Dim Pattern As New LasCore.PatternManagement
            '    '    Pattern.LoadPattern(AzimSlope, SiteSlope, StepHeight, StepSlope, LHT, HV, HvKpGap, LeftFromKp, RightFromKP)

            '    '    rec.LowBeamShape.RHD = RecipeGeomParms.PointHC.Advanced.ShapePattern.RHD
            '    '    ' rec.LowBeamShape.SAE = StepHeight > 0
            '    '    rec.LowBeamShape.AzimSlope = AzimSlope
            '    '    rec.LowBeamShape.SiteSlope = SiteSlope
            '    '    rec.LowBeamShape.StepHeight = StepHeight
            '    '    rec.LowBeamShape.StepSlope = StepSlope

            '    '    'Save pattern
            '    '    rec.LowBeamShape.Pattern.Corners.Clear()
            '    '    rec.LowBeamShape.Pattern.HvKpGap = New Point(Pattern.Pattern.HvKpGap)
            '    '    rec.LowBeamShape.Pattern.KinkPoint = New Point(Pattern.Pattern.KinkPoint)
            '    '    For Each item As Point In Pattern.Pattern.Corners
            '    '        rec.LowBeamShape.Pattern.Corners.Add(New Point(item))
            '    '    Next

            '    '    rec.LowBeamShape.ToUpdate = False

            '    '    UpdateRequired = True
            '    'End If


            'End If


        Next
        If UpdateRequired Then myRecipe.WriteDataToFile()

    End Sub

    Private Sub VisInfoOp(ByVal sMsg As String, ByVal ForeColor As Color)
        lblTestResult.Text = sMsg
        lblTestResult.ForeColor = ForeColor

    End Sub

    Private Sub StartDataBackup()

        xDataBackUp = New DataBackup
        ' Database backup
        If xAppConfig.Params.DataStorage.Enabled Then
            If xAppConfig.Params.DataBackup.DatabaseBackup.Enabled Then
                If xAppConfig.Params.DataBackup.DatabaseBackup.DatabaseFilePath <> "" Then
                    xDataBackUp.dbFilePathForBackup = xAppConfig.Params.DataBackup.DatabaseBackup.DatabaseFilePath
                Else
                    xDataBackUp.dbFilePathForBackup = xGlobals.DatabasePath
                End If
                If xAppConfig.Params.DataBackup.DatabaseBackup.SqlConnectionName <> "" Then
                    xDataBackUp.ConnectionStringForBackup = xAppConfig.GetSqlConnection(xAppConfig.Params.DataBackup.DatabaseBackup.SqlConnectionName).ConnectionString
                Else
                    xDataBackUp.ConnectionStringForBackup = xAppConfig.GetSqlConnection(cLocalSqlServer).ConnectionString
                End If
                If xAppConfig.Params.DataBackup.DatabaseBackup.DatabaseName <> "" Then
                    xDataBackUp.dbNameForBackup = xAppConfig.Params.DataBackup.DatabaseBackup.DatabaseName
                Else
                    xDataBackUp.dbNameForBackup = "LAS"
                End If
                If xAppConfig.Params.DataBackup.DatabaseBackup.BackupTime <> "" Then
                    xDataBackUp.TimeToBackup = xAppConfig.Params.DataBackup.DatabaseBackup.BackupTime
                Else
                    xDataBackUp.TimeToBackup = "06:00:00"
                End If
                xDataBackUp.ActivateDatabaseBackup()
            End If
        End If


        'Backup excess data
        If xAppConfig.Params.DataStorage.Enabled Then
            If xAppConfig.Params.DataBackup.BackupExcessData.Enabled Then
                If xAppConfig.Params.DataBackup.BackupExcessData.DatabaseFilePath <> "" Then
                    xDataBackUp.dbFilePathForBackupDataExcess = xAppConfig.Params.DataBackup.BackupExcessData.DatabaseFilePath
                Else
                    xDataBackUp.dbFilePathForBackupDataExcess = xGlobals.DatabasePath
                End If
                If xAppConfig.Params.DataBackup.BackupExcessData.SqlConnectionName <> "" Then
                    xDataBackUp.ConnectionStringForBackupDataExcess = xAppConfig.GetSqlConnection(xAppConfig.Params.DataBackup.BackupExcessData.SqlConnectionName).ConnectionString
                Else
                    xDataBackUp.ConnectionStringForBackupDataExcess = xAppConfig.GetSqlConnection(cLocalSqlServer).ConnectionString
                End If
                If xAppConfig.Params.DataBackup.BackupExcessData.DatabaseName <> "" Then
                    xDataBackUp.dbNameForBackupDataExcess = xAppConfig.Params.DataBackup.BackupExcessData.DatabaseName
                Else
                    xDataBackUp.dbNameForBackupDataExcess = "LAS"
                End If
                If xAppConfig.Params.DataBackup.BackupExcessData.BackupTime <> "" Then
                    xDataBackUp.TimeToCopyDataExcess = xAppConfig.Params.DataBackup.BackupExcessData.BackupTime
                Else
                    xDataBackUp.TimeToCopyDataExcess = "06:00:00"
                End If

                xDataBackUp.EveryDay = xAppConfig.Params.DataBackup.BackupExcessData.EveryDay
                xDataBackUp.EveryWeek = xAppConfig.Params.DataBackup.BackupExcessData.EveryWeek
                xDataBackUp.EveryMonth = xAppConfig.Params.DataBackup.BackupExcessData.EveryMonth
                xDataBackUp.RemoveBackedUpData = xAppConfig.Params.DataBackup.BackupExcessData.RemoveBackedUpData

                xDataBackUp.TableNames = xAppConfig.Params.DataBackup.BackupExcessData.TableNames
                xDataBackUp.DateFieldName = xAppConfig.Params.DataBackup.BackupExcessData.DateFieldName
                xDataBackUp.ActivateBackupExcessData()
            End If
        End If


        'Files backup
        xDataBackUp.SourceFolderName = xGlobals.DataPath
        If xAppConfig.Params.DataBackup.FilesBackup.BackupFolder = "" Then
            xDataBackUp.DestinationFolderName = xGlobals.ArchivesPath
        Else
            xDataBackUp.DestinationFolderName = xAppConfig.Params.DataBackup.FilesBackup.BackupFolder
        End If
        If xAppConfig.Params.DataBackup.FilesBackup.BackupTime <> "" Then
            xDataBackUp.TimeToBackupFiles = xAppConfig.Params.DataBackup.FilesBackup.BackupTime
        Else
            xDataBackUp.TimeToBackupFiles = "06:00:00"
        End If
        If xAppConfig.Params.DataBackup.FilesBackup.Enabled Then xDataBackUp.ActivateFilesBackup()


        xDataBackUp.Activate()


    End Sub

    Private Sub InizDataGridViewPhotomResults(ByVal dgv As DataGridView)
        With dgv
            .Visible = True
            .AutoGenerateColumns = False
            .AlternatingRowsDefaultCellStyle.BackColor = Color.Lavender
            .BackColor = Color.WhiteSmoke
            .ForeColor = Color.MidnightBlue
            .CellBorderStyle = DataGridViewCellBorderStyle.Sunken
            .ColumnHeadersDefaultCellStyle.Font = New Font("Tahoma", 9.0!, FontStyle.Bold)
            .ColumnHeadersDefaultCellStyle.BackColor = Color.MidnightBlue
            .ColumnHeadersDefaultCellStyle.ForeColor = Color.WhiteSmoke
            .DefaultCellStyle.ForeColor = Color.MidnightBlue
            .DefaultCellStyle.BackColor = Color.WhiteSmoke
            .DefaultCellStyle.Font = New Font("Tahoma", 9.0!, FontStyle.Regular)

            .ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter
            .DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter

            .RowHeadersWidth = 30
            .RowHeadersVisible = False

            '.SelectionMode = DataGridViewSelectionMode.CellSelect
            .MultiSelect = False

            'Delete rows and Columns
            .Columns.Clear()
            .Rows.Clear()

            'Crea colonne
            Dim newColumn As Integer = dgv.Columns.Add("Name", xTextsManag.GetFormText(MyBase.Name, "lblDescrPhotomName"))
            .Columns(newColumn).Width = 150
            newColumn = .Columns.Add("Min", "Min")
            .Columns(newColumn).Width = 65
            newColumn = .Columns.Add("Value", "Val")
            .Columns(newColumn).Width = 65
            newColumn = .Columns.Add("Max", "Max")
            .Columns(newColumn).Width = 65
        End With

    End Sub

    Private Function CheckConnectionsToDatabases() As Boolean

        'Test connections
        For Each item As AppConfig.udtParams.udtSqlConnectionConfig In xAppConfig.Params.SqlConnections
            If item.Enabled Then
                Dim dbTest As New czDatabase
                If dbTest.CheckConnection(item.ConnectionString) Then
                Else
                    Dim sMsg As String = xTextsManag.GetPublicText("ProblemsOnConnectingDatabase") & " " & item.DatabaseName & vbCrLf
                    sMsg += " - " & dbTest.Status
                    MsgBox(sMsg, MsgBoxStyle.Critical + MsgBoxStyle.OkOnly)
                    Return False
                End If
            End If
        Next

        Return True
    End Function

    Private Function StartTrace() As Boolean

        If xAppConfig.Params.Trace.Enabled Then
            Dim sqlCon As AppConfig.udtParams.udtSqlConnectionConfig = xAppConfig.GetSqlConnection("SqlTraceInterface")

            Select Case xAppConfig.Params.Trace.Host
                Case enumTraceHost.TraMa
                    xTraceInterface = New TraMaInterface
                Case enumTraceHost.TM
                    xTraceInterface = New TMInterface
                Case Else
                    xTraceInterface = New TraMaInterface
            End Select
            xTraceInterface.Enabled = True
            xTraceInterface.PcName = xAppConfig.Params.Trace.PcName
            xTraceInterface.CharSepar = ";"
            xTraceInterface.AnswerTimeout = 10000
            xTraceInterface.Enabled = xAppConfig.Params.Trace.Enabled
            xTraceInterface.FoolProofEnabled = xAppConfig.Params.Trace.FoolProofControl
            xTraceInterface.PieceQtyDoneWithNoFoolProof = 0
            xTraceInterface.TraMaStationName = xAppConfig.Params.Trace.StationName
            xTraceInterface.MeasuresEnabled = xAppConfig.Params.Trace.StoreMeasures.Enabled
            xTraceInterface.MeasuresDatabaseConnection = xAppConfig.Params.Trace.StoreMeasures.DatabaseConnection
            xTraceInterface.MeasuresTable = xAppConfig.Params.Trace.StoreMeasures.TableConfig.DeepCopy
            xTraceInterface.FailuresEnabled = xAppConfig.Params.Trace.StoreFailures.Enabled
            xTraceInterface.FailuresDatabaseConnection = xAppConfig.Params.Trace.StoreFailures.DatabaseConnection
            xTraceInterface.FailuresTable = xAppConfig.Params.Trace.StoreFailures.TableConfig.DeepCopy
            If Not IsNothing(sqlCon) Then
                xTraceInterface.ConnectionToDatabase = sqlCon.ConnectionString
            End If

            xTraceInterface.Activate()
        End If

        Return True

    End Function

    Private Function StartPlc() As Boolean
        'Start Plc
        xDataStorage.AddEvent("System", "Start PLCs", "")
        plcCnf = xAppConfig.GetPlc("plc")
        Plc = New ePlc
        Plc.SampleTime = 0
        Plc.Name = plcCnf.Name
        Plc.ProtocolType = plcCnf.ProtocolType
        Plc.Activate(plcCnf)
        xFromPlc = New PlcDataDecoding
        xToPlc = New PlcDataCoding(plcCnf.PlcArea("InterfaceWrite").qtaW * 2, plcCnf.InterfaceVersion)
        'Icon
        ucPlc.myPlc = Plc
        ucPlc.Activate()
        xDataStorage.AddEvent("System", "Start PLCs", "Done")
        'Data analysing
        tmrFromPlc = New Windows.Forms.Timer
        tmrFromPlc.Interval = 10
        tmrFromPlc.Enabled = True
        'Keep alive
        tmrKeepAlivePlc = New Windows.Forms.Timer
        tmrKeepAlivePlc.Interval = plcCnf.KeepAliveInterval
        tmrKeepAlivePlc.Enabled = True
        'HMI
        If plcCnf.HMI Then
            xPlcHmi.Start(Plc)
        End If
        Return True
    End Function

    Private Function StartBcr() As Boolean
        'Start barcode reader
        If xAppConfig.IsAnyBcrEnabled Then
            xBcr = New eBcr
            xBcr.Config = New AppConfig.udtParams.udtBcrConfig
            xBcr.Config = xAppConfig.GetBcr("Bcr")
            xBcr.Activate(xBcr.Config)
            'Icon
            ucBcr.myBcr = xBcr
            ucBcr.Activate()

            myBcr = xBcr
        Else
            panBcr.Visible = False
        End If
        Return True
    End Function

    Private Function StartBadgeReader() As Boolean
        'Start badge reader
        If xAppConfig.Params.BadgeCodeReader.Enabled Then
            xBadgeReader = New BadgeReader
            xBadgeReader.Config = New AppConfig.udtParams.udtBadgeReaderConfig
            xBadgeReader.Config = xAppConfig.Params.BadgeCodeReader
            xBadgeReader.Activate(xBadgeReader.Config)
            'Icon
            ucBadgeReader.myBadgeReader = xBadgeReader
            ucBadgeReader.Activate()

            myBadgeReader = xBadgeReader
        Else
            panBadgeReader.Visible = False
        End If
        Return True
    End Function


    Private Function StartInputOutputs(ModelToUse As Model) As Boolean
        If xInOutConfig.ConfigData.ControllerIO.Enabled Then
            If xInOutConfig.ConfigData.ControllerIO.Name = "PLC" Then
                xInOut = New LasCore.InOutByPLC
            Else
                xInOut = New LasCore.InOut
            End If
        Else
            xInOut = New LasCore.InOutSim
        End If
        xInOut.InitIO(xInOutConfig, ModelToUse.Wiring, ModelToUse.Igniction, ModelToUse.Electric.DiagnosticByEcu.AnalogInputName)
        xInOut.StartController(Not xInOutConfig.ConfigData.ControllerIO.Enabled, xGlobals.myInOutConfigFile, xGlobals.ArchivesPath)
        xLightFuncs = New LasCore.LightFunctions(SetLightFunctionsClassParams(ModelToUse, xEcu, xAppConfig.Params.LightFuncs))
        xInOut.AllOutputsOff()
        xInOut.SetVcc(xAppConfig.Params.Supply.DefaultSupply)

        'Dim a As LightFunctionsNew
        'a = New LightFunctionsNew(ModelToUse, xEcu, xAppConfig.Params.LightFuncs)


        Return True
    End Function

    Private Function StartECU(LastModel As Model) As Boolean

        'ECU interface
        SetxEcu(LastModel)
        If xAppConfig.Params.EcuInterface.Enabled Then
            Select Case xAppConfig.Params.EcuInterface.Model
                Case "HSX"
                    ucNI_USB_8476.Location = New Point(-1000, 2)
                    ucHSX.Location = New Point(2, 2)
                    ucHSX.Size = New Size(107, 36)
                    ucHSX.IpAddress = xAppConfig.Params.EcuInterface.IpAddress
                    ucHSX.myEcu = xEcu
                    ucHSX.Activate()

                Case "NI USB8476"
                    ucHSX.Location = New Point(-1000, 2)
                    ucNI_USB_8476.Location = New Point(2, 2)
                    ucNI_USB_8476.Size = New Size(107, 36)
                    ucNI_USB_8476.IpAddress = xAppConfig.Params.EcuInterface.IpAddress
                    ucNI_USB_8476.myEcu = xEcu
                    ucNI_USB_8476.Activate()
                Case Else
                    panHSX.Location = New Point(-1000, 2)
            End Select

        Else
            panHSX.Location = New Point(-1000, 2)
        End If

        Return True
    End Function



    Private Function InitBackgroundWorkers() As Boolean

        bgwDoReadLabels = New System.ComponentModel.BackgroundWorker
        bgwDoReadLabels.WorkerReportsProgress = True
        bgwDoReadLabels.WorkerSupportsCancellation = True

        bgwDoCompleteTest = New System.ComponentModel.BackgroundWorker
        bgwDoCompleteTest.WorkerReportsProgress = True
        bgwDoCompleteTest.WorkerSupportsCancellation = True

        bgwDoMakeRecipeWizard = New System.ComponentModel.BackgroundWorker
        bgwDoMakeRecipeWizard.WorkerReportsProgress = True
        bgwDoMakeRecipeWizard.WorkerSupportsCancellation = True

        bgwDoInternalCameraAlignWizard = New System.ComponentModel.BackgroundWorker
        bgwDoInternalCameraAlignWizard.WorkerReportsProgress = True
        bgwDoInternalCameraAlignWizard.WorkerSupportsCancellation = True

        bgwDoUpdateRecipeWizard = New System.ComponentModel.BackgroundWorker
        bgwDoUpdateRecipeWizard.WorkerReportsProgress = True
        bgwDoUpdateRecipeWizard.WorkerSupportsCancellation = True

        bgwDoSetCameraReference = New System.ComponentModel.BackgroundWorker
        bgwDoSetCameraReference.WorkerReportsProgress = True
        bgwDoSetCameraReference.WorkerSupportsCancellation = True

        bgwDoCheckCameraReferencen = New System.ComponentModel.BackgroundWorker
        bgwDoCheckCameraReferencen.WorkerReportsProgress = True
        bgwDoCheckCameraReferencen.WorkerSupportsCancellation = True

        bgwDoRecipeEdit = New System.ComponentModel.BackgroundWorker
        bgwDoRecipeEdit.WorkerReportsProgress = True
        bgwDoRecipeEdit.WorkerSupportsCancellation = True


        bgwDoPrintLabels = New System.ComponentModel.BackgroundWorker
        bgwDoPrintLabels.WorkerReportsProgress = True
        bgwDoPrintLabels.WorkerSupportsCancellation = True

        Return True

    End Function

    Private Function InitRecipes() As Boolean
        xRecipe = New Recipe(xGlobals.myRecipeFile)
        xRecipe.ReadDataFromFile()
        xRecipeElet = New RecipeElet(xGlobals.myRecipeEletFile)
        xRecipeElet.ReadDataFromFile()
        xRecipeGeom = New RecipeGeom(xGlobals.myRecipeGeomFile)
        xRecipeGeom.ReadDataFromFile()
        xRecipePhotom = New RecipePhotom(xGlobals.myRecipePhotomFile)
        xRecipePhotom.ReadDataFromFile()
        xRecipeAiming = New RecipeAiming(xGlobals.myRecipeAimingFile)
        xRecipeAiming.ReadDataFromFile()
        xRecipeLabels = New RecipeLabels(xGlobals.myRecipeLabelsFile)
        xRecipeLabels.ReadDataFromFile()
        xRecipeMotors = New RecipeMotors(xGlobals.myRecipeMotorsFile)
        xRecipeMotors.ReadDataFromFile()
        xRecipeECUs = New RecipeECUs(xGlobals.myRecipeECUsFile)
        xRecipeECUs.ReadDataFromFile()
        xRecipeLEDs = New RecipeLEDs(xGlobals.myRecipeLEDsFile)
        xRecipeLEDs.ReadDataFromFile()
        xRecipeDriveSide = New RecipeDriveSide(xGlobals.myRecipeDriveSideFile)
        xRecipeDriveSide.ReadDataFromFile()
        Return True
    End Function

#End Region

#Region "Gestione Login"

    Private Sub EnableFunctions(ByVal UserRole As LasCore.Users.enumUserRole)
        Select Case UserRole
            Case Users.enumUserRole.Master
                Me.ControlBox = True

                ucpanCamera.DebugEnabled = True
                ucpanTeam.DebugEnabled = True
                ucpanHost.DebugEnabled = True
                EnableBCRs(True)
                EnablePLCs(True)
                EnablePRNs(True)
                EnableGraphicEdit(True)
                ucHSX.DebugEnabled = True
                ucNI_USB_8476.DebugEnabled = True
                EnableLowerMenu(True)
                ucResourceMonitor.DebugEnabled = True
                ucMasterMonitor.DebugEnabled = True
                ucScrewdrivers.DebugEnabled = True

            Case Users.enumUserRole.Administrator
                Me.ControlBox = True

                ucpanCamera.DebugEnabled = True
                ucpanTeam.DebugEnabled = True
                ucpanHost.DebugEnabled = True
                EnableBCRs(True)
                EnablePLCs(True)
                EnablePRNs(True)
                EnableGraphicEdit(True)
                ucHSX.DebugEnabled = True
                ucNI_USB_8476.DebugEnabled = True
                EnableLowerMenu(True)
                ucResourceMonitor.DebugEnabled = True
                ucMasterMonitor.DebugEnabled = True
                ucScrewdrivers.DebugEnabled = True

            Case Users.enumUserRole.Maintenance
                Me.ControlBox = True

                ucpanCamera.DebugEnabled = True
                ucpanTeam.DebugEnabled = True
                ucpanHost.DebugEnabled = True
                EnableBCRs(True)
                EnablePLCs(True)
                EnablePRNs(True)
                EnableGraphicEdit(True)
                ucHSX.DebugEnabled = True
                ucNI_USB_8476.DebugEnabled = True
                EnableLowerMenu(True)
                ucResourceMonitor.DebugEnabled = True
                ucMasterMonitor.DebugEnabled = True
                ucScrewdrivers.DebugEnabled = True

            Case Users.enumUserRole.User
                Me.ControlBox = True

                ucpanCamera.DebugEnabled = False
                ucpanTeam.DebugEnabled = False
                ucpanHost.DebugEnabled = True
                EnableBCRs(False)
                EnablePLCs(True)
                EnablePRNs(False)
                EnableGraphicEdit(False)
                ucHSX.DebugEnabled = False
                ucNI_USB_8476.DebugEnabled = False
                EnableLowerMenu(True)
                ucResourceMonitor.DebugEnabled = False
                ucMasterMonitor.DebugEnabled = False
                ucScrewdrivers.DebugEnabled = False

            Case Else
                Me.ControlBox = False

                ucpanCamera.DebugEnabled = False
                ucpanTeam.DebugEnabled = False
                ucpanHost.DebugEnabled = True

                EnableBCRs(False)
                EnablePLCs(True)
                EnablePRNs(False)
                EnableGraphicEdit(False)
                ucHSX.DebugEnabled = False
                ucNI_USB_8476.DebugEnabled = False
                EnableLowerMenu(False)
                ucResourceMonitor.DebugEnabled = False
                ucMasterMonitor.DebugEnabled = False
                ucScrewdrivers.DebugEnabled = False

        End Select

    End Sub

    Private Sub Login()

        Me.lblLoginName.Text = xUsers.UserLogged.Name
        Me.lblUserRole.Text = xUsers.UserLogged.Role.ToString
        Call EnableFunctions(xUsers.UserLogged.Role)
        xDataStorage.AddEvent("System", "Login" & " " & xUsers.UserLogged.Name, "")
        picUserLogged.Image = Image.FromFile(xGlobals.PicturePath & "UserLogged.png")    'My.Resources.UserLogged


        'Autologof
        InactivityMonitor = MonitorCreator.CreateInstance(MonitorType.ApplicationMonitor)
        InactivityMonitor.SynchronizingObject = Me
        InactivityMonitor.MonitorKeyboardEvents = True
        InactivityMonitor.MonitorMouseEvents = True
        If xUsers.UserLogged.AutoLogoffTime <> 0 Then
            InactivityMonitor.Enabled = True
            ' InactivityMonitor.Interval = Convert.ToDouble(xUsers.UserLogged.AutoLogoffTime * 60000)       'in min
            InactivityMonitor.Interval = Convert.ToDouble(xUsers.UserLogged.AutoLogoffTime * 1000)      'in sec
        Else
            InactivityMonitor.Enabled = False
        End If

    End Sub

    Private Sub Logout()

        Try
            InactivityMonitor.Dispose()
        Catch ex As Exception

        End Try

        Me.lblLoginName.Text = ""
        Me.lblUserRole.Text = ""
        Call EnableFunctions(Users.enumUserRole.Unknown)
        picUserLogged.Image = Image.FromFile(xGlobals.PicturePath & "NoUserLogged.png")    'My.Resources.NoUserLogged

        'Scarica tutte le form eccetto me
        Dim frm() As Form
        Dim iFrm As Integer = 0
        ReDim Preserve frm(iFrm)
        Try
            For Each f As Form In My.Application.OpenForms
                Select Case f.Name
                    Case Me.Name
                    Case "Splash", "frmPlcHMI"
                    Case "frmViewPlcData"
                    Case Else
                        'f.Close()
                        ReDim Preserve frm(iFrm)
                        frm(iFrm) = f
                        iFrm += 1
                End Select
            Next

            For iFrm = 0 To iFrm - 1
                frm(iFrm).Close()
            Next

        Catch ex As Exception

        End Try


    End Sub

    Private Sub TimeElapsed(ByVal sender As Object, ByVal e As Timers.ElapsedEventArgs) Handles InactivityMonitor.Elapsed
        ' Codice da eseguire quando scade il timer
        ' Debug.WriteLine("Tempo scaduto")

        xDataStorage.AddEvent("System", "Logout" & " " & xUsers.UserLogged.Name & ": Time elapsed", "")
        xUsers.Logout()
        Logout()

        mnu.CreateMenu(Me, xConfig.GetMenus(MyBase.Name), xTextsManag.LanguageToUse, xUsers.UserLogged)
        mnu.ShowMenu("Login")


    End Sub

    Private Sub Reactivated(ByVal sender As Object, ByVal e As EventArgs) Handles InactivityMonitor.Reactivated
        ' Codice da eseguire quando riprende l'attività utente
        'Debug.WriteLine("Nuova attività rilevata")
    End Sub

    Private Sub EnablePLCs(ByVal bYes As Boolean)
        panPlc.Enabled = bYes
        ucPlc.DebugEnabled = bYes
    End Sub

    Private Sub EnableLowerMenu(ByVal bYes As Boolean)
        plsLive.Enabled = bYes
        plsFreeze.Enabled = bYes
        plsSaveLastImage.Enabled = bYes
        plsReadImage.Enabled = bYes
        Button5.Enabled = bYes
        plsButton6.Enabled = bYes
        chkSaveTestImages.Enabled = bYes
        chkIsolux.Enabled = bYes
        ' chkPlcHMI.Enabled = bYes

    End Sub
    Private Sub EnablePRNs(ByVal bYes As Boolean)
        panPrinter.Enabled = bYes
        ucPrnHousingLabel.DebugEnabled = bYes
    End Sub
    Private Sub EnableBCRs(ByVal bYes As Boolean)
        picBcr.Enabled = bYes
        panBcr.Enabled = bYes
        ucBcr.DebugEnabled = bYes
        panBadgeReader.Enabled = bYes
        ucBadgeReader.DebugEnabled = bYes
    End Sub

    Private Sub EnableGraphicEdit(ByVal bYes As Boolean)
        For Each item As Control In grpElectResults.Controls
            If TypeOf (item) Is ucViewElectResults Then
                Dim _uc As ucViewElectResults
                _uc = DirectCast(item, ucViewElectResults)
                _uc.EnableMenu(bYes)
            End If
        Next
        For Each item As Control In grpBurnIn.Controls
            If TypeOf (item) Is ucViewElectResults Then
                Dim _uc As ucViewElectResults
                _uc = DirectCast(item, ucViewElectResults)
                _uc.EnableMenu(bYes)
            End If
        Next

        For Each item As Control In grpGeomPointPos.Controls
            If TypeOf (item) Is ucViewPointResults Then
                Dim _uc As ucViewPointResults
                _uc = DirectCast(item, ucViewPointResults)
                _uc.EnableMenu(bYes)
            End If
        Next

        For Each item As Control In grpCutoff.Controls
            If TypeOf (item) Is TabControl Then
                For Each elem As Control In item.Controls
                    If TypeOf (elem) Is TabPage Then
                        For Each tab As Control In elem.Controls
                            If TypeOf (tab) Is LasCore.ucViewCutoffResults Then
                                Dim _uc As LasCore.ucViewCutoffResults
                                _uc = DirectCast(tab, LasCore.ucViewCutoffResults)
                                _uc.EnableMenu(bYes)
                            End If
                        Next
                    End If
                Next
            End If
        Next

        'For Each item As Control In grpShape.Controls
        '    If TypeOf (item) Is LasCore.ucViewShapeResults Then
        '        Dim _uc As LasCore.ucViewShapeResults
        '        _uc = DirectCast(item, LasCore.ucViewShapeResults)
        '        _uc.EnableMenu(bYes)
        '    End If
        'Next

        For Each item As Control In grpGeomDriveType.Controls
            If TypeOf (item) Is ucViewDrivePointResult Then
                Dim _uc As ucViewDrivePointResult
                _uc = DirectCast(item, ucViewDrivePointResult)
                _uc.EnableMenu(bYes)
            End If
        Next

        For Each item As Control In grpMotorsPos.Controls
            If TypeOf (item) Is ucViewMotorPosResults Then
                Dim _uc As ucViewMotorPosResults
                _uc = DirectCast(item, ucViewMotorPosResults)
                _uc.EnableMenu(bYes)
            End If
        Next

        For Each tab As Control In tabLEDs.Controls
            If TypeOf (tab) Is TabPage Then
                For Each item As Control In tab.Controls
                    If TypeOf (item) Is ucViewLEDsResults Then
                        Dim _uc As ucViewLEDsResults
                        _uc = DirectCast(item, ucViewLEDsResults)
                        _uc.EnableMenus(bYes)
                    End If

                    If TypeOf (item) Is ucViewWipeResults Then
                        Dim _uc As ucViewWipeResults
                        _uc = DirectCast(item, ucViewWipeResults)
                        _uc.EnableMenus(bYes)
                    End If

                Next
            End If
        Next

        'Others
        For Each item As Control In grpHighBeamShutter.Controls
            If TypeOf (item) Is ucViewDrivePointResult Then
                Dim _uc As ucViewDrivePointResult
                _uc = DirectCast(item, ucViewDrivePointResult)
                _uc.EnableMenu(bYes)
            End If
        Next


        For Each item As Control In grpInitialPosition.Controls
            If TypeOf (item) Is ucViewPointResults Then
                Dim _uc As ucViewPointResults
                _uc = DirectCast(item, ucViewPointResults)
                _uc.EnableMenu(bYes)
            End If
        Next


    End Sub


#End Region

#Region "Events from Badge reader"

    Private Sub BadgeReader_ReadBadgeCodeDone(sender As Object, BadgeCodeRead As String, Result As BadgeReader.enumResult) Handles myBadgeReader.ReadBadgeCodeDone

        If AutoMode Then Return

        For Each form In My.Application.OpenForms
            If (form.name = "frmLogin") Or (form.name = "frmUserEdit") Or (form.name = "frmWorkerEdit") Or (form.name = "frmWorkerLogin") Then
                If form.Visible Then
                    Return
                End If
            End If
        Next

        If Result = LAS.BadgeReader.enumResult.Ok Then
            'User
            Dim LastUserLogged As New LasCore.Users.udtUser
            LastUserLogged = xUsers.UserLogged
            If xUsers.Login(BadgeCodeRead) Then
                If xUsers.UserLogged.Name = LastUserLogged.Name Then
                    xDataStorage.AddEvent("System", "Logout" & " " & LastUserLogged.Name, "")
                    xUsers.Logout()
                    LogoutDelegate()
                Else
                    If LastUserLogged.Name <> "" Then
                        xDataStorage.AddEvent("System", "Logout" & " " & LastUserLogged.Name & ": new login by  " & xUsers.UserLogged.Name, "")
                        LoginDelegate()
                    Else
                        LoginDelegate()
                    End If
                End If
            End If
            'Worker
            If xAppConfig.Params.ProdUserLoginRequired Then
                Dim LastWorkerLogged As New LasCore.Workers.udtWorker
                LastWorkerLogged = xWorkers.WorkerLogged
                If xWorkers.Login(BadgeCodeRead) Then
                    If xWorkers.WorkerLogged.Name = LastWorkerLogged.Name Then
                        xDataStorage.AddEvent("System", "Worker logout" & " " & LastWorkerLogged.Name, "")
                        xWorkers.Logout()
                    Else
                        If LastWorkerLogged.Name <> "" Then
                            xDataStorage.AddEvent("System", "Worker logout" & " " & LastWorkerLogged.Name & ": new login by  " & xWorkers.WorkerLogged.Name, "")
                        Else
                            xDataStorage.AddEvent("System", "Worker login: " & xWorkers.WorkerLogged.Name, "OK")
                        End If
                    End If
                End If
            End If
        End If

    End Sub

    Private Sub LogoutDelegate()
        If Me.InvokeRequired Then
            Me.Invoke(New MethodInvoker(AddressOf LogoutDelegate))
        Else
            Logout()
            mnu.CreateMenu(Me, xConfig.GetMenus(MyBase.Name), xTextsManag.LanguageToUse, xUsers.UserLogged)
            mnu.ShowMenu("Login")
            If xAppConfig.Params.ProdUserLoginRequired Then
                If xWorkers.WorkerLogged.Name <> "" Then
                    xToPlc.Ready = True
                Else
                    xToPlc.Ready = False
                End If
            Else
                xToPlc.Ready = True
            End If
        End If
    End Sub
    Private Sub LoginDelegate()
        If Me.InvokeRequired Then
            Me.Invoke(New MethodInvoker(AddressOf LoginDelegate))
        Else
            Login()
            xToPlc.Ready = False
            mnu.CreateMenu(Me, xConfig.GetMenus(MyBase.Name), xTextsManag.LanguageToUse, xUsers.UserLogged)
            mnu.EnableButton("Main", "Archive", xAppConfig.Params.DataStorage.Enabled)
            mnu.EnableButton("Config", "MasterScheduling", xAppConfig.Params.MasterScheduling)
            mnu.EnableButton("Config", "Workers", xAppConfig.Params.ProdUserLoginRequired)
            mnu.EnableButton("Utilities", "Actuators", xAppConfig.IsAnyActuators)
            mnu.ShowMenu("Main")
        End If
    End Sub

#End Region

#Region "Timers"

    Private Sub tmrCheckInitialization_Tick(sender As Object, e As EventArgs) Handles tmrCheckInitialization.Tick

        If Not InitializationDone Then
            MsgBox("Initialization failed!", MsgBoxStyle.Critical + MsgBoxStyle.OkOnly)
            EndProgram()
            End
        End If

        tmrCheckInitialization.Enabled = False

    End Sub
    Private Sub tmrVisual_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmrVisual.Tick

        Static FlagTr As Byte = 1
        If FlagTr > 2 Then FlagTr = 1

        tmrVisual.Interval = 1000


        'Change shift
        Dim ActTeam As String = xShift.ActualShiftName
        If xRetentive.Variables.LastShiftName <> ActTeam Then
            Call xWorkers.Logout()
            xRetentive.Variables.LastShiftName = ActTeam
            xRetentive.WriteDataToFile()
            xProduction.ChangeShift()
        End If

        'Master
        ucMasterMonitor.ActualShiftName = xShift.ActualShiftName
        xToPlc.MasterRequired = xToPlc.MasterRequired Or ucMasterMonitor.CycleMasterRequired


        If xInOutConfig.ConfigData.ControllerIO.Enabled Then
            lblVcc.Text = Format(xInOut.VccActualValue, xInOutConfig.GetFormatFromAnalogInput(xAppConfig.Params.Supply.MeasureInputName, "#0.0"))
            picVcc.Image = Image.FromFile(xGlobals.PicturePath & "plsTensDiAlim.ico")    'My.Resources.plsTensDiAlim.ToBitmap
        Else
            lblVcc.Text = cTestDisabled
            picVcc.Image = Image.FromFile(xGlobals.PicturePath & "TensDiAlimDisabled.ico")    'My.Resources.TensDiAlimDisabled.ToBitmap
        End If

        'User
        If xUsers.UserLogged.Name <> "" Then
            xToPlc.Ready = False
        Else
            Try
                If xCameraManagement.CamerasSupplyOn Then
                    If xGlobals.VaiColCinema Then
                        xToPlc.Ready = True
                    End If
                Else
                    xToPlc.Ready = False
                End If
            Catch ex As Exception

            End Try

        End If



        If xTest.SaveImages Then
            chkSaveTestImages.Image = Image.FromFile(xGlobals.PicturePath & "MovieMakerOn.ico")    'My.Resources.MovieMakerOn.ToBitmap
        Else
            chkSaveTestImages.Image = Image.FromFile(xGlobals.PicturePath & "MovieMakerStart.ico")    'My.Resources.MovieMakerStart.ToBitmap
        End If

        'Worker
        If xWorkers.WorkerLogged.Name = "" Then
            picWorker.Image = Image.FromFile(xGlobals.PicturePath & "LavoroFermo.ico")    'My.Resources.LavoroFermo.ToBitmap
            lblWorker.Text = ""
        Else
            If FlagTr = 1 Then
                picWorker.Image = Image.FromFile(xGlobals.PicturePath & "LavoroInCorso.ico")    'My.Resources.LavoroInCorso.ToBitmap
            Else
                picWorker.Image = Image.FromFile(xGlobals.PicturePath & "LavoroInCorso1.ico")    'My.Resources.LavoroInCorso1.ToBitmap
            End If
            lblWorker.Text = xWorkers.WorkerLogged.Name
        End If

        'Cycles counter
        lblGoodTot.Text = xRetentive.Variables.Good
        lblScrapsTot.Text = xRetentive.Variables.Scrap


        'If xFromPlc.StartCycleReq Then
        If xTest.TestInProgress Then
            xProduction.ProdData.TimeRun += 1
            xProduction.UpdateTiming(True)
        Else
            xProduction.ProdData.TimeIdle += 1
            xProduction.UpdateTiming(False)
        End If
        '   xProduction.StoreProduction(xProduction.ProdData)
        For Each item As Production.udtProdCounter In xProduction.ProdData.ProdCounters
            If item.Model = xTest.RunningModel.Model Then
                lblGoodAct.Text = item.GoodQty
                lblScrapsAct.Text = item.ScrapQty
                lblRunningTimeAct.Text = item.TimeRun
                lblIdleTimeAct.Text = item.TimeIdle
                Exit For
            End If
        Next

        FlagTr += 1


    End Sub

    Private Sub tmrVisualFast_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmrVisualFast.Tick

        'If Not IsNothing(SizeableRect) Then
        '    Try
        '        SizeableRect.Draw()
        '    Catch ex As Exception
        '    End Try
        'End If


    End Sub

    Private Sub tmrInfoOp_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmrInfoOp.Tick

        'Static iInfo As Byte = 0
        'Dim _info As New List(Of String)

        ''Info op
        '_info.Clear()
        'If ucMasterMonitor.InfoToOperator <> "" Then
        '    _info.Add(ucMasterMonitor.InfoToOperator)
        'End If


        ''Shows infos
        'If _info.Count <> 0 Then
        '    lblInfoOp.Text = _info.Item(iInfo)
        '    iInfo += 1
        'Else
        '    lblInfoOp.Text = ""
        '    iInfo = 0
        'End If

        'If iInfo > _info.Count - 1 Then
        '    iInfo = 0
        'End If


    End Sub

    Private Sub CheckHostConnection(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmrCheckTraceConnection.Tick


    End Sub



#End Region

#Region "eMenu"


    Private Sub mnu_ButtonClick(MenuName As String, ButtonName As String, Checked As CheckState) Handles mnu.ButtonClick
        Select Case MenuName
            Case "Login"
                MenuLoginButtonPressed(ButtonName)


            Case "Main"
                MenuMainButtonPressed(ButtonName)

            Case "Config"
                MenuConfigButtonPressed(ButtonName)

            Case "Calibration"
                MenuCalibrationButtonPressed(ButtonName)

            Case "Utilities"
                MenuUtilitiesButtonPressed(ButtonName)

            Case "Test"
                MenuTestButtonPressed(ButtonName)

            Case "Archive"
                MenuArchiveButtonPressed(ButtonName)


            Case "UtilitiesWizard"
                MenuUtilitiesWizardButtonPressed(ButtonName)

            Case "UtilitiesCapabilities"
                MenuUtilitiesCapabilityButtonPressed(ButtonName)


            Case "Stop"
                MenuStopButtonPressed(ButtonName)

        End Select

    End Sub

    Private Sub MenuLoginButtonPressed(ButtonName As String)

        Select Case ButtonName
            Case "Login"

                If xAppConfig.Params.LoginByTrace.Enabled Then
                    Dim daTab As New SqlDataAdapter, dsTab As New DataTable
                    Try
                        Using dbConnection As New SqlConnection(xAppConfig.Params.LoginByTrace.ConnectionString)
                            dbConnection.Open()
                            Dim sqlq As String = "SELECT TOP 1 [" & xAppConfig.Params.LoginByTrace.UserLoggedFieldName & "], "
                            sqlq += "[" & xAppConfig.Params.LoginByTrace.UserLevelFieldName & "], "
                            sqlq += "[" & xAppConfig.Params.LoginByTrace.LogoutTimeFieldName & "] "
                            sqlq += " FROM  [" & xAppConfig.Params.LoginByTrace.TableName & "]"

                            daTab = New SqlDataAdapter(sqlq, dbConnection)
                            Dim commandBuilder As New SqlCommandBuilder(daTab)
                            dsTab.Locale = System.Globalization.CultureInfo.InvariantCulture
                            daTab.Fill(dsTab)
                            If dsTab.Rows.Count > 0 Then
                                xUsers.UserLogged.Name = Trim(dsTab.Rows(0)(xAppConfig.Params.LoginByTrace.UserLoggedFieldName))
                                xUsers.UserLogged.AutoLogoffTime = Trim(dsTab.Rows(0)(xAppConfig.Params.LoginByTrace.LogoutTimeFieldName))

                                Select Case Trim(dsTab.Rows(0)(xAppConfig.Params.LoginByTrace.UserLevelFieldName))
                                    Case 0
                                        xUsers.UserLogged.Role = Users.enumUserRole.Unknown
                                    Case 1
                                        xUsers.UserLogged.Role = Users.enumUserRole.User
                                    Case 2
                                        xUsers.UserLogged.Role = Users.enumUserRole.Maintenance
                                    Case 3
                                        xUsers.UserLogged.Role = Users.enumUserRole.Administrator
                                    Case Else
                                        xUsers.UserLogged.Role = Users.enumUserRole.Unknown
                                End Select
                            End If
                            dbConnection.Close()
                        End Using

                    Catch ex As Exception
                        Debug.WriteLine("[Login] Error: " + ex.Message)
                        Dim sEvent As String = "Login"
                        xDataStorage.AddEvent("LoginByTrace", sEvent, ex.Message)
                        xUsers.UserLogged.Name = ""
                        xUsers.UserLogged.Role = Users.enumUserRole.Unknown
                    End Try

                    If xUsers.UserLogged.Role = Users.enumUserRole.Unknown Then
                        MsgBox(xTextsManag.GetText("LoginNok", "."), MsgBoxStyle.Critical + MsgBoxStyle.OkOnly)
                    Else
                        Login()
                        xToPlc.Ready = False
                        mnu.CreateMenu(Me, xConfig.GetMenus(MyBase.Name), xTextsManag.LanguageToUse, xUsers.UserLogged)
                        mnu.EnableButton("Main", "Archive", xAppConfig.Params.DataStorage.Enabled)
                        mnu.EnableButton("Config", "MasterScheduling", xAppConfig.Params.MasterScheduling)
                        mnu.EnableButton("Config", "Workers", xAppConfig.Params.ProdUserLoginRequired)
                        mnu.ShowMenu("Main")
                    End If

                Else

                    Dim dlg As New frmLogin
                    If dlg.ShowDialog() = DialogResult.OK Then
                        Login()
                        xToPlc.Ready = False
                        mnu.CreateMenu(Me, xConfig.GetMenus(MyBase.Name), xTextsManag.LanguageToUse, xUsers.UserLogged)
                        mnu.EnableButton("Main", "Archive", xAppConfig.Params.DataStorage.Enabled)
                        mnu.EnableButton("Config", "MasterScheduling", xAppConfig.Params.MasterScheduling)
                        mnu.EnableButton("Config", "Workers", xAppConfig.Params.ProdUserLoginRequired)
                        mnu.ShowMenu("Main")

                    End If
                End If

        End Select

    End Sub
    Private Sub MenuMainButtonPressed(ButtonName As String)

        Select Case ButtonName
            Case "Config"
                mnu.ShowMenu("Config")
            Case "Calib"
                mnu.ShowMenu("Calibration")
            Case "Recipes"
                mnu.SuspendMenu()
                bgwDoRecipeEdit.RunWorkerAsync()


                'Dim frm As New frmRecipeList
                ''frm.ShowDialog(Me)
                ''frm.Show(Me)
                ''WaitFormClosed(frm.Name)
                'ShowForm(frm)
                'frm.Dispose()
                'frm = Nothing
                'mnu.ActivateMenuSuspended()
                'Me.Activate()
                ''Read model
                'Dim myModel As New Model(0, False)
                'xInOut.InitIO(xInOutConfig, myModel.Wiring, myModel.Igniction, myModel.Electric.DiagnosticByEcu.AnalogInputName)
                ''Iniz Vcc
                'xInOut.SetVcc(myModel.Electric.Absortion.VoltageSupply.Value)

                'If IsNothing(xEcu) Then
                'Else
                '    xEcu.LastLampSideTested = "?"
                'End If
                'SetxEcu(myModel)
                ''  End If

            Case "Utility"
                mnu.ShowMenu("Utilities")

            Case "Test"
                mnu.ShowMenu("Test")

            Case "Archive"
                mnu.ShowMenu("Archive")

            Case "Logout"
                xDataStorage.AddEvent("System", "Logout" & " " & xUsers.UserLogged.Name, "")
                xUsers.Logout()
                Logout()
                mnu.CreateMenu(Me, xConfig.GetMenus(MyBase.Name), xTextsManag.LanguageToUse, xUsers.UserLogged)
                mnu.ShowMenu("Login")
                If xAppConfig.Params.ProdUserLoginRequired Then
                    If xWorkers.WorkerLogged.Name <> "" Then
                        xToPlc.Ready = True
                    Else
                        xToPlc.Ready = False
                    End If
                Else
                    xToPlc.Ready = True
                End If

            Case "End"
                Me.Close()
        End Select



    End Sub
    Private Sub MenuConfigButtonPressed(ButtonName As String)

        Select Case ButtonName
            Case "Back", "Escape", "Close"
                mnu.ShowMenu("Main")

            Case "Cameras"
                xCameraManagement.StartLiveOnCamera(LasCore.CameraManagement.enumCameraId.CameraCentral)
                Dim frm As New frmCameraConfig
                frm.Show()

            Case "UserConfig"
                mnu.SuspendMenu()
                Dim frm As New frmUsersList  '   frmUsers
                frm.ShowDialog(Me)
                frm.Dispose()
                frm = Nothing
                mnu.ActivateMenuSuspended()

            Case "Application"
                mnu.SuspendMenu()
                Dim frm As New frmAppConfigEdit
                frm.ShowDialog(Me)
                frm.Dispose()
                frm = Nothing
                mnu.ActivateMenuSuspended()
                Call LoadText()
                xDataStorage.KeepMeasuresLastCycleOnly = xAppConfig.Params.DataStorage.KeepMeasuresLastCycleOnly

            Case "MasterScheduling"
                mnu.SuspendMenu()
                Dim frm As New frmMasterSchedulingEdit  '   frmUsers
                frm.myConfig = ucMasterMonitor
                frm.ShowDialog(Me)
                frm.Dispose()
                frm = Nothing
                mnu.ActivateMenuSuspended()

            Case "Shifts"
                mnu.SuspendMenu()
                Dim frm As New frmShiftsEdit
                frm.ShowDialog(Me)
                frm.Dispose()
                frm = Nothing
                mnu.ActivateMenuSuspended()

            Case "Workers"
                mnu.SuspendMenu()
                Dim frm As New frmWorkersList
                frm.ShowDialog(Me)
                frm.Dispose()
                frm = Nothing
                mnu.ActivateMenuSuspended()

        End Select



    End Sub
    Private Sub MenuCalibrationButtonPressed(ButtonName As String)

        Select Case ButtonName
            Case "Back", "Escape", "Close"
                mnu.ShowMenu("Main")

            Case "CameraAlign"
                InternalCameraAlignRunning = True
                lblTestResult.Text = xTextsManag.GetUserInfosText("InternalCameraAlign")
                lblTestResult.ForeColor = ForeColorForMsgStd
                mnu.SuspendMenu()
                bgwDoInternalCameraAlignWizard.RunWorkerAsync(lblTestResult.Text)

            Case "SetCameraReference"
                Dim myModel As New Model(0, False)
                xInOut.InitIO(xInOutConfig, myModel.Wiring, myModel.Igniction, myModel.Electric.DiagnosticByEcu.AnalogInputName)
                xInOut.SetVcc(myModel.Electric.Absortion.VoltageSupply.Value)
                If IsNothing(xEcu) Then
                Else
                    xEcu.LastLampSideTested = "?"
                End If
                SetxEcu(myModel)

                SetCameraReferenceRunning = True
                lblTestResult.Text = xTextsManag.GetUserInfosText("SetCameraReference")
                lblTestResult.ForeColor = ForeColorForMsgStd
                mnu.SuspendMenu()
                bgwDoSetCameraReference.RunWorkerAsync(lblTestResult.Text)

            Case "CheckCameraReference"
                Dim myModel As New Model(0, False)
                xInOut.InitIO(xInOutConfig, myModel.Wiring, myModel.Igniction, myModel.Electric.DiagnosticByEcu.AnalogInputName)
                xInOut.SetVcc(myModel.Electric.Absortion.VoltageSupply.Value)
                If IsNothing(xEcu) Then
                Else
                    xEcu.LastLampSideTested = "?"
                End If
                SetxEcu(myModel)

                CheckCameraReferenceRunning = True
                lblTestResult.Text = xTextsManag.GetUserInfosText("CheckCameraReference")
                lblTestResult.ForeColor = ForeColorForMsgStd
                mnu.SuspendMenu()
                bgwDoCheckCameraReferencen.RunWorkerAsync(lblTestResult.Text)


        End Select

    End Sub
    Private Sub MenuUtilitiesButtonPressed(ButtonName As String)

        Select Case ButtonName
            Case "Back", "Escape", "Close"
                mnu.ShowMenu("Main")

            Case "Wizard"
                mnu.ShowMenu("UtilitiesWizard")

            Case "Capability"
                mnu.ShowMenu("UtilitiesCapabilities")

            Case "Lights"
                Dim frm As New frmBulbsOnOff
                frm.Show(Me)

            Case "Actuators"
                Dim frm As New frmActuators
                frm.Show(Me)


            Case "Screwdrivers"
                ' Dim frm As New frmCheckScrewDrivers
                Dim frm As New LasCore.frmCheckScrewDrivers
                frm.TextManagement = TextsManag
                frm.Screwdrivers = xScrewdrivers
                frm.TopMost = True
                frm.Show(Me)


        End Select

    End Sub
    Private Sub MenuTestButtonPressed(ButtonName As String)

        Select Case ButtonName
            Case "Back", "Escape", "Close"
                mnu.ShowMenu("Main")

            Case "ManualSequence"
                If Not IsNothing(xEcu) Then xEcu.MotorsReferenced = False
                lblTestResult.Text = xTextsManag.GetUserInfosText("CapabilityRunning")
                lblTestResult.ForeColor = ForeColorForMsgStd
                mnu.SuspendMenu()
                xTest.SingleTestSequence.TestSequences.Clear()
                Dim myParams As New Recipe.udtParams
                Dim frm As New frmRecipeTestSequence
                frm.RecipeToModify = myParams
                If frm.ShowDialog(Me) = System.Windows.Forms.DialogResult.OK Then
                    For Each item As String In myParams.TestSequence
                        Dim seq As New TestSequence.udtSequence
                        seq.Name = item
                        xTest.SingleTestSequence.TestSequences.Add(seq)
                    Next
                    frm.Dispose()
                    frm = Nothing
                    xTest.PieceIsMaster = False
                    xTest.CapabilityCycleInProgress = False
                    xTest.ScrediversAreInserted = xFromPlc.ScrewdriversInserted
                    If xTest.InitTest(Test.enumTestType.ManualSequence, 0, "", "", "") Then
                        xCameraManagement.StartLiveOnCamera(xTest.RunningModel.Generic.DefaultCamera)
                        mnu.ActivateMenuSuspended()
                        mnu.ShowMenu("Stop")
                        bgwInProgress = bgwDoCompleteTest
                        bgwDoCompleteTest.RunWorkerAsync("DoTest")
                    Else
                        lblTestResult.Text = xTest.Results.Message
                        lblTestResult.ForeColor = xTest.Results.MessageColor
                        mnu.ActivateMenuSuspended()
                    End If
                Else
                    mnu.ActivateMenuSuspended()
                    frm.Dispose()
                    frm = Nothing
                End If


            Case "Sequence"
                If Not IsNothing(xEcu) Then xEcu.MotorsReferenced = False
                lblTestResult.Text = xTextsManag.GetUserInfosText("TestRunning")
                lblTestResult.ForeColor = ForeColorForMsgStd
                mnu.SuspendMenu()
                xTest.PieceIsMaster = False
                xTest.CapabilityCycleInProgress = False
                xTest.ScrediversAreInserted = xFromPlc.ScrewdriversInserted
                If xTest.InitTest(Test.enumTestType.Complete, 0, "", "", "") Then
                    xCameraManagement.StartLiveOnCamera(xTest.RunningModel.Generic.DefaultCamera)
                    mnu.ActivateMenuSuspended()
                    mnu.ShowMenu("Stop")
                    bgwInProgress = bgwDoCompleteTest
                    bgwDoCompleteTest.RunWorkerAsync("DoTest")
                Else
                    lblTestResult.Text = xTest.Results.Message
                    lblTestResult.ForeColor = xTest.Results.MessageColor
                    mnu.ActivateMenuSuspended()
                End If

            Case "SequenceAsMaster"
                If Not IsNothing(xEcu) Then xEcu.MotorsReferenced = False
                lblTestResult.Text = xTextsManag.GetUserInfosText("TestRunning")
                lblTestResult.ForeColor = ForeColorForMsgStd
                mnu.SuspendMenu()
                xTest.PieceIsMaster = True
                xTest.CapabilityCycleInProgress = False
                xTest.ScrediversAreInserted = xFromPlc.ScrewdriversInserted
                If xTest.InitTest(Test.enumTestType.Complete, 0, "", "", "") Then
                    xCameraManagement.StartLiveOnCamera(xTest.RunningModel.Generic.DefaultCamera)
                    mnu.ActivateMenuSuspended()
                    mnu.ShowMenu("Stop")
                    bgwInProgress = bgwDoCompleteTest
                    bgwDoCompleteTest.RunWorkerAsync("DoTest")
                Else
                    lblTestResult.Text = xTest.Results.Message
                    lblTestResult.ForeColor = xTest.Results.MessageColor
                    mnu.ActivateMenuSuspended()
                End If

        End Select

    End Sub
    Private Sub MenuArchiveButtonPressed(ButtonName As String)

        Select Case ButtonName
            Case "Back", "Escape", "Close"
                mnu.ShowMenu("Main")

            Case "PieceTrace"
                mnu.SuspendMenu()
                Me.Cursor = Cursors.WaitCursor
                Application.DoEvents()
                Dim frm As New frmViewPieceTrace
                frm.PieceCode = ""
                frm.ShowDialog()
                frm = Nothing
                mnu.ActivateMenuSuspended()
                Me.Cursor = Cursors.Default

            Case "PieceMeasures"
                mnu.SuspendMenu()
                Me.Cursor = Cursors.WaitCursor
                Application.DoEvents()
                Dim frm As New frmViewPieceData
                frm.PieceCode = ""
                frm.ShowDialog()
                frm = Nothing
                mnu.ActivateMenuSuspended()
                Me.Cursor = Cursors.Default

            Case "Measures"
                mnu.SuspendMenu()
                Me.Cursor = Cursors.WaitCursor
                Application.DoEvents()
                Dim frm As New frmViewMeasureData
                frm.MeasureNameToView = ""
                frm.ShowDialog()
                frm = Nothing
                mnu.ActivateMenuSuspended()
                Me.Cursor = Cursors.Default

            Case "Capability"
                mnu.SuspendMenu()
                Me.Cursor = Cursors.WaitCursor
                Application.DoEvents()
                Dim frm As New frmViewCapabilityDataResults
                frm.ShowDialog()
                frm = Nothing
                mnu.ActivateMenuSuspended()
                Me.Cursor = Cursors.Default

            Case "DataBackup"
                mnu.SuspendMenu()
                Me.Cursor = Cursors.WaitCursor
                Application.DoEvents()
                Dim frm As New frmDataBackup
                frm.ShowDialog()
                frm = Nothing
                mnu.ActivateMenuSuspended()
                Me.Cursor = Cursors.Default


        End Select

    End Sub

    Private Sub MenuUtilitiesWizardButtonPressed(ButtonName As String)

        Select Case ButtonName
            Case "Back", "Escape", "Close"
                mnu.ShowMenu("Utilities")

            Case "MakeRecipe"
                mnu.SuspendMenu()

                Dim myModel As New Model(0, False)
                xInOut.InitIO(xInOutConfig, myModel.Wiring, myModel.Igniction, myModel.Electric.DiagnosticByEcu.AnalogInputName)
                xInOut.SetVcc(myModel.Electric.Absortion.VoltageSupply.Value)
                If IsNothing(xEcu) Then
                Else
                    xEcu.LastLampSideTested = "?"
                End If
                SetxEcu(myModel)
                xMakeRecipeWizard = New MakeRecipeWizard
                If xMakeRecipeWizNavigator.Navigate Then
                    lblTestResult.Text = xTextsManag.GetUserInfosText("WizBuildingRecipe")
                    lblTestResult.ForeColor = ForeColorForMsgStd
                    bgwDoMakeRecipeWizard.RunWorkerAsync(lblTestResult.Text)
                Else
                    xLightFuncs.LowBeamOff()
                    mnu.ActivateMenuSuspended()
                End If

            Case "DeliveryPos"
                xCameraManagement.StartLiveOnCamera(LasCore.CameraManagement.enumCameraId.CameraCentral)
                Dim frm As New frmLwrDeliveryPos
                frm.ShowDialog(Me)
                frm.Dispose()
                frm = Nothing

            Case "UpdateRecipe"
                mnu.SuspendMenu()
                xMakeRecipeWizard = New MakeRecipeWizard
                If xUpdateRecipeWizNavigator.Navigate Then
                    lblTestResult.Text = xTextsManag.GetUserInfosText("WizUpdatingRecipe") & " " & xMakeRecipeWizard.RecipeToUpdate.IdRecipe & "..."
                    lblTestResult.ForeColor = ForeColorForMsgStd
                    bgwDoUpdateRecipeWizard.RunWorkerAsync(lblTestResult.Text)
                Else
                    xLightFuncs.LowBeamOff()
                    mnu.ActivateMenuSuspended()
                End If


        End Select

    End Sub
    Private Sub MenuUtilitiesCapabilityButtonPressed(ButtonName As String)

        Select Case ButtonName
            Case "Back", "Escape", "Close"
                mnu.ShowMenu("Utilities")

            Case "DoCycle"
                If Not IsNothing(xEcu) Then xEcu.MotorsReferenced = False
                lblTestResult.Text = xTextsManag.GetUserInfosText("TestRunning")
                lblTestResult.ForeColor = ForeColorForMsgStd
                xTest.SingleTestSequence.TestSequences.Clear()
                'Select recipe
                Dim IdRecipeToRun As Integer = 0
                Dim selRec As New frmSelectRecipe
                If selRec.ShowDialog(Me) = System.Windows.Forms.DialogResult.OK Then
                    IdRecipeToRun = selRec.IdRecipeSelected
                    selRec.Dispose()
                    selRec = Nothing

                    'Select test
                    Dim myParams As New Recipe.udtParams
                    Dim frm As New frmRecipeTestSequence
                    frm.RecipeToModify = myParams
                    If frm.ShowDialog(Me) = System.Windows.Forms.DialogResult.OK Then
                        'Get cycles quantities
                        Dim inp As New frmInputCyclesQty
                        inp.CyclesQty = 5
                        If inp.ShowDialog(Me) = System.Windows.Forms.DialogResult.OK Then
                            xTest.CapabiltyCyclesQty = inp.CyclesQty
                            For Each item As String In myParams.TestSequence
                                Dim seq As New TestSequence.udtSequence
                                seq.Name = item
                                xTest.SingleTestSequence.TestSequences.Add(seq)
                            Next
                            inp.Dispose()
                            inp = Nothing
                            xTest.PieceIsMaster = False
                            xTest.CapabilityCycleInProgress = True
                            xTest.ScrediversAreInserted = xFromPlc.ScrewdriversInserted
                            If xTest.InitTest(Test.enumTestType.ManualSequence, IdRecipeToRun, "", "", "") Then
                                xCameraManagement.StartLiveOnCamera(xTest.RunningModel.Generic.DefaultCamera)
                                mnu.ShowMenu("Stop")
                                bgwInProgress = bgwDoCompleteTest
                                bgwDoCompleteTest.RunWorkerAsync("Capability")
                            End If
                        Else
                            inp.Dispose()
                            inp = Nothing
                        End If
                    Else
                        frm.Dispose()
                        frm = Nothing
                    End If
                Else
                    selRec.Dispose()
                    selRec = Nothing
                End If


            Case "Data"
                mnu.SuspendMenu()
                Dim frm As New frmViewCapabilityDataResults
                frm.ShowDialog()
                frm = Nothing
                mnu.ActivateMenuSuspended()


        End Select

    End Sub

    Private Sub MenuStopButtonPressed(ButtonName As String)

        Select Case ButtonName
            Case "Stop"
                Try
                    xTest.AbortTest(bgwInProgress)
                Catch ex As Exception

                End Try

        End Select

    End Sub



#End Region

#Region "Menu"

    Private Sub plsLive_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles plsLive.Click
        xCameraManagement.StartLiveOnActiveCamera()

    End Sub

    Private Sub plsFreeze_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles plsFreeze.Click
        xCameraManagement.StopLiveOnActiveCamera()
        '  chkPlcHMI.Enabled = False
        ShowGrabTime(-1)
    End Sub

    Private Sub plsSaveLastImage_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles plsSaveLastImage.Click

        Try
            Dim bmp As New Bitmap(picImageCamera.Image)

            'Browse file
            Dim FileDlg As New SaveFileDialog
            FileDlg.InitialDirectory = xGlobals.DataPath & "Images\"
            FileDlg.Filter = "Bitmap files (*.bmp)|*.bmp"
            FileDlg.RestoreDirectory = True
            If FileDlg.ShowDialog() = DialogResult.OK Then
                If FileDlg.FileName.ToLower.EndsWith(".bmp") Then
                    bmp.Save(FileDlg.FileName, System.Drawing.Imaging.ImageFormat.Bmp)
                Else
                    bmp.Save(FileDlg.FileName & ".bmp", System.Drawing.Imaging.ImageFormat.Bmp)
                End If

            End If
            FileDlg.Dispose()
        Catch ex As Exception

        End Try


    End Sub

    Private Sub plsReadImage_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles plsReadImage.Click
        Dim FileDlg As New OpenFileDialog
        FileDlg.InitialDirectory = xGlobals.DataPath & "Images"
        FileDlg.Filter = "Bitmap files (*.bmp)|*.bmp"
        FileDlg.RestoreDirectory = True
        If FileDlg.ShowDialog() = DialogResult.OK Then
            'ActualImageFile = FileDlg.FileName
            ImageFileNameToLoad = FileDlg.FileName
            picImageCamera.Image = Image.FromFile(ImageFileNameToLoad)
        End If
        FileDlg.Dispose()
    End Sub

    Private Sub Button5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button5.Click

        xToPlc.SetActuatorToWork("HighBeamDimmer")

    End Sub


    Private Sub Button6_Click(sender As Object, e As EventArgs) Handles plsButton6.Click
        xToPlc.SetActuatorToRest("HighBeamDimmer")

    End Sub

    Private Sub chkSaveTestImages_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkSaveTestImages.CheckedChanged
        xTest.SaveImages = chkSaveTestImages.Checked
        For Each cam As LasCore.Icamera In xCameraManagement.CameraList
            If cam.Config.Enabled Then
                cam.SaveImages = xTest.SaveImages
            End If
        Next
        If xTest.SaveImages Then
            For Each foundFile As String In My.Computer.FileSystem.GetFiles(xGlobals.DataPath & "Images\")
                My.Computer.FileSystem.DeleteFile(foundFile, FileIO.UIOption.OnlyErrorDialogs, FileIO.RecycleOption.DeletePermanently) ', Microsoft.VisualBasic.FileIO.UIOption.AllDialogs, Microsoft.VisualBasic.FileIO.RecycleOption.DeletePermanently)
            Next
            For Each foundFile As String In My.Computer.FileSystem.GetFiles(xGlobals.DataPath & "Images\Movies")
                My.Computer.FileSystem.DeleteFile(foundFile, FileIO.UIOption.OnlyErrorDialogs, FileIO.RecycleOption.DeletePermanently) ', Microsoft.VisualBasic.FileIO.UIOption.AllDialogs, Microsoft.VisualBasic.FileIO.RecycleOption.DeletePermanently)
            Next
        End If
    End Sub
    Private Sub chkIsolux_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkIsolux.CheckedChanged

        For Each cam As LasCore.Icamera In xCameraManagement.CameraList
            If cam.Config.Enabled And cam.Config.BlackAndWhite Then
                cam.ViewIsolux = chkIsolux.Checked
            End If
        Next
    End Sub
    Private Sub chkPlcHMI_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chkPlcHMI.CheckedChanged

        'If ActiveCameraId <> cCameraCentral Then
        '    chkGrid.Checked = False
        'End If

        'If xCameraManagement.ActiveCameraId <> LasCore.CameraManagement.enumCameraId.CameraCentral Then
        '    chkPlcHMI.Checked = False
        'End If

        If xAppConfig.Params.PLCs(0).HMI Then
            If chkPlcHMI.Checked Then
                frmPlcHmi = New frmPlcHMI
                frmPlcHmi.Show(Me)
            Else
                frmPlcHmi.Close()
            End If
        End If

    End Sub


#End Region

#Region "About"

    Private Sub picCizeta_MouseDown(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles _
        panCizeta.MouseDown, lblCizeta.MouseDown, lblPoweredBy.MouseDown
        xfrmAboutCizeta = New frmAboutCizeta
        xfrmAboutCizeta.Show()
    End Sub

    Private Sub picCizeta_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles _
        panCizeta.MouseUp, lblCizeta.MouseUp, lblPoweredBy.MouseUp
        xfrmAboutCizeta.Close()
        xfrmAboutCizeta.Dispose()
    End Sub

    Private Sub picSupplier_MouseDown(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles _
        picSupplier.MouseDown
        xfrmAbout = New frmAbout
        xfrmAbout.Company = xAppConfig.Params.Supplier
        xfrmAbout.Show()
    End Sub

    Private Sub picSupplier_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles _
        picSupplier.MouseUp
        xfrmAbout.Close()
        xfrmAbout.Dispose()
    End Sub

    Private Sub picCustomer_MouseDown(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles _
        picCustomer.MouseDown
        xfrmAbout = New frmAbout
        xfrmAbout.Company = xAppConfig.Params.Customer
        xfrmAbout.Show()
    End Sub

    Private Sub picCustomer_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles _
        picCustomer.MouseUp
        xfrmAbout.Close()
        xfrmAbout.Dispose()
    End Sub

#End Region

#Region "Results"

    Private Function SelectResultToShow(ByVal res As udtTestResults) As Integer

        If res.Ok Then

            If res.BurnInTest.TestDone And Not res.GeomTest.TestDone Then
                Return iTabResultElet
            End If

            If res.GeomTest.TestDone Then
                Return iTabResultGeom
            End If
            If res.PhotomTest.TestDone Then
                Return iTabResultPhotom
            End If
            If res.MotorTest.TestDone Then
                Return iTabResultMotor
            End If
            If res.LEDsTest.TestDone Then
                Return iTabResultLEDs
            End If
            If res.OthersTest.TestDone Then
                Return iTabResultOthers
            End If
            If res.ECUsTest.TestDone Then
                Return iTabResultECUs
            End If
            If res.AimingTest.TestDone Then
                Return iTabResultAiming
            End If
            If res.ElectTest.TestDone Then
                Return iTabResultElet
            End If

            Return iTabSequence

        Else
            If res.ElectTest.TestDone And Not res.ElectTest.Ok Then
                Return iTabResultElet
            ElseIf res.MotorTest.TestDone And Not res.MotorTest.Ok Then
                Return iTabResultMotor
            ElseIf res.AimingTest.TestDone And Not res.AimingTest.Ok Then
                If res.AimingTest.LowBeamCapacity.TestDone And Not res.AimingTest.LowBeamCapacity.Ok Then
                    Return iTabResultAiming
                ElseIf res.AimingTest.HighBeamCapacity.TestDone And Not res.AimingTest.HighBeamCapacity.Ok Then
                    Return iTabResultAiming
                ElseIf res.AimingTest.FogBeamCapacity.TestDone And Not res.AimingTest.FogBeamCapacity.Ok Then
                    Return iTabResultAiming
                    Return iTabResultAiming
                End If

            ElseIf res.GeomTest.TestDone And Not res.GeomTest.Ok Then
                Return iTabResultGeom

            ElseIf res.PhotomTest.TestDone And Not res.PhotomTest.Ok Then
                If res.PhotomTest.LowBeam.TestDone And Not res.PhotomTest.LowBeam.Ok Then
                    tabPhotom.SelectTab(0)
                    Return iTabResultPhotom
                ElseIf res.PhotomTest.HighBeam.TestDone And Not res.PhotomTest.HighBeam.Ok Then
                    tabPhotom.SelectTab(1)
                    Return iTabResultPhotom
                ElseIf res.PhotomTest.FogBeam.TestDone And Not res.PhotomTest.FogBeam.Ok Then
                    tabPhotom.SelectTab(2)
                    Return iTabResultPhotom
                ElseIf res.PhotomTest.Drl.TestDone And Not res.PhotomTest.Drl.Ok Then
                    tabPhotom.SelectTab(3)
                    Return iTabResultPhotom
                ElseIf res.PhotomTest.TurnIndicator.TestDone And Not res.PhotomTest.TurnIndicator.Ok Then
                    tabPhotom.SelectTab(4)
                    Return iTabResultPhotom
                End If

            ElseIf res.LEDsTest.TestDone And Not res.LEDsTest.Ok Then

                If res.LEDsTest.LowBeam.TestDone And Not res.LEDsTest.LowBeam.Ok Then
                    ShowsLedsResults(0)
                    Return iTabResultLEDs
                ElseIf res.LEDsTest.HighBeam.TestDone And Not res.LEDsTest.HighBeam.Ok Then
                    ShowsLedsResults(1)
                    Return iTabResultLEDs
                ElseIf res.LEDsTest.ParkLight.TestDone And Not res.LEDsTest.ParkLight.Ok Then
                    ShowsLedsResults(2)
                    Return iTabResultLEDs
                ElseIf res.LEDsTest.TurnLight.TestDone And Not res.LEDsTest.TurnLight.Ok Then
                    ShowsLedsResults(3)
                    Return iTabResultLEDs
                ElseIf res.LEDsTest.DayLight.TestDone And Not res.LEDsTest.DayLight.Ok Then
                    ShowsLedsResults(4)
                    Return iTabResultLEDs
                ElseIf res.LEDsTest.SideMarker.TestDone And Not res.LEDsTest.SideMarker.Ok Then
                    ShowsLedsResults(5)
                    Return iTabResultLEDs
                ElseIf res.LEDsTest.ComingHome.TestDone And Not res.LEDsTest.ComingHome.Ok Then
                    ShowsLedsResults(6)
                    Return iTabResultLEDs
                ElseIf res.LEDsTest.CorneringLight.TestDone And Not res.LEDsTest.CorneringLight.Ok Then
                    ShowsLedsResults(7)
                    Return iTabResultLEDs
                ElseIf res.LEDsTest.TurnLightWipeOn.TestDone And Not res.LEDsTest.TurnLightWipeOn.Ok Then
                    ShowsLedsResults(8)
                    Return iTabResultLEDs
                ElseIf res.LEDsTest.TurnLightWipeOFF.TestDone And Not res.LEDsTest.TurnLightWipeOFF.Ok Then
                    ShowsLedsResults(8)
                    Return iTabResultLEDs
                End If

            ElseIf res.ECUsTest.TestDone And Not res.ECUsTest.Ok Then
                Return iTabResultECUs

            ElseIf res.OthersTest.TestDone And Not res.OthersTest.Ok Then
                Return iTabResultOthers

            Else
                Return iTabSequence
            End If
        End If


        Return iTabSequence

    End Function

    Private Sub tabResults_ShowResults() Handles tabResults.SelectedIndexChanged

        If Not IsNothing(xTest) Then
            If Not IsNothing(xTest.Results) Then
                Dim myModel As Model
                myModel = LastRunningModel
                ShowResults(tabResults.SelectedIndex)

                Select Case myModel.ECUs.EcuModel
                    Case RecipeECUs.enumEcuModel.W166
                        tabResultsEcuW166.Parent = tabResultsEcu
                        tabResultsEcuLED61.Parent = TabCtlHidden
                        tabResultsEcuLED22.Parent = TabCtlHidden
                        tabResultsEcuOTP.Parent = TabCtlHidden
                        tabResultsEcuLedLeimo.Parent = TabCtlHidden
                        tabResultsEcuM156.Parent = TabCtlHidden
                        tabResultsEculed61kl.Parent = TabCtlHidden

                    Case RecipeECUs.enumEcuModel.LED61
                        tabResultsEcuW166.Parent = TabCtlHidden
                        tabResultsEcuLED61.Parent = tabResultsEcu
                        tabResultsEcuLED22.Parent = TabCtlHidden
                        tabResultsEcuOTP.Parent = TabCtlHidden
                        tabResultsEcuLedLeimo.Parent = TabCtlHidden
                        tabResultsEcuM156.Parent = TabCtlHidden
                        tabResultsEcuLed61KL.Parent = TabCtlHidden

                    Case RecipeECUs.enumEcuModel.LED22
                        tabResultsEcuW166.Parent = TabCtlHidden
                        tabResultsEcuLED61.Parent = TabCtlHidden
                        tabResultsEcuLED22.Parent = tabResultsEcu
                        tabResultsEcuOTP.Parent = TabCtlHidden
                        tabResultsEcuLedLeimo.Parent = TabCtlHidden
                        tabResultsEcuM156.Parent = TabCtlHidden
                        tabResultsEcuLed61KL.Parent = TabCtlHidden

                    Case RecipeECUs.enumEcuModel.OTP
                        tabResultsEcuW166.Parent = TabCtlHidden
                        tabResultsEcuLED61.Parent = TabCtlHidden
                        tabResultsEcuLED22.Parent = TabCtlHidden
                        tabResultsEcuOTP.Parent = tabResultsEcu
                        tabResultsEcuLedLeimo.Parent = TabCtlHidden
                        tabResultsEcuM156.Parent = TabCtlHidden
                        tabResultsEcuLed61KL.Parent = TabCtlHidden

                    Case RecipeECUs.enumEcuModel.LedLeimo
                        tabResultsEcuW166.Parent = TabCtlHidden
                        tabResultsEcuLED61.Parent = TabCtlHidden
                        tabResultsEcuLED22.Parent = TabCtlHidden
                        tabResultsEcuOTP.Parent = TabCtlHidden
                        tabResultsEcuLedLeimo.Parent = tabResultsEcu
                        tabResultsEcuM156.Parent = TabCtlHidden
                        tabResultsEcuLed61KL.Parent = TabCtlHidden

                    Case RecipeECUs.enumEcuModel.M156
                        tabResultsEcuW166.Parent = TabCtlHidden
                        tabResultsEcuLED61.Parent = TabCtlHidden
                        tabResultsEcuLED22.Parent = TabCtlHidden
                        tabResultsEcuOTP.Parent = TabCtlHidden
                        tabResultsEcuLedLeimo.Parent = TabCtlHidden
                        tabResultsEcuM156.Parent = tabResultsEcu
                        tabResultsEcuLed61KL.Parent = TabCtlHidden

                    Case RecipeECUs.enumEcuModel.LED61KL
                        tabResultsEcuW166.Parent = TabCtlHidden
                        tabResultsEcuLED61.Parent = TabCtlHidden
                        tabResultsEcuLED22.Parent = TabCtlHidden
                        tabResultsEcuOTP.Parent = TabCtlHidden
                        tabResultsEcuLedLeimo.Parent = TabCtlHidden
                        tabResultsEcuM156.Parent = TabCtlHidden
                        tabResultsEcuLed61KL.Parent = tabResultsEcu

                    Case RecipeECUs.enumEcuModel.None
                        tabResultsEcuW166.Parent = TabCtlHidden
                        tabResultsEcuLED61.Parent = TabCtlHidden
                        tabResultsEcuLED22.Parent = TabCtlHidden
                        tabResultsEcuOTP.Parent = TabCtlHidden
                        tabResultsEcuLedLeimo.Parent = TabCtlHidden
                        tabResultsEcuM156.Parent = TabCtlHidden
                        tabResultsEcuLed61KL.Parent = TabCtlHidden

                End Select

            End If
        End If

    End Sub
    Private Sub ShowResults(ByVal iTab As Integer)

        ChartBurnIn.Location = New Point(-10000, 0)
        ChartOutage.Location = New Point(-10000, 0)
        Application.DoEvents()

        Select Case iTab
            Case iTabResultElet

                If xTest.Results.BurnInTest.TestDone Then
                    ChartBurnIn.Location = picImageCamera.Location
                    GrapResultActive = enumGraphResultActive.None
                End If

            Case iTabResultGeom
                If GrapResultActive <> enumGraphResultActive.Geometric Then
                    xCameraManagement.StopLiveAllCameras()

                    ShowGeomBitmap()

                    If xTest.Results.GeomTest.LowBeamCutoff.TestDone And Not xTest.Results.GeomTest.LowBeamCutoff.Ok Then
                        tabCutoff.SelectTab(0)
                    ElseIf xTest.Results.GeomTest.LowBeamBaseCutoff.TestDone And Not xTest.Results.GeomTest.LowBeamBaseCutoff.Ok Then
                        tabCutoff.SelectTab(1)
                        ' picImageCamera.Image = xTest.GeomTest.bmpPointMaxGradBIGL
                    ElseIf xTest.Results.GeomTest.LowBeamBaseCutoff.TestDone And Not xTest.Results.GeomTest.LowBeamCutoff.TestDone Then
                    Else
                        tabCutoff.SelectTab(0)
                    End If

                    picImageCamera.Invalidate()
                    Application.DoEvents()

                    ShowGeomResults()

                End If

            Case iTabResultAiming
                If GrapResultActive <> enumGraphResultActive.Aiming Then
                    xCameraManagement.StopLiveAllCameras()
                    If IsNothing(bmpLowBeamToShow) Then
                        picImageCamera.Image = xTest.Results.GeomTest.PointHC.BmpUsed
                    Else
                        picImageCamera.Image = bmpLowBeamToShow
                    End If
                    picImageCamera.Invalidate()
                    Application.DoEvents()
                    ShowAimingResults(LightFunctions.enumLightFunctions.LowBeam)

                End If

            Case iTabResultPhotom
                If GrapResultActive <> enumGraphResultActive.Photom Then
                    xCameraManagement.StopLiveAllCameras()
                    picImageCamera.Image = xTest.PhotomTest.bmpLowBeam
                    picImageCamera.Invalidate()
                    Application.DoEvents()
                    ' ShowsPhotomResults(0)

                    If xTest.Results.PhotomTest.LowBeam.TestDone And Not xTest.Results.PhotomTest.LowBeam.Ok Then
                        tabPhotom.SelectTab(0)
                    ElseIf xTest.Results.PhotomTest.HighBeam.TestDone And Not xTest.Results.PhotomTest.HighBeam.Ok Then
                        tabPhotom.SelectTab(1)
                    ElseIf xTest.Results.PhotomTest.FogBeam.TestDone And Not xTest.Results.PhotomTest.FogBeam.Ok Then
                        tabPhotom.SelectTab(2)
                    ElseIf xTest.Results.PhotomTest.Drl.TestDone And Not xTest.Results.PhotomTest.Drl.Ok Then
                        tabPhotom.SelectTab(3)
                    ElseIf xTest.Results.PhotomTest.TurnIndicator.TestDone And Not xTest.Results.PhotomTest.TurnIndicator.Ok Then
                        tabPhotom.SelectTab(4)
                    Else
                        If xTest.Results.PhotomTest.LowBeam.TestDone Then
                            tabPhotom.SelectTab(0)
                        ElseIf xTest.Results.PhotomTest.HighBeam.TestDone Then
                            tabPhotom.SelectTab(1)
                        ElseIf xTest.Results.PhotomTest.FogBeam.TestDone Then
                            tabPhotom.SelectTab(2)
                        ElseIf xTest.Results.PhotomTest.Drl.TestDone Then
                            tabPhotom.SelectTab(3)
                        ElseIf xTest.Results.PhotomTest.TurnIndicator.TestDone Then
                            tabPhotom.SelectTab(4)
                        Else
                            tabPhotom.SelectTab(0)
                        End If
                    End If
                    ShowsPhotomResults(tabPhotom.SelectedIndex)
                End If

            Case iTabResultMotor
                If GrapResultActive <> enumGraphResultActive.Motor Then
                    xCameraManagement.StopLiveAllCameras()
                    picImageCamera.Image = xTest.MotorTest.bmpToShow
                    picImageCamera.Invalidate()
                    Application.DoEvents()
                    ShowMotorResults()

                    xGraphRes.DrawMotorTestResult(xTest.Results)
                    'GrapResultActive = enumGraphResultActive.Motor
                End If

            Case iTabResultECUs
                If GrapResultActive <> enumGraphResultActive.ECUs Then
                    xCameraManagement.StopLiveAllCameras()
                    GrapResultActive = enumGraphResultActive.ECUs
                End If
                If xTest.Results.ECUsTest.LED61.OutagePos.TestDone Or xTest.Results.ECUsTest.LED61.OutageDrl.TestDone Or xTest.Results.ECUsTest.LED61.OutageTi.TestDone Then
                    ChartOutage.Location = picImageCamera.Location
                    GrapResultActive = enumGraphResultActive.None
                End If


            Case iTabResultLEDs
                If GrapResultActive <> enumGraphResultActive.LEDs Then
                    xCameraManagement.StopLiveAllCameras()
                    'tabLEDs.SelectTab(0)

                    If xTest.Results.LEDsTest.LowBeam.TestDone And Not xTest.Results.LEDsTest.LowBeam.Ok Then
                        tabLEDs.SelectTab(0)
                    ElseIf xTest.Results.LEDsTest.HighBeam.TestDone And Not xTest.Results.LEDsTest.HighBeam.Ok Then
                        tabLEDs.SelectTab(1)
                    ElseIf xTest.Results.LEDsTest.ParkLight.TestDone And Not xTest.Results.LEDsTest.ParkLight.Ok Then
                        tabLEDs.SelectTab(2)
                    ElseIf xTest.Results.LEDsTest.TurnLight.TestDone And Not xTest.Results.LEDsTest.TurnLight.Ok Then
                        tabLEDs.SelectTab(3)
                    ElseIf xTest.Results.LEDsTest.DayLight.TestDone And Not xTest.Results.LEDsTest.DayLight.Ok Then
                        tabLEDs.SelectTab(4)
                    ElseIf xTest.Results.LEDsTest.SideMarker.TestDone And Not xTest.Results.LEDsTest.SideMarker.Ok Then
                        tabLEDs.SelectTab(5)
                    ElseIf xTest.Results.LEDsTest.ComingHome.TestDone And Not xTest.Results.LEDsTest.ComingHome.Ok Then
                        tabLEDs.SelectTab(6)
                    ElseIf xTest.Results.LEDsTest.CorneringLight.TestDone And Not xTest.Results.LEDsTest.CorneringLight.Ok Then
                        tabLEDs.SelectTab(7)
                    ElseIf xTest.Results.LEDsTest.TurnLightWipeOn.TestDone And Not xTest.Results.LEDsTest.TurnLightWipeOn.Ok Then
                        tabLEDs.SelectTab(8)
                    ElseIf xTest.Results.LEDsTest.TurnLightWipeOFF.TestDone And Not xTest.Results.LEDsTest.TurnLightWipeOFF.Ok Then
                        tabLEDs.SelectTab(8)
                    Else
                        'Last selected
                        tabLEDs.SelectTab(tabLEDs.SelectedIndex)
                    End If

                    ShowsLedsResults(tabLEDs.SelectedIndex)
                    GrapResultActive = enumGraphResultActive.LEDs
                End If

            Case iTabResultOthers
                If GrapResultActive <> enumGraphResultActive.Others Then
                    xCameraManagement.StopLiveAllCameras()
                    GrapResultActive = enumGraphResultActive.Others
                End If

            Case Else
                ' ShowGeomBitmap()
                ' ShowGeomResults()


        End Select

    End Sub
    Private Sub ShowBitmap()
        If xTest.Results.GeomTest.TestDone Then
            ShowGeomBitmap()
        ElseIf xTest.Results.LEDsTest.TestDone Then
            ShowLedBitmap()
        Else
        End If

    End Sub

    Private Sub ShowGeomBitmap()
        'Choose bmp to show

        Try
            If IsNothing(xTest.Results.GeomTest.PointHC.BmpUsed) Then
                If IsNothing(xTest.Results.GeomTest.LowBeamHotSpot.BmpUsed) Then
                    If IsNothing(xTest.Results.GeomTest.LowBeamMaxGrad.BmpUsed) Then
                        If IsNothing(xTest.Results.GeomTest.HighBeamHotSpot.BmpUsed) Then
                            If IsNothing(xTest.Results.GeomTest.LowBeamCutoff.BmpUsed) Then
                                Return
                            Else
                                picImageCamera.Image = xTest.Results.GeomTest.LowBeamCutoff.BmpUsed
                            End If
                        Else
                            picImageCamera.Image = xTest.Results.GeomTest.HighBeamHotSpot.BmpUsed
                        End If
                    Else
                        picImageCamera.Image = xTest.Results.GeomTest.LowBeamMaxGrad.BmpUsed
                    End If
                Else
                    picImageCamera.Image = xTest.Results.GeomTest.LowBeamHotSpot.BmpUsed
                End If
            Else
                picImageCamera.Image = xTest.Results.GeomTest.PointHC.BmpUsed
            End If

            picImageCamera.Invalidate()
            picImageCamera.Refresh()
            Application.DoEvents()
            Threading.Thread.Sleep(100)

        Catch ex As Exception

        End Try

    End Sub


    Private Sub ShowLedBitmap()
        'Choose bmp to show

        Try

            If xTest.Results.LEDsTest.Ok Then
                If xTest.Results.LEDsTest.LowBeam.TestDone Then
                    picImageCamera.Image = xTest.Results.LEDsTest.LowBeam.LEDs(0).BmpUsed
                ElseIf xTest.Results.LEDsTest.HighBeam.TestDone Then
                    picImageCamera.Image = xTest.Results.LEDsTest.HighBeam.LEDs(0).BmpUsed
                ElseIf xTest.Results.LEDsTest.ParkLight.TestDone Then
                    picImageCamera.Image = xTest.Results.LEDsTest.ParkLight.LEDs(0).BmpUsed
                ElseIf xTest.Results.LEDsTest.TurnLight.TestDone Then
                    picImageCamera.Image = xTest.Results.LEDsTest.TurnLight.LEDs(0).BmpUsed
                ElseIf xTest.Results.LEDsTest.DayLight.TestDone Then
                    picImageCamera.Image = xTest.Results.LEDsTest.DayLight.LEDs(0).BmpUsed
                ElseIf xTest.Results.LEDsTest.SideMarker.TestDone Then
                    picImageCamera.Image = xTest.Results.LEDsTest.SideMarker.LEDs(0).BmpUsed
                ElseIf xTest.Results.LEDsTest.ComingHome.TestDone Then
                    picImageCamera.Image = xTest.Results.LEDsTest.ComingHome.LEDs(0).BmpUsed
                ElseIf xTest.Results.LEDsTest.CorneringLight.TestDone Then
                    picImageCamera.Image = xTest.Results.LEDsTest.CorneringLight.LEDs(0).BmpUsed
                ElseIf xTest.Results.LEDsTest.TurnLightWipeOn.TestDone Then
                    picImageCamera.Image = xTest.Results.LEDsTest.TurnLightWipeOn.BmpUsed
                ElseIf xTest.Results.LEDsTest.TurnLightWipeOFF.TestDone Then
                    picImageCamera.Image = xTest.Results.LEDsTest.TurnLightWipeOn.BmpUsed
                Else
                    Return
                End If
            Else

                If xTest.Results.LEDsTest.LowBeam.TestDone And Not xTest.Results.LEDsTest.LowBeam.Ok Then
                    picImageCamera.Image = xTest.Results.LEDsTest.LowBeam.LEDs(0).BmpUsed
                ElseIf xTest.Results.LEDsTest.HighBeam.TestDone And Not xTest.Results.LEDsTest.HighBeam.Ok Then
                    picImageCamera.Image = xTest.Results.LEDsTest.HighBeam.LEDs(0).BmpUsed
                ElseIf xTest.Results.LEDsTest.ParkLight.TestDone And Not xTest.Results.LEDsTest.ParkLight.Ok Then
                    picImageCamera.Image = xTest.Results.LEDsTest.ParkLight.LEDs(0).BmpUsed
                ElseIf xTest.Results.LEDsTest.TurnLight.TestDone And Not xTest.Results.LEDsTest.TurnLight.Ok Then
                    picImageCamera.Image = xTest.Results.LEDsTest.TurnLight.LEDs(0).BmpUsed
                ElseIf xTest.Results.LEDsTest.DayLight.TestDone And Not xTest.Results.LEDsTest.DayLight.Ok Then
                    picImageCamera.Image = xTest.Results.LEDsTest.DayLight.LEDs(0).BmpUsed
                ElseIf xTest.Results.LEDsTest.SideMarker.TestDone And Not xTest.Results.LEDsTest.SideMarker.Ok Then
                    picImageCamera.Image = xTest.Results.LEDsTest.SideMarker.LEDs(0).BmpUsed
                ElseIf xTest.Results.LEDsTest.ComingHome.TestDone And Not xTest.Results.LEDsTest.ComingHome.Ok Then
                    picImageCamera.Image = xTest.Results.LEDsTest.ComingHome.LEDs(0).BmpUsed
                ElseIf xTest.Results.LEDsTest.CorneringLight.TestDone And Not xTest.Results.LEDsTest.CorneringLight.Ok Then
                    picImageCamera.Image = xTest.Results.LEDsTest.CorneringLight.LEDs(0).BmpUsed
                ElseIf xTest.Results.LEDsTest.TurnLightWipeOn.TestDone And Not xTest.Results.LEDsTest.TurnLightWipeOn.Ok Then
                    picImageCamera.Image = xTest.Results.LEDsTest.TurnLightWipeOn.BmpUsed
                ElseIf xTest.Results.LEDsTest.TurnLightWipeOFF.TestDone And Not xTest.Results.LEDsTest.TurnLightWipeOFF.Ok Then
                    picImageCamera.Image = xTest.Results.LEDsTest.TurnLightWipeOn.BmpUsed
                Else
                    Return
                End If

            End If

            picImageCamera.Invalidate()
            picImageCamera.Refresh()
            Application.DoEvents()
            Threading.Thread.Sleep(100)

        Catch ex As Exception

        End Try

    End Sub

    Private Sub ShowGeomResults()
        Dim ptoHV As New AForge.Point(LastRunningModel.Generic.CoordHV.X, LastRunningModel.Generic.CoordHV.Y)
        xGraphRes.DrawHV(ptoHV)
        xGraphRes.DrawGeomTestResult(xTest.Results)
        GrapResultActive = enumGraphResultActive.Geometric
    End Sub
    Private Sub ShowAimingResults(LightFunctionName As LightFunctions.enumLightFunctions)

        xCameraManagement.StopLiveAllCameras()
        Select Case LightFunctionName
            Case LightFunctions.enumLightFunctions.LowBeam
                picImageCamera.Image = xTest.AimingTest.LowBeamImage
            Case LightFunctions.enumLightFunctions.HighBeam
                picImageCamera.Image = xTest.AimingTest.HighBeamImage
            Case Else
                picImageCamera.Image = xTest.AimingTest.LowBeamImage
        End Select

        picImageCamera.Invalidate()
        Application.DoEvents()

        Dim ptoHV As New AForge.Point(LastRunningModel.Generic.CoordHV.X, LastRunningModel.Generic.CoordHV.Y)
        xGraphRes.DrawHV(ptoHV)
        xGraphRes.DrawAimingTestResults(xTest.Results, LightFunctionName)
        GrapResultActive = enumGraphResultActive.Aiming
    End Sub
    Private Sub ShowMotorResults()
        xGraphRes.DrawMotorTestResult(xTest.Results)
        GrapResultActive = enumGraphResultActive.Motor
    End Sub

    Private Sub tabDati_ShowsPhotmResults() Handles tabPhotom.SelectedIndexChanged
        ShowsPhotomResults(tabPhotom.SelectedIndex)
    End Sub
    Private Sub ShowsPhotomResults(ByVal iTab As Integer)
        Select Case iTab
            Case 0      'Low beam
                xCameraManagement.StopLiveAllCameras()
                picImageCamera.Image = xTest.PhotomTest.bmpLowBeam
                picImageCamera.Invalidate()
                Application.DoEvents()
                Dim ptoHV As New AForge.Point(LastRunningModel.Generic.CoordHV.X, LastRunningModel.Generic.CoordHV.Y)
                xGraphRes.DrawHV(ptoHV)
                xGraphRes.DrawLowBeamPhotomTestResults(xTest.Results)
            Case 1      'High beam
                xCameraManagement.StopLiveAllCameras()
                picImageCamera.Image = xTest.PhotomTest.bmpHighBeam
                picImageCamera.Invalidate()
                Application.DoEvents()
                Dim ptoHV As New AForge.Point(LastRunningModel.Generic.CoordHV.X, LastRunningModel.Generic.CoordHV.Y)
                xGraphRes.DrawHV(ptoHV)
                xGraphRes.DrawHighBeamPhotomTestResults(xTest.Results)
            Case 2  'Fog beam
                xCameraManagement.StopLiveAllCameras()
                picImageCamera.Image = xTest.PhotomTest.bmpFogBeam
                picImageCamera.Invalidate()
                Application.DoEvents()
                Dim ptoHV As New AForge.Point(LastRunningModel.Generic.CoordHV.X, LastRunningModel.Generic.CoordHV.Y)
                xGraphRes.DrawHV(ptoHV)
                xGraphRes.DrawFogBeamPhotomTestResults(xTest.Results)
            Case 3      'DRL
                xCameraManagement.StopLiveAllCameras()
                picImageCamera.Image = xTest.PhotomTest.bmpDrl
                picImageCamera.Invalidate()
                Application.DoEvents()
                Dim ptoHV As New AForge.Point(LastRunningModel.Generic.CoordHV.X, LastRunningModel.Generic.CoordHV.Y)
                xGraphRes.DrawHV(ptoHV)
                xGraphRes.DrawDrlPhotomTestResults(xTest.Results)
            Case 4      'Turn indicator
                xCameraManagement.StopLiveAllCameras()
                picImageCamera.Image = xTest.PhotomTest.bmpTI
                picImageCamera.Invalidate()
                Application.DoEvents()
                Dim ptoHV As New AForge.Point(LastRunningModel.Generic.CoordHV.X, LastRunningModel.Generic.CoordHV.Y)
                xGraphRes.DrawHV(ptoHV)
                xGraphRes.DrawTiPhotomTestResults(xTest.Results)

        End Select
        GrapResultActive = enumGraphResultActive.Photom

    End Sub
    Private Sub tabLEDs_SelectedIndexChanged() Handles tabLEDs.SelectedIndexChanged
        Call ShowsLedsResults(tabLEDs.SelectedIndex)
    End Sub
    Private Sub ShowsLedsResults(ByVal iTab As Integer)
        tabLEDs.SelectTab(iTab)
        Select Case iTab  'tabLEDs.SelectedIndex
            Case 0      'LowBeam               
                xCameraManagement.StopLiveAllCameras()
                If xTest.Results.LEDsTest.LowBeam.LEDs.Count > 0 Then
                    picImageCamera.Image = xTest.Results.LEDsTest.LowBeam.LEDs(0).BmpUsed
                    picImageCamera.Invalidate()
                    Application.DoEvents()
                    xGraphRes.DrawLEDsTestResults(xTest.Results, Test.enumTestType.LEDsLowBeam)
                End If

            Case 1      'HighBeam               
                xCameraManagement.StopLiveAllCameras()
                If xTest.Results.LEDsTest.HighBeam.LEDs.Count > 0 Then
                    picImageCamera.Image = xTest.Results.LEDsTest.HighBeam.LEDs(0).BmpUsed
                    picImageCamera.Invalidate()
                    Application.DoEvents()
                    xGraphRes.DrawLEDsTestResults(xTest.Results, Test.enumTestType.LEDsHighBeam)
                End If

            Case 2      'ParkLight               
                xCameraManagement.StopLiveAllCameras()
                If xTest.Results.LEDsTest.ParkLight.LEDs.Count > 0 Then
                    picImageCamera.Image = xTest.Results.LEDsTest.ParkLight.LEDs(0).BmpUsed
                    picImageCamera.Invalidate()
                    Application.DoEvents()
                    xGraphRes.DrawLEDsTestResults(xTest.Results, Test.enumTestType.LEDsParkLight)
                End If

            Case 3  'TurnLight
                xCameraManagement.StopLiveAllCameras()
                If xTest.Results.LEDsTest.TurnLight.LEDs.Count > 0 Then
                    picImageCamera.Image = xTest.Results.LEDsTest.TurnLight.LEDs(0).BmpUsed
                    picImageCamera.Invalidate()
                    Application.DoEvents()
                    xGraphRes.DrawLEDsTestResults(xTest.Results, Test.enumTestType.LEDsTurnLight)
                End If

            Case 4      'DRL
                xCameraManagement.StopLiveAllCameras()
                If xTest.Results.LEDsTest.DayLight.LEDs.Count > 0 Then
                    picImageCamera.Image = xTest.Results.LEDsTest.DayLight.LEDs(0).BmpUsed
                    For Each item As udtLEDsTestResults.udtResultLED In xTest.Results.LEDsTest.DayLight.LEDs
                        If item.TestDone And Not item.Ok Then
                            picImageCamera.Image = item.BmpUsed
                            Exit For
                        End If
                    Next
                    picImageCamera.Invalidate()
                    Application.DoEvents()
                    xGraphRes.DrawLEDsTestResults(xTest.Results, Test.enumTestType.LEDsDayLight)
                End If

            Case 5      'SideMarker
                xCameraManagement.StopLiveAllCameras()
                If xTest.Results.LEDsTest.SideMarker.LEDs.Count > 0 Then
                    picImageCamera.Image = xTest.Results.LEDsTest.SideMarker.LEDs(0).BmpUsed
                    picImageCamera.Invalidate()
                    Application.DoEvents()
                    xGraphRes.DrawLEDsTestResults(xTest.Results, Test.enumTestType.LEDsSideMarker)
                End If

            Case 6      'ComingHome
                xCameraManagement.StopLiveAllCameras()
                If xTest.Results.LEDsTest.ComingHome.LEDs.Count > 0 Then
                    picImageCamera.Image = xTest.Results.LEDsTest.ComingHome.LEDs(0).BmpUsed
                    picImageCamera.Invalidate()
                    Application.DoEvents()
                    xGraphRes.DrawLEDsTestResults(xTest.Results, Test.enumTestType.LEDsComingHome)
                End If

            Case 7      'Cornering light
                xCameraManagement.StopLiveAllCameras()
                If xTest.Results.LEDsTest.CorneringLight.LEDs.Count > 0 Then
                    picImageCamera.Image = xTest.Results.LEDsTest.CorneringLight.LEDs(0).BmpUsed
                    picImageCamera.Invalidate()
                    Application.DoEvents()
                    xGraphRes.DrawLEDsTestResults(xTest.Results, Test.enumTestType.LEDsCorneringLight)
                End If

            Case 8     'Wipe
                xCameraManagement.StopLiveAllCameras()
                If xTest.Results.LEDsTest.TurnLightWipeOn.TestDone Then
                    picImageCamera.Image = xTest.Results.LEDsTest.TurnLightWipeOn.BmpUsed
                    picImageCamera.Invalidate()
                    Application.DoEvents()
                    '   xGraphRes.DrawLEDsTestResults(xTest.Results, Test.enumTestType.LEDsCorneringLight)
                End If

        End Select
        GrapResultActive = enumGraphResultActive.LEDs
    End Sub


    Private Sub grpLowBeamCap_Click(sender As Object, e As EventArgs) Handles grpLowBeamCap.Click
        If xTest.Results.AimingTest.LowBeamCapacity.TestDone Then
            ShowAimingResults(LightFunctions.enumLightFunctions.LowBeam)
        End If
    End Sub

    Private Sub grpHighBeamCap_Click(sender As Object, e As EventArgs) Handles grpHighBeamCap.Click
        If xTest.Results.AimingTest.HighBeamCapacity.TestDone Then
            ShowAimingResults(LightFunctions.enumLightFunctions.HighBeam)
        End If
    End Sub


#End Region

#Region "GraphsBurnIn"

    Public Sub InitGraphBurniIn(ByVal chart As Windows.Forms.DataVisualization.Charting.Chart, ByVal MaxAxisX As Double)


        'Colore di sfondo del grafico
        chart.ChartAreas("Area1").BackColor = Color.DimGray
        chart.ChartAreas("Area1").BackGradientStyle = GradientStyle.DiagonalLeft
        chart.ChartAreas("Area1").ShadowColor = Color.DimGray
        ' chart.ChartAreas("Area1").ShadowOffset = 7

        ' Set  axis title
        chart.ChartAreas("Area1").AxisX.Title = "[msec]"
        chart.ChartAreas("Area1").AxisY.Title = "[A]"

        chart.ChartAreas("Area1").AxisX.Minimum = 0
        chart.ChartAreas("Area1").AxisX.Maximum = MaxAxisX   'xMyConfig.ConfigData.DurataMisuraMs * xMyConfig.ConfigData.SampleRate / 1000
        chart.ChartAreas("Area1").AxisX.IsMarginVisible = True

        'Serie
        'chart.Series("Graph1").ChartType = SeriesChartType.Line
        'chart.Series("Graph1").Color = Color.Red
        'chart.Series("Graph1").BorderWidth = 1
        'chart.Series("Graph2").ChartType = SeriesChartType.Line
        'chart.Series("Graph2").Color = Color.Cyan
        'chart.Series("Graph2").BorderWidth = 1

        chart.Series.Clear()
        Dim graph As New Series
        graph.Name = "Graph1"
        graph.ChartArea = "Area1"
        graph.ChartType = SeriesChartType.Line
        graph.Color = Color.Red
        chart.BorderWidth = 1
        chart.Series.Add(graph)

        For iGraph As Integer = 1 To xTest.RunningModel.Electric.BurnIn.CyclesQty
            graph = New Series
            graph.Name = "Graph" & iGraph + 1
            graph.ChartArea = "Area1"
            graph.ChartType = SeriesChartType.Line
            chart.BorderWidth = 1
            chart.Series.Add(graph)
        Next


        ''Non visualizzo gli empty points 
        'chart.Series("Bit").EmptyPointStyle.BorderWidth = 0
        'chart.Series("Bit").EmptyPointStyle.MarkerStyle = MarkerStyle.None

        'chart.Series("Bit").IsValueShownAsLabel = False

        'Tacche sull'asse X ad ogni 500
        chart.ChartAreas("Area1").AxisX.MajorGrid.Interval = 500
        chart.ChartAreas("Area1").AxisX.MajorTickMark.Interval = 500
        chart.ChartAreas("Area1").AxisX.Interval = 500

        'Zooming sul grafico
        chart.ChartAreas("Area1").AxisX.ScaleView.ZoomReset(0)
        chart.ChartAreas("Area1").AxisY.ScaleView.ZoomReset(0)
        chart.ChartAreas("Area1").AxisX.ScrollBar.IsPositionedInside = True
        chart.ChartAreas("Area1").AxisY.ScrollBar.IsPositionedInside = True
        Call AbilitaZooming(False, chart)

        'Tipo cursori
        Dim cursorX As System.Windows.Forms.DataVisualization.Charting.Cursor
        cursorX = chart.ChartAreas("Area1").CursorX
        cursorX.LineWidth = 1
        cursorX.LineDashStyle = ChartDashStyle.Solid
        cursorX.LineColor = Color.DarkBlue
        cursorX.SelectionColor = System.Drawing.SystemColors.Highlight
        Dim cursorY As System.Windows.Forms.DataVisualization.Charting.Cursor
        cursorY = chart.ChartAreas("Area1").CursorY
        cursorY.LineWidth = 1
        cursorY.LineDashStyle = ChartDashStyle.Solid
        cursorY.LineColor = Color.DarkBlue
        cursorY.SelectionColor = System.Drawing.SystemColors.Highlight

        chart.ChartAreas("Area1").CursorX.Interval = 0.1
        chart.ChartAreas("Area1").CursorY.Interval = 1

        chart.ChartAreas("Area1").CursorX.SelectionColor = System.Drawing.SystemColors.Highlight
        chart.ChartAreas("Area1").CursorY.SelectionColor = System.Drawing.SystemColors.Highlight

    End Sub

    Private Sub AbilitaZooming(ByVal bSi As Boolean, ByVal chart As Windows.Forms.DataVisualization.Charting.Chart)
        If bSi Then
            chart.ChartAreas("Area1").AxisX.ScaleView.Zoomable = False 'True
            chart.ChartAreas("Area1").CursorX.IsUserEnabled = True
            chart.ChartAreas("Area1").CursorX.IsUserSelectionEnabled = False 'True
            chart.ChartAreas("Area1").AxisY.ScaleView.Zoomable = False 'True
            chart.ChartAreas("Area1").CursorY.IsUserEnabled = False 'True
            chart.ChartAreas("Area1").CursorY.IsUserSelectionEnabled = False 'True

            chart.ChartAreas("Area1").CursorX.LineWidth = 2

            chart.ChartAreas("Area1").AxisX.ScrollBar.Size = 20
            chart.ChartAreas("Area1").AxisY.ScrollBar.Size = 20
        Else
            chart.ChartAreas("Area1").AxisX.ScaleView.Zoomable = False
            chart.ChartAreas("Area1").CursorX.IsUserEnabled = False
            chart.ChartAreas("Area1").CursorX.IsUserSelectionEnabled = False
            chart.ChartAreas("Area1").AxisY.ScaleView.Zoomable = False
            chart.ChartAreas("Area1").CursorY.IsUserEnabled = False
            chart.ChartAreas("Area1").CursorY.IsUserSelectionEnabled = False
            chart.ChartAreas("Area1").CursorX.SetCursorPosition(-10)
        End If



    End Sub

    Public Sub DrawSerieBurnIn(ByVal DataGraph() As Single, ByVal QtaCamp As Integer, ByVal LineColor As System.Drawing.Color, ByVal CurrentLimit As Single)
        Dim pointIndex As Integer
        Dim iSoglia As Integer = 0

        'ChartBit.Series("Bit").Points.Clear()
        'ChartBit.Annotations.Clear()

        'Massimo X
        ChartBurnIn.ChartAreas("Area1").AxisX.Maximum = QtaCamp * 1  'xTest.CampToDeg
        'Massimo Y
        Dim YmaxH1 As Double = 0
        For pointIndex = 0 To QtaCamp - 1
            If DataGraph(pointIndex) > YmaxH1 Then
                YmaxH1 = DataGraph(pointIndex)
            End If
        Next
        Dim Ymax As Double = YmaxH1
        ChartBurnIn.ChartAreas("Area1").AxisY.Maximum = Ymax + Ymax * 0.1


        For pointIndex = 0 To QtaCamp - 1
            'ChartHall1.Series("Hall").Points.AddXY(pointIndex * xTest.CampToDeg, DataGraph(pointIndex))
            ChartBurnIn.Series("Graph1").Points.AddXY(pointIndex, CurrentLimit)
            ChartBurnIn.Series("Graph2").Points.AddXY(pointIndex, DataGraph(pointIndex))
        Next

    End Sub
    Public Sub DrawSerieBurnIn(ByVal DataGraph() As Single, ByVal QtaCamp As Integer, ByVal CurrentLimit As Single, iStep As Integer)
        Dim pointIndex As Integer
        Dim iSoglia As Integer = 0

        'ChartBit.Series("Bit").Points.Clear()
        'ChartBit.Annotations.Clear()

        'Massimo X
        If iStep = 1 Then
            ChartBurnIn.ChartAreas("Area1").AxisX.Maximum = QtaCamp * 1  'xTest.CampToDeg
            'Massimo Y
            Dim YmaxH1 As Double = 0
            For pointIndex = 0 To QtaCamp - 1
                If DataGraph(pointIndex) > YmaxH1 Then
                    YmaxH1 = DataGraph(pointIndex)
                End If
            Next
            Dim Ymax As Double = YmaxH1
            ChartBurnIn.ChartAreas("Area1").AxisY.Maximum = Ymax + Ymax * 0.1
        End If

        For pointIndex = 0 To QtaCamp - 1
            'ChartHall1.Series("Hall").Points.AddXY(pointIndex * xTest.CampToDeg, DataGraph(pointIndex))
            ChartBurnIn.Series("Graph1").Points.AddXY(pointIndex, CurrentLimit)
            ChartBurnIn.Series("Graph" & iStep + 1).Points.AddXY(pointIndex, DataGraph(pointIndex))
        Next

    End Sub
    Public Sub EraseSerieBurnIn()
        Try
            For Each graph As Series In ChartBurnIn.Series
                graph.Points.Clear()
            Next
        Catch ex As Exception

        End Try

    End Sub

    Public Sub AddDataToSerie(ByVal SerieName As String, ByVal xValue As Single, ByVal Yvalue As Single)
        Dim ptSeries As Series
        For Each ptSeries In ChartBurnIn.Series
            If ptSeries.Name = SerieName Then
                AddNewPoint(ptSeries, xValue, Yvalue)
            End If
        Next ptSeries
    End Sub

    '/ The AddNewPoint function is called for each series in the chart when
    '/ new points need to be added.  The new point will be placed at specified
    '/ X axis (Date/Time) position with a Y value in a range +/- 1 from the previous
    '/ data point's Y value, and not smaller than zero.
    Public Sub AddNewPoint(ByVal ptSeries As System.Windows.Forms.DataVisualization.Charting.Series, ByVal xValue As Single, ByVal yValue As Single)
        Dim fc As Single

        fc = 1

        ' Add new data point to its series.
        ptSeries.Points.AddXY(xValue / fc, yValue)

        ChartBurnIn.Invalidate()
    End Sub 'AddNewPoint




#End Region

#Region "GraphsOutageIn"

    Public Sub InitGraphOutage(ByVal chart As Windows.Forms.DataVisualization.Charting.Chart, ByVal MaxAxisX As Double)

        Dim kHz As Integer = 250

        'Colore di sfondo del grafico
        chart.ChartAreas("Area1").BackColor = Color.DimGray
        chart.ChartAreas("Area1").BackGradientStyle = GradientStyle.DiagonalLeft
        chart.ChartAreas("Area1").ShadowColor = Color.DimGray
        ' chart.ChartAreas("Area1").ShadowOffset = 7

        ' Set  axis title
        chart.ChartAreas("Area1").AxisX.Title = ""   '"[msec]"
        chart.ChartAreas("Area1").AxisY.Title = "[A]"

        chart.ChartAreas("Area1").AxisX.Minimum = 0
        chart.ChartAreas("Area1").AxisX.Maximum = MaxAxisX   'xMyConfig.ConfigData.DurataMisuraMs * xMyConfig.ConfigData.SampleRate / 1000
        chart.ChartAreas("Area1").AxisX.IsMarginVisible = True

        'Serie
        chart.Series("Graph1").ChartType = SeriesChartType.Line
        chart.Series("Graph1").Color = Color.Red
        chart.Series("Graph1").BorderWidth = 2
        chart.Series("Graph2").ChartType = SeriesChartType.Line
        chart.Series("Graph2").Color = Color.Red
        chart.Series("Graph2").BorderWidth = 2
        chart.Series("Graph3").ChartType = SeriesChartType.Line
        chart.Series("Graph3").Color = Color.Cyan
        chart.Series("Graph3").BorderWidth = 2



        ''Non visualizzo gli empty points 
        'chart.Series("Bit").EmptyPointStyle.BorderWidth = 0
        'chart.Series("Bit").EmptyPointStyle.MarkerStyle = MarkerStyle.None

        'chart.Series("Bit").IsValueShownAsLabel = False

        Try
            'Tacche sull'asse X ad ogni 500
            chart.ChartAreas("Area1").AxisX.MajorGrid.Interval = 500 * kHz / 1000
            chart.ChartAreas("Area1").AxisX.MajorTickMark.Interval = 500 * kHz / 1000
            chart.ChartAreas("Area1").AxisX.Interval = 500 * kHz / 1000
            chart.ChartAreas("Area1").AxisX.LabelStyle.Enabled = False
            chart.ChartAreas("Area1").AxisX.MajorGrid.Enabled = False
            chart.ChartAreas("Area1").AxisX.MinorGrid.Enabled = False
            chart.ChartAreas("Area1").AxisX.MajorTickMark.Enabled = False
            chart.ChartAreas("Area1").AxisX.MinorTickMark.Enabled = False

        Catch ex As Exception

        End Try


        'Zooming sul grafico
        chart.ChartAreas("Area1").AxisX.ScaleView.ZoomReset(0)
        chart.ChartAreas("Area1").AxisY.ScaleView.ZoomReset(0)
        chart.ChartAreas("Area1").AxisX.ScrollBar.IsPositionedInside = True
        chart.ChartAreas("Area1").AxisY.ScrollBar.IsPositionedInside = True
        Call AbilitaZoomingOutage(False, chart)

        'Tipo cursori
        Dim cursorX As System.Windows.Forms.DataVisualization.Charting.Cursor
        cursorX = chart.ChartAreas("Area1").CursorX
        cursorX.LineWidth = 1
        cursorX.LineDashStyle = ChartDashStyle.Solid
        cursorX.LineColor = Color.DarkBlue
        cursorX.SelectionColor = System.Drawing.SystemColors.Highlight
        Dim cursorY As System.Windows.Forms.DataVisualization.Charting.Cursor
        cursorY = chart.ChartAreas("Area1").CursorY
        cursorY.LineWidth = 1
        cursorY.LineDashStyle = ChartDashStyle.Solid
        cursorY.LineColor = Color.DarkBlue
        cursorY.SelectionColor = System.Drawing.SystemColors.Highlight

        chart.ChartAreas("Area1").CursorX.Interval = 0.1 * kHz
        chart.ChartAreas("Area1").CursorY.Interval = 1 * kHz

        chart.ChartAreas("Area1").CursorX.SelectionColor = System.Drawing.SystemColors.Highlight
        chart.ChartAreas("Area1").CursorY.SelectionColor = System.Drawing.SystemColors.Highlight

    End Sub

    Private Sub AbilitaZoomingOutage(ByVal bSi As Boolean, ByVal chart As Windows.Forms.DataVisualization.Charting.Chart)
        If bSi Then
            chart.ChartAreas("Area1").AxisX.ScaleView.Zoomable = False 'True
            chart.ChartAreas("Area1").CursorX.IsUserEnabled = True
            chart.ChartAreas("Area1").CursorX.IsUserSelectionEnabled = False 'True
            chart.ChartAreas("Area1").AxisY.ScaleView.Zoomable = False 'True
            chart.ChartAreas("Area1").CursorY.IsUserEnabled = False 'True
            chart.ChartAreas("Area1").CursorY.IsUserSelectionEnabled = False 'True

            chart.ChartAreas("Area1").CursorX.LineWidth = 2

            chart.ChartAreas("Area1").AxisX.ScrollBar.Size = 20
            chart.ChartAreas("Area1").AxisY.ScrollBar.Size = 20
        Else
            chart.ChartAreas("Area1").AxisX.ScaleView.Zoomable = False
            chart.ChartAreas("Area1").CursorX.IsUserEnabled = False
            chart.ChartAreas("Area1").CursorX.IsUserSelectionEnabled = False
            chart.ChartAreas("Area1").AxisY.ScaleView.Zoomable = False
            chart.ChartAreas("Area1").CursorY.IsUserEnabled = False
            chart.ChartAreas("Area1").CursorY.IsUserSelectionEnabled = False
            chart.ChartAreas("Area1").CursorX.SetCursorPosition(-10)
        End If



    End Sub

    Public Sub DrawSerieOutage(ByVal DataGraph() As Single, ByVal QtaCamp As Integer, ByVal CurrentLimitMin As Single, ByVal CurrentLimitMax As Single, ResOk As Boolean,
                               LedName As String)
        Dim pointIndex As Integer


        'Massimo X
        ChartOutage.ChartAreas("Area1").AxisX.Maximum = QtaCamp * 1  'xTest.CampToDeg
        'Massimo Y
        Dim Ymax As Double = 0
        Dim Ymin As Single = 9999
        Dim Mean As Single = 0
        For pointIndex = 0 To QtaCamp - 5
            If DataGraph(pointIndex) > Ymax Then
                Ymax = DataGraph(pointIndex)
            End If
            If DataGraph(pointIndex) < Ymin Then
                Ymin = DataGraph(pointIndex)
            End If
            Mean += DataGraph(pointIndex)
        Next
        If QtaCamp > 0 Then
            Mean = Mean / (QtaCamp)
        Else
            Mean = 0
        End If

        ChartOutage.ChartAreas("Area1").AxisY.Maximum = Ymax + Ymax * 0.3

        Dim Title As String = LedName & ":  Mean= " & Format(Mean, "#0.000") & " A    Max-Min = " & Format(Ymax - Ymin, "#0.000") & " A"
        ChartOutage.ChartAreas("Area1").AxisX.Title = Title
        ChartOutage.ChartAreas("Area1").AxisX.TitleFont = New Font("Microsoft Sans Serif", 24.0!, FontStyle.Bold)
        If ResOk Then
            ChartOutage.Series("Graph1").Color = Color.LimeGreen
            ChartOutage.Series("Graph2").Color = Color.LimeGreen
            ChartOutage.ChartAreas("Area1").AxisX.TitleForeColor = Color.Green
        Else
            ChartOutage.Series("Graph1").Color = Color.Red
            ChartOutage.Series("Graph2").Color = Color.Red
            ChartOutage.ChartAreas("Area1").AxisX.TitleForeColor = Color.Red
        End If


        For pointIndex = 0 To QtaCamp - 1
            ChartOutage.Series("Graph1").Points.AddXY(pointIndex, CurrentLimitMin)
            ChartOutage.Series("Graph2").Points.AddXY(pointIndex, CurrentLimitMax)
            ChartOutage.Series("Graph3").Points.AddXY(pointIndex, DataGraph(pointIndex))
        Next

    End Sub

    Public Sub EraseSerieOutage()
        Try
            For Each graph As Series In ChartOutage.Series
                graph.Points.Clear()
            Next
        Catch ex As Exception

        End Try

    End Sub

    Public Sub AddDataToSerieOutage(ByVal SerieName As String, ByVal xValue As Single, ByVal Yvalue As Single)
        Dim ptSeries As Series
        For Each ptSeries In ChartOutage.Series
            If ptSeries.Name = SerieName Then
                AddNewPoint(ptSeries, xValue, Yvalue)
            End If
        Next ptSeries
    End Sub

    '/ The AddNewPoint function is called for each series in the chart when
    '/ new points need to be added.  The new point will be placed at specified
    '/ X axis (Date/Time) position with a Y value in a range +/- 1 from the previous
    '/ data point's Y value, and not smaller than zero.
    Public Sub AddNewPointOutage(ByVal ptSeries As System.Windows.Forms.DataVisualization.Charting.Series, ByVal xValue As Single, ByVal yValue As Single)
        Dim fc As Single

        fc = 1

        ' Add new data point to its series.
        ptSeries.Points.AddXY(xValue / fc, yValue)

        ChartOutage.Invalidate()
    End Sub 'AddNewPoint



#End Region

#Region "BackgroudWorkers"

#Region " BW DoCompleteTest "

    Private Sub bgwDoCompleteTest_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bgwDoCompleteTest.DoWork

        xToPlc.OkToRemoveScrewdrivers = False

        'Dim cam As LasCore.Icamera = xCameraManagement.GetCamera(LasCore.CameraManagement.enumCameraId.CameraCentral)
        Dim cam As LasCore.Icamera = xCameraManagement.GetCamera(xTest.RunningModel.Generic.DefaultCamera)
        If Not IsNothing(cam) Then
            If Not cam.Active Then
                xCameraManagement.DeactivateAllCamera()
                xCameraManagement.StopLiveAllCameras()
                WaitWithEvents(100)
            End If
            cam.SetExposureTime(15.0)
            cam.Activate()
            cam.StartLive()
        End If


        Dim Result = New udtTestResults

        If e.Argument = "Capability" Then
            'Result = xTest.DoCapabilityTest(xAppConfig.Params.CapabilityCycleQty, bgwDoCompleteTest, e)
            Result = xTest.DoCapabilityTest(xTest.CapabiltyCyclesQty, bgwDoCompleteTest, e)
        Else
            Result = xTest.DoTest(bgwDoCompleteTest, e)
        End If

        e.Result = New udtTestResults
        e.Result = Result
    End Sub

    Private Sub bgwDoCompleteTest_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bgwDoCompleteTest.ProgressChanged
        Dim myReport As New Test.udtBackgroundWorkerReport
        myReport = e.UserState
        lblTestResult.Text = myReport.InfoOp
        lblTestResult.ForeColor = myReport.InfoOpForeColor

        If Not IsNothing(myReport.InfoRunningTest) Then
            lblProduzInCorso.Text = myReport.InfoRunningTest
        End If

        Static BurnInInProgress As Boolean = False
        Static OutageInProgress As Boolean = False


        Select Case myReport.TestStatus
            Case Test.enumTestStatus.Init
                tabResults.SelectTab(iTabSequence)
                Application.DoEvents()
                Dim iRetry As Integer = 0
                Do
                    If xTest.ShowTestSequence() Then Exit Do
                    iRetry = +1
                    If iRetry > 5 Then Exit Do
                Loop
                'xTest.ShowTestSequence()
                xTest.InitDone = True
            Case Else
                xTest.RefreshTestSequence()
        End Select


        If myReport.TestType = Test.enumTestType.BurnIn Then
            If Not BurnInInProgress Then
                BurnInInProgress = True
                ' ChartBurnIn.Location = New System.Drawing.Point(151, 56)
                ChartBurnIn.Location = picImageCamera.Location
                EraseSerieBurnIn()
                InitGraphBurniIn(ChartBurnIn, myReport.TimeLengthMS * myReport.SampleRate / 1000)
            End If

            If e.ProgressPercentage > 0 Then
                'Draw graph
                ' EraseSerieBurnIn()
                ' DrawSerieBurnIn(myReport.AbsortionGraph, myReport.TimeLengthMS * myReport.SampleRate / 1000, Color.Cyan, myReport.CurrentLimit)
                DrawSerieBurnIn(myReport.AbsortionGraph, myReport.TimeLengthMS * myReport.SampleRate / 1000, myReport.CurrentLimitMin, myReport.CycleNo)
            End If
        Else
            ChartBurnIn.Left = -10000
            BurnInInProgress = False
        End If


    End Sub

    Private Sub bgwDoCompleteTest_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bgwDoCompleteTest.RunWorkerCompleted
        Dim myResult As New udtTestResults


        chkSaveTestImages.Checked = False
        xTest.SaveImages = False
        For Each cam As LasCore.Icamera In xCameraManagement.CameraList
            If cam.Config.Enabled Then
                cam.SaveImages = xTest.SaveImages
            End If
        Next

        Try
            xRetentive.Variables.LastRunningRecipe = e.Result.IdRecipe
            xRetentive.WriteDataToFile()
        Catch ex As Exception
        End Try



        If e.Cancelled Then
            VisInfoOp(xTextsManag.GetUserInfosText("TestAborted"), ForeColorForMsgNok)
            If AutoMode Then
                xToPlc.AbortCycleDone = True
            Else
                mnu.ShowPreviousMenu()
            End If
            xToPlc.AbortCycleDone = True
            xToPlc.CycleRunning = False
        Else
            myResult = e.Result
            xTest.Results = e.Result


            xCameraManagement.DeactivateAllCamera()
            xCameraManagement.StopLiveAllCameras()
            xCameraManagement.ActivateCamera(xTest.RunningModel.Generic.DefaultCamera)

            xTest.GeomTest.DisplayTestLimits()

            ShowBitmap()

            GrapResultActive = enumGraphResultActive.None
            Dim iTab As Integer = SelectResultToShow(myResult)
            ShowResults(iTab)
            If Not myResult.Ok Then
                tabResults.SelectTab(iTab)
            End If

            VisInfoOp(myResult.Message, myResult.MessageColor)
            Dim myModel As New Model(myResult.IdRecipe, myResult.ScreewDriversInserted)
            xTest.DisplayResult(myResult, myModel)

            'Master 
            ucMasterMonitor.PieceCycleDone()
            If xTest.PieceIsMaster And myResult.Ok Then
                ucMasterMonitor.MasterCycleDone(myResult.IdRecipe)
                xToPlc.MasterRequired = False
            End If

            If AutoMode Then

                If xTest.Measures.MeasureData.Count > 0 Then
                    xDataStorage.AddMeasures(xTest.PieceUnderTest, myModel.Model, xTest.Measures.MeasureData)
                End If
                'Failures
                If Not myResult.Ok Then
                    Dim ListResults As New List(Of Test.udtFailure)
                    ListResults = xTest.SetFailures(myResult.PieceCode, myResult)
                    If ListResults.Count > 0 Then
                        xDataStorage.AddFailures(xTest.PieceUnderTest, myModel.Model, ListResults)
                    End If
                End If
                xToPlc.TestResult = xToPlc.SetResultsToPLC(myResult.PieceCode, myResult)
                xToPlc.TestMeasures = xToPlc.SetMeasuresToPLC(myResult, myModel)
                If xAppConfig.Params.Trace.Enabled Then
                    xTraceInterface.SendFailures(myResult)
                    xTraceInterface.SendMeasures(myResult, myModel)
                End If
                If xAppConfig.Params.PLCs(0).InterfaceVersion >= 2 Then
                    Call xToPlc.FormatMeasureToPlc(plcCnf.PlcArea("MeasuresWrite").qtaW * 2)
                    Plc.SetWriteRequest(xToPlc.ByteToPlc, "MeasuresWrite")
                End If

                xToPlc.Anomaly = myResult.AnomalyOccurred
                xToPlc.OkToRemoveScrewdrivers = False
                xToPlc.TestFailed = Not myResult.Ok And Not xToPlc.Anomaly
                xToPlc.TestPassed = myResult.Ok And Not xToPlc.Anomaly
                xToPlc.CycleDone = True
                xToPlc.CycleRunning = False


                If myResult.Ok Then
                    xRetentive.Variables.Good += 1
                Else
                    xRetentive.Variables.Scrap += 1
                End If
                xRetentive.WriteDataToFile()



                If Not xTest.PieceIsMaster Then
                    xProduction.EndTest(myResult.Ok)
                    If myResult.Ok Then
                        xProduction.ProdData.GoodQty += 1
                    Else
                        xProduction.ProdData.ScrapQty += 1
                    End If
                    xProduction.StoreProduction()
                End If
                'For Each item As Production.udtProdCounter In xProduction.ProdData.ProdCounters
                '    If item.Model = myModel.Model Then
                '        lblGoodAct.Text = item.GoodQty
                '        lblScrapsAct.Text = item.ScrapQty
                '        lblRunningTimeAct.Text = item.TimeRun
                '        lblIdleTimeAct.Text = item.TimeIdle
                '        Exit For
                '    End If
                'Next


            Else
                mnu.ShowPreviousMenu()

                myResult.WorkingCounter = 1

                If xTest.Measures.MeasureData.Count > 0 Then
                    xDataStorage.AddMeasures(xTest.PieceUnderTest, myModel.Model, xTest.Measures.MeasureData)
                End If
                'Failures
                If Not myResult.Ok Then
                    Dim ListResults As New List(Of Test.udtFailure)
                    ListResults = xTest.SetFailures(myResult.PieceCode, myResult)
                    If ListResults.Count > 0 Then
                        xDataStorage.AddFailures(xTest.PieceUnderTest, myModel.Model, ListResults)
                    End If
                End If
                xToPlc.TestResult = xToPlc.SetResultsToPLC(myResult.PieceCode, myResult)
                xToPlc.TestMeasures = xToPlc.SetMeasuresToPLC(myResult, myModel)
                If xAppConfig.Params.PLCs(0).InterfaceVersion >= 2 Then
                    Call xToPlc.FormatMeasureToPlc(plcCnf.PlcArea("MeasuresWrite").qtaW * 2)
                    Plc.SetWriteRequest(xToPlc.ByteToPlc, "MeasuresWrite")
                End If

                If xAppConfig.Params.Trace.Enabled Then
                    xTraceInterface.SendFailures(myResult)
                    xTraceInterface.SendMeasures(myResult, myModel)
                End If

                xToPlc.Anomaly = myResult.AnomalyOccurred
                xToPlc.OkToRemoveScrewdrivers = False
                xToPlc.TestFailed = Not myResult.Ok And Not xToPlc.Anomaly
                xToPlc.TestPassed = myResult.Ok And Not xToPlc.Anomaly
                xToPlc.CycleDone = True
                xToPlc.CycleRunning = False

            End If

            If xTest.Results.GeomTest.TestDone Or xTest.Results.LEDsTest.TestDone Then
            Else
                If xTest.Results.BurnInTest.TestDone Then
                    xCameraManagement.DeactivateAllCamera()
                    xCameraManagement.StopLiveAllCameras()
                    picImageCamera.Invalidate()
                    picImageCamera.Refresh()
                    Application.DoEvents()
                    Threading.Thread.Sleep(100)

                    ChartBurnIn.Location = picImageCamera.Location
                    GrapResultActive = enumGraphResultActive.None
                End If
            End If

        End If

        xTest.PieceIsMaster = False

        bgwInProgress = Nothing

        LasCore.RealeaseMemory()


    End Sub

#End Region

#Region " BW DoReadLabels "

    Private Sub bgwDoReadLabels_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bgwDoReadLabels.DoWork

        xToPlc.OkToRemoveScrewdrivers = False

        Dim cam As LasCore.Icamera = xCameraManagement.GetCamera(LasCore.CameraManagement.enumCameraId.CameraCentral)
        If Not cam.Active Then
            xCameraManagement.DeactivateAllCamera()
            xCameraManagement.StopLiveAllCameras()
            WaitWithEvents(500)
        End If
        cam.SetExposureTime(15.0)
        cam.Activate()
        cam.StartLive()

        Dim Result = New udtTestResults
        Result = xTest.DoReadLabels(bgwDoReadLabels, e, xFromPlc.IdRecipeToRun)

        e.Result = New udtTestResults
        e.Result = Result
    End Sub

    Private Sub bgwDoReadLabels_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bgwDoReadLabels.ProgressChanged
        Dim myReport As New Test.udtBackgroundWorkerReport
        myReport = e.UserState
        lblTestResult.Text = myReport.InfoOp
        lblTestResult.ForeColor = myReport.InfoOpForeColor

        If Not IsNothing(myReport.InfoRunningTest) Then
            lblProduzInCorso.Text = myReport.InfoRunningTest
        End If

        Static BurnInInProgress As Boolean = False
        Static OutageInProgress As Boolean = False

        Select Case myReport.TestStatus
            Case Test.enumTestStatus.Init
                tabResults.SelectTab(iTabSequence)
                xTest.ClearTestSequence()
            Case Else
        End Select

        ChartBurnIn.Left = -10000
        BurnInInProgress = False


    End Sub

    Private Sub bgwDoReadLabels_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bgwDoReadLabels.RunWorkerCompleted
        Dim myResult As New udtTestResults


        If e.Cancelled Then
            VisInfoOp(xTextsManag.GetUserInfosText("TestAborted"), ForeColorForMsgNok)
            If AutoMode Then
                xToPlc.AbortCycleDone = True
            Else
                mnu.ShowPreviousMenu()
            End If
            xToPlc.AbortCycleDone = True
            xToPlc.CycleRunning = False
            bgwInProgress = Nothing
        Else

            myResult = e.Result
            xTest.Results = e.Result
            If myResult.ReadLabels.Ok Then

                xToPlc.PieceCode = myResult.ReadLabels.Housing.ValueStr

                If ucMasterMonitor.IsCycleMasterRequired(myResult.ReadLabels.Housing.Value) Then
                    If Not myResult.ReadLabels.Housing.IsMaster Then
                        'Error - Master required
                        VisInfoOp(xTextsManag.GetUserInfosText("CycleMasterRequired"), ForeColorForMsgNok)
                        xToPlc.TestResult = xToPlc.SetTestResults(Test.enumFailureCode.MasterReuqired, xFromPlc.PieceCode, xFromPlc.IdRecipeToRun)
                        xToPlc.TestFailed = True
                        xToPlc.TestPassed = False
                        xToPlc.CycleDone = True
                        xToPlc.MasterRequired = True
                        xToPlc.CycleRunning = False
                        xToPlc.HousingWorkable = False
                        xToPlc.PieceIsMaster = False
                    Else
                        EndReadLabelOk(myResult)
                    End If

                Else
                    EndReadLabelOk(myResult)
                End If

            Else
                lblTestResult.Text = myResult.ReadLabels.Message
                lblTestResult.ForeColor = ForeColorForMsgNok
                xToPlc.TestResult = xToPlc.SetTestResults(Test.enumFailureCode.RecipeNotFound, myResult.ReadLabels.Housing.ValueStr, myResult.ReadLabels.Housing.Value)
                xToPlc.TestFailed = True
                xToPlc.TestPassed = False
                xToPlc.CycleDone = True
                xToPlc.CycleRunning = False
                xToPlc.HousingWorkable = False
                xToPlc.PieceIsMaster = False
            End If

        End If

    End Sub

    Private Sub EndReadLabelOk(myResult As udtTestResults)

        VisInfoOp(xTextsManag.GetUserInfosText("PieceWorkable"), ForeColorForMsgOk)

        If xAppConfig.Params.AutomaticStartByBCR Then
            xTest.PieceIsMaster = myResult.ReadLabels.Housing.IsMaster
            xTest.InitTest(Test.enumTestType.Complete, myResult.ReadLabels.Housing.Value, myResult.ReadLabels.Housing.ValueStr,
                           myResult.ReadLabels.MainCode.ValueStr, myResult.ReadLabels.DeviceableCode.ValueStr)

            xToPlc.TestResult = xToPlc.SetTestResults(Test.enumFailureCode.None, myResult.ReadLabels.Housing.ValueStr, "")
            xToPlc.TestFailed = False
            xToPlc.TestPassed = False
            xToPlc.CycleDone = False
            '  xToPlc.Anomaly = False
            bgwInProgress = bgwDoCompleteTest
            bgwDoCompleteTest.RunWorkerAsync("DoTest")
        Else

            xToPlc.PieceCode = myResult.ReadLabels.Housing.ValueStr
            xToPlc.TestFailed = False
            xToPlc.TestPassed = True
            xToPlc.CycleDone = True
            xToPlc.MasterRequired = False
            xToPlc.CycleRunning = False
            xToPlc.HousingWorkable = True
            xToPlc.PieceIsMaster = myResult.ReadLabels.Housing.IsMaster
        End If


    End Sub

#End Region

#Region " BW DoPrintLabels "

    Private Sub bgwDoPrintLabels_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bgwDoPrintLabels.DoWork

        xToPlc.OkToRemoveScrewdrivers = False

        Dim cam As LasCore.Icamera = xCameraManagement.GetCamera(LasCore.CameraManagement.enumCameraId.CameraCentral)
        If Not cam.Active Then
            xCameraManagement.DeactivateAllCamera()
            xCameraManagement.StopLiveAllCameras()
            WaitWithEvents(500)
        End If
        cam.SetExposureTime(15.0)
        cam.Activate()
        cam.StartLive()

        Dim Result = New udtTestResults
        Result = xTest.DoPrintLabels(bgwDoPrintLabels, e, xFromPlc.IdRecipeToRun, xFromPlc.PieceCode, xFromPlc.PrintLabelForScrapPiece)

        e.Result = New udtTestResults
        e.Result = Result
    End Sub

    Private Sub bgwDoPrintLabels_ProgressChanged(ByVal sender As Object, ByVal e As System.ComponentModel.ProgressChangedEventArgs) Handles bgwDoPrintLabels.ProgressChanged
        Dim myReport As New Test.udtBackgroundWorkerReport
        myReport = e.UserState
        lblTestResult.Text = myReport.InfoOp
        lblTestResult.ForeColor = myReport.InfoOpForeColor

        If Not IsNothing(myReport.InfoRunningTest) Then
            lblProduzInCorso.Text = myReport.InfoRunningTest
        End If

        Static BurnInInProgress As Boolean = False
        Static OutageInProgress As Boolean = False

        Select Case myReport.TestStatus
            Case Test.enumTestStatus.Init
                tabResults.SelectTab(iTabSequence)
                xTest.ClearTestSequence()
            Case Else
        End Select

        ChartBurnIn.Left = -10000
        BurnInInProgress = False


    End Sub

    Private Sub bgwDoPrintLabels_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bgwDoPrintLabels.RunWorkerCompleted
        Dim myResult As New udtTestResults


        If e.Cancelled Then
            VisInfoOp(xTextsManag.GetUserInfosText("TestAborted"), ForeColorForMsgNok)
            If AutoMode Then
                xToPlc.AbortCycleDone = True
            Else
                mnu.ShowPreviousMenu()
            End If
            xToPlc.AbortCycleDone = True
            xToPlc.CycleRunning = False
            bgwInProgress = Nothing
        Else

            myResult = e.Result
            xTest.Results = e.Result
            If myResult.PrintLabel.Ok Then

                xToPlc.PieceCode = myResult.PrintLabel.ValueStr
                xToPlc.TestFailed = False
                xToPlc.TestPassed = True
                xToPlc.CycleDone = True
                xToPlc.MasterRequired = False
                xToPlc.CycleRunning = False
                xToPlc.HousingWorkable = False
                xToPlc.PieceIsMaster = False

            Else
                lblTestResult.Text = myResult.PrintLabel.Message
                lblTestResult.ForeColor = ForeColorForMsgNok
                xToPlc.TestFailed = True
                xToPlc.TestPassed = False
                xToPlc.CycleDone = True
                xToPlc.CycleRunning = False
                xToPlc.HousingWorkable = False
                xToPlc.PieceIsMaster = False
            End If

        End If

    End Sub

#End Region

#Region " bgwDoWizard "
    Private Sub bgwDoWizard_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bgwDoMakeRecipeWizard.DoWork
        xMakeRecipeWizard.RecipeToUpdate.IdRecipe = 0
        Dim bRes As Boolean = xMakeRecipeWizard.MakeRecipe(bgwDoMakeRecipeWizard, e, False)
        e.Result = bRes
    End Sub
    Private Sub bgwDoWizard_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bgwDoMakeRecipeWizard.RunWorkerCompleted

        mnu.ActivateMenuSuspended()
        If e.Result Then
            VisInfoOp(xTextsManag.GetUserInfosText("WizRecipeDone"), ForeColorForMsgWarning)
        Else
            VisInfoOp(xTextsManag.GetUserInfosText("WizRecipeNotDone"), ForeColorForMsgNok)
        End If

        xInOut.AllLightOff()
    End Sub

    Private Sub bgwDoUpdateRecipeWizard_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bgwDoUpdateRecipeWizard.DoWork
        Dim bRes As Boolean = xMakeRecipeWizard.UpdateRecipe(bgwDoUpdateRecipeWizard, e)
        e.Result = bRes
    End Sub
    Private Sub bgwDoUpdateRecipeWizard_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bgwDoUpdateRecipeWizard.RunWorkerCompleted

        mnu.ActivateMenuSuspended()
        If e.Result Then
            VisInfoOp(xTextsManag.GetUserInfosText("WizRecipeUpdated") & ": " & xMakeRecipeWizard.RecipeToUpdate.IdRecipe, ForeColorForMsgWarning)
        Else
            VisInfoOp(xTextsManag.GetUserInfosText("WizRecipeNotUpdated"), ForeColorForMsgNok)
        End If

        xInOut.AllLightOff()
    End Sub



#End Region

#Region " bgwDoInternalCameraAlignWizard "
    Private Sub bgwDoInternalCameraAlignWizard_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bgwDoInternalCameraAlignWizard.DoWork
        Dim bRes As Boolean = False

        xCameraAlignWizard = New CameraAlignWizard
        If xCameraAlignWizNavigator.Navigate Then
            e.Result = True
        Else
            e.Result = False
        End If


    End Sub
    Private Sub bgwDoInternalCameraAlignWizard_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bgwDoInternalCameraAlignWizard.RunWorkerCompleted

        mnu.ActivateMenuSuspended()
        lblTestResult.Text = ""

        InternalCameraAlignRunning = False
        xInOut.AllLightOff()
    End Sub

#End Region

#Region " bgwDoSetCameraReferenceWizard "
    Private Sub bgwDoSetCameraReferenceWizard_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bgwDoSetCameraReference.DoWork
        Dim bRes As Boolean = False

        If xCameraReference.SetCameraReferenceNavigate Then
            e.Result = True
        Else
            e.Result = False
        End If


    End Sub
    Private Sub bgwDoSetCameraReferenceWizard_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bgwDoSetCameraReference.RunWorkerCompleted

        mnu.ActivateMenuSuspended()
        lblTestResult.Text = ""

        SetCameraReferenceRunning = False
        xInOut.AllLightOff()
    End Sub

#End Region

#Region " bgwDoCheckCameraReferencen"
    Private Sub bgwDoCheckCameraReferencenWizard_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bgwDoCheckCameraReferencen.DoWork
        Dim bRes As Boolean = False

        If xCameraReference.CheckCameraReferenceNavigate Then
            e.Result = True
        Else
            e.Result = False
        End If


    End Sub
    Private Sub bgwDoCheckCameraReferencenWizard_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bgwDoCheckCameraReferencen.RunWorkerCompleted

        mnu.ActivateMenuSuspended()
        lblTestResult.Text = ""

        CheckCameraReferenceRunning = False
        xInOut.AllLightOff()
    End Sub

#End Region

#Region " bgwDoRecipeEdit"
    Private Sub bgwDoRecipeEdit_DoWork(ByVal sender As Object, ByVal e As System.ComponentModel.DoWorkEventArgs) Handles bgwDoRecipeEdit.DoWork
        Dim bRes As Boolean = False

        Dim frm As New frmRecipeList
        ShowForm(frm)
        frm.Dispose()
        frm = Nothing

    End Sub
    Private Sub bgwDoRecipeEdit_RunWorkerCompleted(ByVal sender As Object, ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs) Handles bgwDoRecipeEdit.RunWorkerCompleted

        mnu.ActivateMenuSuspended()

        'Read model
        Dim myModel As New Model(0, False)
        xInOut.InitIO(xInOutConfig, myModel.Wiring, myModel.Igniction, myModel.Electric.DiagnosticByEcu.AnalogInputName)

        xLightFuncs = New LasCore.LightFunctions(SetLightFunctionsClassParams(myModel, xEcu, xAppConfig.Params.LightFuncs))

        'Iniz Vcc
        xInOut.SetVcc(myModel.Electric.Absortion.VoltageSupply.Value)

        If IsNothing(xEcu) Then
        Else
            xEcu.LastLampSideTested = "?"
        End If
        SetxEcu(myModel)

        xLightFuncs = New LasCore.LightFunctions(SetLightFunctionsClassParams(myModel, xEcu, xAppConfig.Params.LightFuncs))

    End Sub

#End Region




#End Region

#Region "Events from PLC"
    Private Sub Plc_ReadPlcDone(ByVal sender As Object, ByVal DataRead() As Byte, ByVal Result As Integer, ByVal PlcComItem As ePlc.udtComItem) Handles Plc.ReadPlcDone
        If PlcComItem.Name = "InterfaceRead" Then
            xFromPlc.DataAnalysis(DataRead, xAppConfig.Params.PLCs(0).InterfaceVersion)
            Call xToPlc.SetMsgToPlc(plcCnf.PlcArea("InterfaceWrite").qtaW * 2)
            Plc.SetWriteRequest(xToPlc.ByteToPlc, "InterfaceWrite")
        End If
    End Sub

    Private Sub Plc_WritePlcDone(ByVal sender As Object, ByVal DataWrote() As Byte, ByVal Result As Integer, ByVal PlcComItem As ePlc.udtComItem) Handles Plc.WritePlcDone
        Dim i As Integer = 0

    End Sub

    Private Sub KeepAlivePlc() Handles tmrKeepAlivePlc.Tick
        Call xToPlc.SetMsgToPlc(plcCnf.PlcArea("InterfaceWrite").qtaW * 2)
        Plc.SetWriteRequest(xToPlc.ByteToPlc, "InterfaceWrite")
    End Sub
    Private Sub AnalisiDatiFromPlc() Handles tmrFromPlc.Tick

        If Not InitializationDone Then Return

        If Plc.Disabled Or Not Plc.ConnectionOk Then
            If AutoMode Then
                mnu.ShowMenu("Login")
                AutoMode = False
            End If
            Return
        End If


        RePrintManagement()

        AutoManManagement()

        ScredriversInsertion()

        AbortCycleManagement()

        ''''''

        If xFromPlc.ParamsChangeDone Then
            xToPlc.ParamsChanged = False
        End If

        'Master
        xToPlc.MasterRequired = xToPlc.MasterRequired Or ucMasterMonitor.CycleMasterRequired

        If AutoMode Then
            If xFromPlc.ReadHousingCodeReq Then
                StartReadHousingCycle()
            End If

            If xFromPlc.PrintHousingCodeReq Then
                StartPrintLabel()
            End If

            If xFromPlc.StartCycleReq Then
                If Not xToPlc.CycleRunning And Not xToPlc.CycleDone Then
                    xToPlc.CycleRunning = True
                    'Start cycle
                    lblTestResult.Text = xTextsManag.GetUserInfosText("TestRunning")
                    lblTestResult.ForeColor = ForeColorForMsgStd
                    xTest.PieceIsMaster = xFromPlc.CycleMaster
                    xTest.WorkingCounter = xFromPlc.WorkingCounter
                    xTest.CapabilityCycleInProgress = False

                    If xFromPlc.CycleMaster Then
                        RunCycle()
                    Else
                        If xAppConfig.Params.ModelFromBCR And xAppConfig.IsAnyBcrEnabled Then
                            RunCycle()
                        Else
                            'Dim ModelRequested As New Model(xFromPlc.IdRecipeToRun)
                            If ucMasterMonitor.IsCycleMasterRequired(xFromPlc.IdRecipeToRun) Then
                                'Error - Master required
                                lblTestResult.Text = xTextsManag.GetUserInfosText("CycleMasterRequired")
                                lblTestResult.ForeColor = ForeColorForMsgNok
                                xToPlc.TestResult = xToPlc.SetTestResults(Test.enumFailureCode.MasterReuqired, xFromPlc.PieceCode, xFromPlc.IdRecipeToRun)
                                xToPlc.TestFailed = True
                                xToPlc.TestPassed = False
                                xToPlc.CycleDone = True
                                xToPlc.MasterRequired = True
                                xToPlc.CycleRunning = False
                            Else
                                RunCycle()
                            End If
                        End If
                    End If
                End If
            End If

            If Not xFromPlc.StartCycleReq And Not xFromPlc.ReadHousingCodeReq Then
                If Not xToPlc.CycleRunning Then
                    xToPlc.CycleDone = False
                    xToPlc.TestFailed = False
                    xToPlc.TestPassed = False
                    xToPlc.HousingWorkable = False
                    xToPlc.PieceIsMaster = False
                    '  xToPlc.Anomaly = False
                End If
            End If
        End If





    End Sub

    Private Sub RunCycle()

        If xAppConfig.Params.ModelFromBCR And xAppConfig.IsAnyBcrEnabled Then
            xToPlc.TestResult = xToPlc.SetTestResults(Test.enumFailureCode.None, xFromPlc.PieceCode, "")
            xToPlc.TestFailed = False
            xToPlc.TestPassed = False
            xToPlc.CycleDone = False
            '   xToPlc.Anomaly = False
            If Not bgwDoReadLabels.IsBusy Then
                bgwInProgress = bgwDoReadLabels
                bgwDoReadLabels.RunWorkerAsync("DoTest")
            End If
        Else

            If xAppConfig.Params.PLCs(0).ModelByPieceCode Then
                Dim IsMaster As Boolean = False
                Dim IdRecipe As Integer = ResPublic.GetIdRecipeFromPieceCode(xFromPlc.PieceCode, IsMaster)
                If IdRecipe <> 0 Then
                    If xTest.InitTest(Test.enumTestType.Complete, xFromPlc.IdRecipeToRun, xFromPlc.PieceCode, xFromPlc.DmcMainCode, xFromPlc.DmcDeviceableCode) Then
                        xToPlc.TestResult = xToPlc.SetTestResults(Test.enumFailureCode.None, xFromPlc.PieceCode, "")
                        xToPlc.TestFailed = False
                        xToPlc.TestPassed = False
                        xToPlc.CycleDone = False
                        '   xToPlc.Anomaly = False
                        bgwInProgress = bgwDoCompleteTest
                        bgwDoCompleteTest.RunWorkerAsync("DoTest")
                    Else
                        'Error - 
                        lblTestResult.Text = xTest.Results.Message
                        lblTestResult.ForeColor = xTest.Results.MessageColor
                        xToPlc.TestResult = xToPlc.SetTestResults(xTest.Results.Value, xFromPlc.PieceCode, xFromPlc.IdRecipeToRun)
                        xToPlc.TestFailed = True
                        xToPlc.TestPassed = False
                        xToPlc.CycleDone = True
                        xToPlc.CycleRunning = False
                    End If
                Else
                    'Error -
                    lblTestResult.Text = xTest.Results.Message
                    lblTestResult.ForeColor = xTest.Results.MessageColor
                    xToPlc.TestResult = xToPlc.SetTestResults(xTest.Results.Value, xFromPlc.PieceCode, xFromPlc.IdRecipeToRun)
                    xToPlc.TestFailed = True
                    xToPlc.TestPassed = False
                    xToPlc.CycleDone = True
                    xToPlc.CycleRunning = False
                End If

            Else

                If xTest.InitTest(Test.enumTestType.Complete, xFromPlc.IdRecipeToRun, xFromPlc.PieceCode, xFromPlc.DmcMainCode, xFromPlc.DmcDeviceableCode) Then
                    xToPlc.TestResult = xToPlc.SetTestResults(Test.enumFailureCode.None, xFromPlc.PieceCode, "")
                    xToPlc.TestFailed = False
                    xToPlc.TestPassed = False
                    xToPlc.CycleDone = False
                    '  xToPlc.Anomaly = False
                    bgwInProgress = bgwDoCompleteTest
                    bgwDoCompleteTest.RunWorkerAsync("DoTest")
                Else
                    'Error - 
                    lblTestResult.Text = xTest.Results.Message
                    lblTestResult.ForeColor = xTest.Results.MessageColor
                    xToPlc.TestResult = xToPlc.SetTestResults(xTest.Results.Value, xFromPlc.PieceCode, xFromPlc.IdRecipeToRun)
                    xToPlc.TestFailed = True
                    xToPlc.TestPassed = False
                    xToPlc.CycleDone = True
                    xToPlc.CycleRunning = False
                End If
            End If


        End If


    End Sub

    Private Sub StartReadHousingCycle()
        If xAppConfig.IsAnyBcrEnabled Then
            If Not xToPlc.CycleRunning And Not xToPlc.CycleDone Then
                xToPlc.CycleRunning = True
                xToPlc.TestResult = xToPlc.SetTestResults(Test.enumFailureCode.None, xFromPlc.PieceCode, "")
                xToPlc.TestFailed = False
                xToPlc.TestPassed = False
                xToPlc.CycleDone = False
                If Not bgwDoReadLabels.IsBusy Then
                    bgwInProgress = bgwDoReadLabels
                    bgwDoReadLabels.RunWorkerAsync("DoTest")
                End If
            End If
        Else
            'Error - No barcode readers
            lblTestResult.Text = xTextsManag.GetUserInfosText("NoBcrs")
            lblTestResult.ForeColor = ForeColorForMsgNok
            xToPlc.TestResult = xToPlc.SetTestResults(Test.enumFailureCode.NoBarcodeReaders, xFromPlc.PieceCode, xFromPlc.IdRecipeToRun)
            xToPlc.TestFailed = True
            xToPlc.TestPassed = False
            xToPlc.CycleDone = True
            xToPlc.MasterRequired = False
            xToPlc.CycleRunning = False
        End If
    End Sub

    Private Sub StartPrintLabel()
        If xAppConfig.IsAnyPrinterEnabled Then
            If Not xToPlc.CycleRunning And Not xToPlc.CycleDone Then
                xToPlc.CycleRunning = True
                xToPlc.TestResult = xToPlc.SetTestResults(Test.enumFailureCode.None, xFromPlc.PieceCode, "")
                xToPlc.TestFailed = False
                xToPlc.TestPassed = False
                xToPlc.CycleDone = False
                If Not bgwDoPrintLabels.IsBusy Then
                    bgwInProgress = bgwDoPrintLabels
                    bgwDoPrintLabels.RunWorkerAsync("DoTest")
                End If
            End If
        Else
            'Error - No barcode readers
            lblTestResult.Text = xTextsManag.GetUserInfosText("NoPrinters")
            lblTestResult.ForeColor = ForeColorForMsgNok
            xToPlc.TestResult = xToPlc.SetTestResults(Test.enumFailureCode.NoPrinters, xFromPlc.PieceCode, xFromPlc.IdRecipeToRun)
            xToPlc.TestFailed = True
            xToPlc.TestPassed = False
            xToPlc.CycleDone = True
            xToPlc.MasterRequired = False
            xToPlc.CycleRunning = False
        End If
    End Sub

    Private Sub ScredriversInsertion()
        For Each item As LasCore.Screwdrivers.udtConfigData.udtScrewDriver In xScrewdrivers.ConfigData.Screwdrivers
            If xFromPlc.InsertingScrewdriverReq(item.MtrAddress) Then
                If Not item.InsertionInProgress Then
                    xScrewdrivers.StartScrewdriver(item.Name, Screwdrivers.enumRotation.ClockWise, Screwdrivers.enumSpeed.Aiming)
                End If
                item.InsertionInProgress = True
            Else
                If item.InsertionInProgress Then
                    xScrewdrivers.StopScrewdriver(item.Name)
                End If
                item.InsertionInProgress = False
            End If
        Next
    End Sub

    Private Sub AbortCycleManagement()
        If xFromPlc.AbortCycleReq Then
            If xTest.AbortTestInProgress Then
            Else
                If bgwDoCompleteTest.IsBusy Then
                    xTest.AbortTest(bgwDoCompleteTest)
                ElseIf bgwDoReadLabels.IsBusy Then
                    xTest.AbortTest(bgwDoReadLabels)
                ElseIf bgwDoPrintLabels.IsBusy Then
                    xTest.AbortTest(bgwDoPrintLabels)
                Else
                    xToPlc.AbortCycleDone = True
                End If
            End If
            Return
        Else
            xTest.AbortTestInProgress = False
            xToPlc.AbortCycleDone = False
        End If
    End Sub

    Private Sub AutoManManagement()
        If xFromPlc.AutoModeReq And xToPlc.Ready Then
            If Not AutoMode Then
                xDataStorage.AddEvent("System", "Logout" & " " & xUsers.UserLogged.Name & ": byPLC", "")
                xUsers.Logout()
                Logout()
                mnu.SuspendMenu()
                AutoMode = True
            End If
            xToPlc.Ready = True
        End If

        If xFromPlc.ManModeReq Then
            If AutoMode Then
                mnu.ShowMenu("Login")
                AutoMode = False
            End If
            xToPlc.TestFailed = False
            xToPlc.TestPassed = False
            xToPlc.CycleDone = False
            xToPlc.CycleRunning = False
        End If

        xToPlc.ManModeAck = Not AutoMode
        xToPlc.AutoModeAck = AutoMode
    End Sub

    Private Sub RePrintManagement()
        If xFromPlc.RePrintReq Then
            If ReprintReq Then
            Else
                ReprintReq = True
                xPrinterHousingLabel.RePrintLabel()
            End If
        Else
            ReprintReq = False
        End If
    End Sub

#End Region

#Region "Events from BCR"
    Private Sub Bcr_ReadBarcodeDone(ByVal sender As Object, ByVal BarcodeRead As String, ByVal Result As Integer) Handles myBcr.ReadBarcodeDone

        If xAppConfig.IsAnyBcrEnabled Then
            If xAppConfig.Params.ModelFromBCR Then

            End If

            xLastBarcodeRead = BarcodeRead
        End If


    End Sub
#End Region

#Region "Camera"

    Private Sub CameraEventHandler(ByVal sender As Object, ImageBmp As Bitmap)

        If IsNothing(ImageBmp) Then Return

        Dim cam As LasCore.Icamera = xCameraManagement.GetCamera(sender.Config.CameraId)
        If IsNothing(cam) Then Return
        If (picImageCamera.InvokeRequired) Then
            '  Console.WriteLine(Threading.Thread.CurrentThread.ManagedThreadId)
            ' If called from a different thread, we must use the Invoke method to marshal the call to the proper thread. 
            picImageCamera.Invoke(New Action(Of Object, Bitmap)(AddressOf CameraEventHandler), sender, ImageBmp)
        Else

            If cam.ViewIsolux Then
                Try
                    BmpShown = ImageBmp.Clone
                    xCameraManagement.Isolux(BmpShown)
                    DrawOnBitmap(BmpShown)
                    picImageCamera.Image = BmpShown
                Catch ex As Exception

                End Try
                ' picImageCamera.Image = ImageBmp
                ''Dim thres As New AForge.Imaging.Filters.Threshold(100)
                'Dim thres As New AForge.Imaging.Filters.SISThreshold()
                'Dim bmpWB As Bitmap = thres.Apply(BmpShown)

                'Dim sobel As New AForge.Imaging.Filters.SobelEdgeDetector()
                'Dim cloneBitmap As Bitmap = sobel.Apply(BmpShown)
                'picImageCamera.Image = cloneBitmap

            Else
                Try
                    If cam.Config.BlackAndWhite Then
                        Dim GrayToRGB As New AForge.Imaging.Filters.GrayscaleToRGB()
                        BmpShown = GrayToRGB.Apply(ImageBmp)
                    Else
                        BmpShown = ImageBmp
                    End If
                    DrawOnBitmap(BmpShown)
                    picImageCamera.Image = BmpShown


                    'picCustomer.Image = BmpShown

                    ' picImageCamera.Image = Nothing
                    'picImageCamera.Refresh()
                    '  picImageCamera = New PictureBox
                Catch ex As Exception
                End Try
                '  picImageCamera.Image = Image.FromFile("C:\LampsAimingSystem\Data\LogoCizeta.jpg")
                ' picImageCamera.Image.Save("C:\LampsAimingSystem\Data\Images\a.bmp", System.Drawing.Imaging.ImageFormat.Bmp)
            End If


            ShowGrabTime(GrabTime.ElapsedMilliseconds)
            GrabTime.Start()
        End If

    End Sub

    Private Sub DrawOnBitmap(Bmp As Bitmap)


        If InternalCameraAlignRunning Then
            xDrawsOnLive.DrawCalibrationLines(Bmp)



        ElseIf CheckCameraReferenceRunning Then
            If xCameraReference.CheckReference.CheckingKP Then
                xDrawsOnLive.DrawTarget(Bmp, xPatternManag.Pattern.KinkPoint.X, xPatternManag.Pattern.KinkPoint.Y, Color.Yellow)
                If xCameraReference.CheckReference.ActualKP.Found Then
                    xDrawsOnLive.DrawCross(Bmp, xCameraReference.CheckReference.ActualKP.X, xCameraReference.CheckReference.ActualKP.Y, Color.Gold)
                End If
            End If

            'If xCameraReference.CheckReference.CheckingHV Then
            '    Dim pat As New Recipe.udtLampShape
            '    pat.RHD = xCameraReference.CheckReference.RHD
            '    pat.SiteSlope = 0
            '    pat.AzimSlope = xCameraReference.CheckReference.AzimSlope
            '    pat.StepSlope = 0
            '    pat.StepHeight = 0
            '    Dim DistanceHvHcVer As Single = 0.57
            '    xDrawsOnLive.DrawReferenceHV(Bmp, New AForge.IntPoint(xCameraReference.CheckReference.HV.X, xCameraReference.CheckReference.HV.Y), pat, -DistanceHvHcVer)
            '    xDrawsOnLive.DrawTarget(Bmp, xCameraReference.CheckReference.ReferenceHC.X, xCameraReference.CheckReference.ReferenceHC.Y, Color.Yellow)
            '    If xCameraReference.CheckReference.ActualHC.Found Then
            '        xDrawsOnLive.DrawCross(Bmp, xCameraReference.CheckReference.ActualHC.X, xCameraReference.CheckReference.ActualHC.Y, Color.Gold)
            '    End If
            'End If
            If Not xCameraReference.CheckReference.ReferenceHotSpot.IsEmpty Then
                xDrawsOnLive.DrawTarget(Bmp, xCameraReference.CheckReference.ReferenceHotSpot.X, xCameraReference.CheckReference.ReferenceHotSpot.Y, Color.LightBlue)
                If xCameraReference.CheckReference.ActualHotSpot.Found Then
                    xDrawsOnLive.DrawCross(Bmp, xCameraReference.CheckReference.ActualHotSpot.X, xCameraReference.CheckReference.ActualHotSpot.Y, Color.Blue)
                End If
            End If
            If Not xCameraReference.CheckReference.ReferenceMaxGrad1.IsEmpty Then
                xDrawsOnLive.DrawTarget(Bmp, xCameraReference.CheckReference.ReferenceMaxGrad1.X, xCameraReference.CheckReference.ReferenceMaxGrad1.Y, Color.OrangeRed)
                xDrawsOnLive.DrawTarget(Bmp, xCameraReference.CheckReference.ReferenceMaxGrad2.X, xCameraReference.CheckReference.ReferenceMaxGrad2.Y, Color.OrangeRed)
                If xCameraReference.CheckReference.MaxGrad1.Found Then
                    xDrawsOnLive.DrawCross(Bmp, xCameraReference.CheckReference.MaxGrad1.X, xCameraReference.CheckReference.MaxGrad1.Y, Color.Red)
                End If
                If xCameraReference.CheckReference.MaxGrad2.Found Then
                    xDrawsOnLive.DrawCross(Bmp, xCameraReference.CheckReference.MaxGrad2.X, xCameraReference.CheckReference.MaxGrad2.Y, Color.Red)
                End If
            End If

            If Not xCameraReference.CheckReference.ReferenceCenterArea1.IsEmpty Then
                xDrawsOnLive.DrawTarget(Bmp, xCameraReference.CheckReference.ReferenceCenterArea1.X, xCameraReference.CheckReference.ReferenceCenterArea1.Y, Color.DeepSkyBlue)
                If xCameraReference.CheckReference.CenterArea1.Found Then
                    xDrawsOnLive.DrawCross(Bmp, xCameraReference.CheckReference.CenterArea1.X, xCameraReference.CheckReference.CenterArea1.Y, Color.BlueViolet)
                End If
                For Each item As AForge.IntPoint In xCameraReference.CheckReference.ReferenceCornersArea1
                    xDrawsOnLive.DrawCross(Bmp, item.X, item.Y, Color.DeepSkyBlue, 3)
                Next
                For Each item As AForge.IntPoint In xCameraReference.CheckReference.CornersArea1
                    xDrawsOnLive.DrawCross(Bmp, item.X, item.Y, Color.BlueViolet, 3)
                Next
            End If
            If Not xCameraReference.CheckReference.ReferenceCenterArea2.IsEmpty Then
                xDrawsOnLive.DrawTarget(Bmp, xCameraReference.CheckReference.ReferenceCenterArea2.X, xCameraReference.CheckReference.ReferenceCenterArea2.Y, Color.DeepSkyBlue)
                If xCameraReference.CheckReference.CenterArea2.Found Then
                    xDrawsOnLive.DrawCross(Bmp, xCameraReference.CheckReference.CenterArea2.X, xCameraReference.CheckReference.CenterArea2.Y, Color.BlueViolet)
                End If
                For Each item As AForge.IntPoint In xCameraReference.CheckReference.ReferenceCornersArea2
                    xDrawsOnLive.DrawCross(Bmp, item.X, item.Y, Color.DeepSkyBlue, 3)
                Next
                For Each item As AForge.IntPoint In xCameraReference.CheckReference.CornersArea2
                    xDrawsOnLive.DrawCross(Bmp, item.X, item.Y, Color.BlueViolet, 3)
                Next
            End If

            'ElseIf xMakeRecipeWizard.WizData.HV.SettingHV Then
            'Dim pat As New Recipe.udtLampShape
            'pat.RHD = xMakeRecipeWizard.WizData.LowBeamShape.RHD
            'pat.SiteSlope = xMakeRecipeWizard.WizData.LowBeamShape.SiteSlope
            'pat.AzimSlope = xMakeRecipeWizard.WizData.LowBeamShape.AzimSlope
            'pat.StepSlope = xMakeRecipeWizard.WizData.LowBeamShape.StepSlope
            'pat.StepHeight = xMakeRecipeWizard.WizData.LowBeamShape.StepHeight
            '' xDrawsOnLive.DrawReferenceHV(Bmp, New AForge.IntPoint(xMakeRecipeWizard.WizData.HV.NewHV.X, xMakeRecipeWizard.WizData.HV.NewHV.Y),
            ''                              pat, xMakeRecipeWizard.WizData.Geometry.LowBeamCutoff.MasterVertPos)
            'xDrawsOnLive.DrawReferenceHV(Bmp, New AForge.IntPoint(xMakeRecipeWizard.WizData.HV.NewHV.X, xMakeRecipeWizard.WizData.HV.NewHV.Y),
            '                             pat, -xMakeRecipeWizard.WizData.LowBeamShape.DistanceHvHcVer)

        ElseIf (xTest.AimingHoriDirection <> cNoDirection) Or (xTest.AimingVertDirection <> cNoDirection) Then
            xDrawsOnLive.DrawAimingDirection(Bmp, xTest.AimingVertDirection, xTest.AimingHoriDirection, xTest.FastRotationVert, xTest.FastRotationHori,
                                             xTest.AimingRecipeWnd.Rect, xTest.AimingWnd.Rect, xTest.AimingPoint.X, xTest.AimingPoint.Y)

        ElseIf Not IsNothing(xTest.PointToShow) Then

            xDrawsOnLive.DrawAimingPoint(Bmp, xTest.PointToShow.X, xTest.PointToShow.Y)

        End If




    End Sub

    Private Sub CameraErrorHandler(ByVal sender As Object, grabException As Exception, additionalErrorMessage As String)

        Dim cam As LasCore.Icamera = xCameraManagement.GetCamera(sender.Config.CameraId)
        If IsNothing(cam) Then Return

        xDataStorage.AddEvent("Camera" & cam.Config.CameraId, "Camera error", grabException.Message & " - " & additionalErrorMessage)
        ' xRestartCamerasRequest = 1

    End Sub

    Private Sub CameraSupplyOffHandler(ByVal sender As Object)

        Dim cam As LasCore.Icamera = xCameraManagement.GetCamera(sender.Config.CameraId)
        If IsNothing(cam) Then Return

        xDataStorage.AddEvent("Camera" & cam.Config.CameraId, "Camera supply OFF", "")


    End Sub
    Private Sub CameraSupplyRestoredHandler(ByVal sender As Object)

        Dim cam As LasCore.Icamera = xCameraManagement.GetCamera(sender.Config.CameraId)
        If IsNothing(cam) Then Return

        xDataStorage.AddEvent("Camera" & cam.Config.CameraId, "Camera supply restored", "")

    End Sub



    Private Delegate Sub ShowGrabTimeCallback(ByVal PieceCode As String)
    Private Sub ShowGrabTime(ByVal GrabTime As Integer)

        Try
            Dim msg As String = "Grab time: " & GrabTime & " ms"
            If GrabTime = -1 Then
                msg = ""
            End If
            If ucpanCamera.InvokeRequired Then
                Dim d As New ShowGrabTimeCallback(AddressOf ShowGrabTime)
                Me.Invoke(d, New Object() {GrabTime})
            Else
                ucpanCamera.GrabTime = msg
            End If
        Catch ex As Exception

        End Try

    End Sub


    Private Function StartCameras() As String

        'Cameras
        Dim ErrMsg As String = ""
        Dim iRet As Integer = 0
        Do
            ErrMsg = ""
            xCameraManagement = New LasCore.CameraManagement(xGlobals.DataPath & "CamerasConfig.xml")
            ErrMsg = xCameraManagement.Open(picImageCamera, xAppConfig.Params.NoCamera)
            If ErrMsg = "" Then Exit Do
            If iRet >= 1 Then Exit Do
            If System.Diagnostics.Debugger.IsAttached Then
                MsgBox(ErrMsg)
            End If
            SplashScreen.lblProgress.Text = "Cameras re-booting...."
            xCameraManagement.Close()
            Application.DoEvents()
            xInOut.CamerasOff(cON)
            Threading.Thread.Sleep(5000)
            xInOut.CamerasOff(cOFF)
            Threading.Thread.Sleep(xAppConfig.Params.SwitchRestartDelay)
            iRet += 1
        Loop

        If ErrMsg = "" Then
            For Each cam As LasCore.Icamera In xCameraManagement.CameraList
                AddHandler cam.ImageGrabbed, AddressOf CameraEventHandler
                AddHandler cam.RefreshImage, AddressOf CameraEventHandler
                AddHandler cam.GrabError, AddressOf CameraErrorHandler
                AddHandler cam.CameraSupplyOff, AddressOf CameraSupplyOffHandler
                AddHandler cam.CameraSupplyRestored, AddressOf CameraSupplyRestoredHandler
            Next
            Return ""
        Else
            Return ErrMsg
        End If

    End Function


    Private Sub tmrCameraRestart_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles tmrCameraRestart.Tick
        Static isRunning As Boolean = False
        If isRunning Then Return
        isRunning = True

        If Not xCameraManagement.CamerasSupplyOn Then
            xToPlc.Ready = False
        End If

        If xCameraManagement.RestartCamerasRequest Then
            xCameraManagement.RestartCamerasRequest = False
            Threading.Thread.Sleep(1000)
            Dim res As String = ReStartCameras()
            xDataStorage.AddEvent("System", "Cameras restart", "Camera supply restored")
            If res = "" Then
                xToPlc.Ready = True
            Else
                xToPlc.Ready = False
                Dim sMsg As String = "Cameras restart failed!" & vbCrLf & "LAS must be restarted." & vbCrLf & "Sorry for the inconvenience."
                MsgBox(sMsg, MsgBoxStyle.Critical + MsgBoxStyle.OkOnly)
                xDataStorage.AddEvent("System", "Cameras restart failed", res)
            End If
        End If

        'If xRestartCamerasRequest = 1 Then
        '    Dim res As String = ReStartCameras()
        '    If res = "" Then
        '        xRestartCamerasRequest = 0
        '    Else
        '        xRestartCamerasRequest = -1
        '        Dim sMsg As String = "Cameras restart failed!" & vbCrLf & "LAS must be restarted." & vbCrLf & "Sorry for the inconvenience."
        '        MsgBox(sMsg, MsgBoxStyle.Critical + MsgBoxStyle.OkOnly)
        '        xDataStorage.AddEvent("System", "Cameras restart failed", res)
        '    End If
        'End If

        isRunning = False

    End Sub

    Private Function ReStartCameras() As String

        xCameraManagement.Close()

        Application.DoEvents()
        Threading.Thread.Sleep(1000)
        xInOut.CamerasOff(cON)
        Threading.Thread.Sleep(5000)
        xInOut.CamerasOff(cOFF)
        Threading.Thread.Sleep(xAppConfig.Params.SwitchRestartDelay)

        Dim ErrMsg As String = ""
        Dim iRet As Integer = 0
        Do
            ErrMsg = ""
            xCameraManagement = New LasCore.CameraManagement(xGlobals.DataPath & "CamerasConfig.xml")
            ErrMsg = xCameraManagement.Open(picImageCamera, xAppConfig.Params.NoCamera)
            If ErrMsg = "" Then Exit Do
            If iRet >= 1 Then Exit Do
            If System.Diagnostics.Debugger.IsAttached Then
                MsgBox(ErrMsg)
            End If
            xCameraManagement.Close()
            Application.DoEvents()
            xInOut.CamerasOff(cON)
            Threading.Thread.Sleep(5000)
            xInOut.CamerasOff(cOFF)
            Threading.Thread.Sleep(xAppConfig.Params.SwitchRestartDelay)
            iRet += 1
        Loop

        If ErrMsg = "" Then
            For Each cam As LasCore.Icamera In xCameraManagement.CameraList
                AddHandler cam.ImageGrabbed, AddressOf CameraEventHandler
                AddHandler cam.RefreshImage, AddressOf CameraEventHandler
                AddHandler cam.GrabError, AddressOf CameraErrorHandler
                AddHandler cam.CameraSupplyOff, AddressOf CameraSupplyOffHandler
                AddHandler cam.CameraSupplyRestored, AddressOf CameraSupplyRestoredHandler
            Next
            Return ""
        Else
            Return ErrMsg
        End If

    End Function


#End Region

#Region "Mouse"

    Private Sub picImageCamera0_MouseClick(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles picImageCamera.MouseClick
        If Not InitializationDone Then Return
        xPicImageCameraMouseEvents.RaiseMouseClick(sender, e, BmpShown)

        If InternalCameraAlignRunning Then
            Select Case xCameraAlignWizard.ClickStage
                Case CameraAlignWizard.enumClickStage.Center  'upperLeft
                    xCameraAlignWizard.ActualCamera.Center = New Point(e.X, e.Y)
                    xCameraAlignWizard.ClickStage = CameraAlignWizard.enumClickStage.UpperLeft

                Case CameraAlignWizard.enumClickStage.UpperLeft  'upperLeft
                    xCameraAlignWizard.ActualCamera.UpperLeft = New Point(e.X, e.Y)
                    xCameraAlignWizard.ClickStage = CameraAlignWizard.enumClickStage.LowerLeft

                Case CameraAlignWizard.enumClickStage.LowerLeft  'LowerLeft
                    xCameraAlignWizard.ActualCamera.LowerLeft = New Point(e.X, e.Y)
                    xCameraAlignWizard.ClickStage = CameraAlignWizard.enumClickStage.LowerRight

                Case CameraAlignWizard.enumClickStage.LowerRight  'LowerRight
                    xCameraAlignWizard.ActualCamera.LowerRight = New Point(e.X, e.Y)
                    xCameraAlignWizard.ClickStage = CameraAlignWizard.enumClickStage.UpperRight

                Case CameraAlignWizard.enumClickStage.UpperRight  'UpperRight
                    xCameraAlignWizard.ActualCamera.UpperRight = New Point(e.X, e.Y)
                    xCameraAlignWizard.ClickStage = CameraAlignWizard.enumClickStage.LeftAlign
                    If xCameraManagement.ActiveCameraId = LasCore.CameraManagement.enumCameraId.CameraCentral Then
                        xCameraAlignWizard.ClickStage = CameraAlignWizard.enumClickStage.LeftAlign
                    ElseIf xCameraManagement.ActiveCameraId = LasCore.CameraManagement.enumCameraId.CameraRight Then
                        xCameraAlignWizard.ClickStage = CameraAlignWizard.enumClickStage.LeftAlign
                    ElseIf xCameraManagement.ActiveCameraId = LasCore.CameraManagement.enumCameraId.CameraLeft Then
                        xCameraAlignWizard.ClickStage = CameraAlignWizard.enumClickStage.RightAlign
                    ElseIf xCameraManagement.ActiveCameraId = LasCore.CameraManagement.enumCameraId.CameraSideLeft Then
                        xCameraAlignWizard.ClickStage = CameraAlignWizard.enumClickStage.SideLeftAlign
                    ElseIf xCameraManagement.ActiveCameraId = LasCore.CameraManagement.enumCameraId.CameraSideRight Then
                        xCameraAlignWizard.ClickStage = CameraAlignWizard.enumClickStage.SideRightAlign
                    End If

                Case CameraAlignWizard.enumClickStage.LeftAlign  'LeftAlign
                    xCameraAlignWizard.ActualCamera.LeftAlign = New Point(e.X, e.Y)
                    xCameraAlignWizard.ClickStage = CameraAlignWizard.enumClickStage.RightAlign
                    If xCameraManagement.ActiveCameraId = LasCore.CameraManagement.enumCameraId.CameraRight Then
                        xCameraAlignWizard.ClickStage = CameraAlignWizard.enumClickStage.Last
                    End If

                Case CameraAlignWizard.enumClickStage.RightAlign  'RightAlign
                    xCameraAlignWizard.ActualCamera.RightAlign = New Point(e.X, e.Y)
                    xCameraAlignWizard.ClickStage = CameraAlignWizard.enumClickStage.Last

                Case CameraAlignWizard.enumClickStage.SideLeftAlign  'SideLeftAlign
                    xCameraAlignWizard.ActualCamera.SideLeftAlign = New Point(e.X, e.Y)
                    xCameraAlignWizard.ClickStage = CameraAlignWizard.enumClickStage.Last

                Case CameraAlignWizard.enumClickStage.SideRightAlign  'SodeRightAlign
                    xCameraAlignWizard.ActualCamera.SideRightAlign = New Point(e.X, e.Y)
                    xCameraAlignWizard.ClickStage = CameraAlignWizard.enumClickStage.Last


            End Select
            xCameraAlignWizard.CoordX = e.X
            xCameraAlignWizard.CoordY = e.Y

        End If

    End Sub

    Private Sub picImageCamera0_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles picImageCamera.MouseDown
        If Not InitializationDone Then Return
        xPicImageCameraMouseEvents.RaiseMouseDown(sender, e, BmpShown)

    End Sub

    Private Sub picImageCamera0_MouseMove(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles picImageCamera.MouseMove

        If Not InitializationDone Then Return
        xPicImageCameraMouseEvents.RaiseMouseMove(sender, e, BmpShown)

        Call GetColorAndPosition(e)

    End Sub

    Private Sub picImageCamera0_MouseUp(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles picImageCamera.MouseUp
        If Not InitializationDone Then Return
        xPicImageCameraMouseEvents.RaiseMouseUp(sender, e, BmpShown)

    End Sub

    Private Sub GetColorAndPosition(ByVal e As System.Windows.Forms.MouseEventArgs)

        'Position
        lblCoordX.Text = e.X
        lblCoordY.Text = e.Y

        If IsNothing(xCameraManagement.ActiveCameraName) Then Return

        Try


            If Not IsNothing(BmpShown) Then
                Dim pixelColor As Color = BmpShown.GetPixel(e.X, e.Y)
                lblRed.Text = pixelColor.R
                lblGreen.Text = pixelColor.G
                lblBlue.Text = pixelColor.B
            Else
                lblRed.Text = ""
                lblGreen.Text = ""
                lblBlue.Text = ""
            End If


            If Not xAppConfig.Params.NoCamera Then
                'Dim cam As Icamera = GetCamera(ActiveCameraName)
                Dim cam As LasCore.Icamera = xCameraManagement.GetActiveCamera
                If cam.Config.CameraId = LasCore.CameraManagement.enumCameraId.CameraCentral Or
                    cam.Config.CameraId = LasCore.CameraManagement.enumCameraId.CameraLeft Or
                    cam.Config.CameraId = LasCore.CameraManagement.enumCameraId.CameraRight Then

                    ' If ActiveCameraId = cCameraCentral Or ActiveCameraId = cCameraLeft Or ActiveCameraId = cCameraRight Then
                    Dim pto As New LasCore.Geometry.Point(e.X, e.Y, LastRunningModel.Generic.CoordHV.X, LastRunningModel.Generic.CoordHV.Y, xCameraManagement.GetCamera(cam.Config.CameraId))
                    lblCoordH.Text = Format(pto.H, xAppConfig.Params.DisplayFrmt.Grad)
                    lblCoordV.Text = Format(pto.V, xAppConfig.Params.DisplayFrmt.Grad)

                    'Dim pto1 As New Geometry.Point(630, e.Y, LastRunningModel.Generic.CoordHV, CByte(cam.Config.CameraId))
                    'lblCoordH.Text = Format(pto1.H, xAppConfig.Params.DisplayFrmt.Grad)
                    'lblCoordV.Text = Format(pto1.V, xAppConfig.Params.DisplayFrmt.Grad)
                Else
                    lblCoordH.Text = ""
                    lblCoordV.Text = ""
                End If
            Else
                Dim pto As New LasCore.Geometry.Point(e.X, e.Y, LastRunningModel.Generic.CoordHV, xCameraManagement.GetCamera(LasCore.CameraManagement.enumCameraId.CameraCentral))
                lblCoordH.Text = Format(pto.H, xAppConfig.Params.DisplayFrmt.Grad)
                lblCoordV.Text = Format(pto.V, xAppConfig.Params.DisplayFrmt.Grad)
            End If

        Catch ex As Exception

        End Try

    End Sub

#End Region

#Region "Keyboard"

    Private Sub frmMain_KeyDown(sender As Object, e As KeyEventArgs) Handles Me.KeyDown
        If Not InitializationDone Then Return
        xPicImageCameraKeyboardEvents.RaiseKeyDown(sender, e, BmpShown)
    End Sub


#End Region

#Region "EditElectricalResults"

    Private Sub ViewElectResults_CancelPressed(ByVal sender As LasCore.ucViewElectResults) Handles ucViewElectResultVcc.CancelPressed,
        ucViewElectResultLB.CancelPressed, ucViewElectResultHB.CancelPressed, ucViewElectResultFB.CancelPressed, ucViewElectResultDL.CancelPressed,
        ucViewElectResultPL.CancelPressed, ucViewElectResultSM.CancelPressed, ucViewElectResultTL.CancelPressed, ucViewElectResultCL.CancelPressed

        mnu.ActivateMenuSuspended()
        ViewElectResult_EnableControls(sender.Name, True)

    End Sub

    Private Sub ViewElectResults_EditPressed(ByVal sender As LasCore.ucViewElectResults) Handles ucViewElectResultVcc.EditPressed,
        ucViewElectResultLB.EditPressed, ucViewElectResultHB.EditPressed, ucViewElectResultFB.EditPressed, ucViewElectResultDL.EditPressed,
        ucViewElectResultPL.EditPressed, ucViewElectResultSM.EditPressed, ucViewElectResultTL.EditPressed, ucViewElectResultCL.EditPressed

        mnu.SuspendMenu()
        ViewElectResult_EnableControls(sender.Name, False)

    End Sub

    Private Sub ViewElectResult_SavePressedVcc(ByVal sender As LasCore.ucViewElectResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewElectResultVcc.SavePressed
        mnu.ActivateMenuSuspended()
        ViewElectResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        If xTest.RunningModel.Electric.Absortion.VoltageSupply.Min <> Min Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", "RecipeElect.Absortion.VoltageSupply.Min" & ": " & xTest.RunningModel.Electric.Absortion.VoltageSupply.Min & " --> " & Min)
        End If
        If xTest.RunningModel.Electric.Absortion.VoltageSupply.Max <> Max Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", "RecipeElect.Absortion.VoltageSupply.Max" & ": " & xTest.RunningModel.Electric.Absortion.VoltageSupply.Max & " --> " & Max)
        End If
        xTest.RunningModel.Electric.Absortion.VoltageSupply.Min = Min
        xTest.RunningModel.Electric.Absortion.VoltageSupply.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

    End Sub
    Private Sub ViewElectResult_SavePressedLB(ByVal sender As LasCore.ucViewElectResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewElectResultLB.SavePressed
        mnu.ActivateMenuSuspended()
        ViewElectResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        With xTest.RunningModel.Electric.Absortion.LowBeam
            If .FluxBin.Enabled Then
                Dim BinTableIndex As Integer = RecipeElet.GetBinAbsortionIndex(xTest.Results.PieceCode, cLowBeam, .FluxBin, xTest.FluxBins)
                If BinTableIndex <> -1 Then
                    .FluxBin.BinCodes(BinTableIndex).Min = Min
                    .FluxBin.BinCodes(BinTableIndex).Max = Max
                    UpdateEvents("RecipeElect.Absortion.LowBeam.BinCodes(" & BinTableIndex.ToString & ")", .FluxBin.BinCodes(BinTableIndex), Min, Max)
                End If
            Else
                UpdateEvents("RecipeElect.Absortion.LowBeam", xTest.RunningModel.Electric.Absortion.LowBeam, Min, Max)
                .Min = Min
                .Max = Max
            End If
        End With
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewElectResult_SavePressedHB(ByVal sender As LasCore.ucViewElectResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewElectResultHB.SavePressed
        mnu.ActivateMenuSuspended()
        ViewElectResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        With xTest.RunningModel.Electric.Absortion.HighBeam
            If .FluxBin.Enabled Then
                Dim BinTableIndex As Integer = RecipeElet.GetBinAbsortionIndex(xTest.Results.PieceCode, cHighBeam, .FluxBin, xTest.FluxBins)
                If BinTableIndex <> -1 Then
                    .FluxBin.BinCodes(BinTableIndex).Min = Min
                    .FluxBin.BinCodes(BinTableIndex).Max = Max
                    UpdateEvents("RecipeElect.Absortion.HighBeam.BinCodes(" & BinTableIndex.ToString & ")", .FluxBin.BinCodes(BinTableIndex), Min, Max)
                End If
            Else
                UpdateEvents("RecipeElect.Absortion.HighBeam", xTest.RunningModel.Electric.Absortion.HighBeam, Min, Max)
                .Min = Min
                .Max = Max
            End If
        End With
        'UpdateEvents("RecipeElect.Absortion.HighBeam", xTest.RunningModel.Electric.Absortion.HighBeam, Min, Max)
        'xTest.RunningModel.Electric.Absortion.HighBeam.Min = Min
        'xTest.RunningModel.Electric.Absortion.HighBeam.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewElectResult_SavePressedFB(ByVal sender As LasCore.ucViewElectResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewElectResultFB.SavePressed
        mnu.ActivateMenuSuspended()
        ViewElectResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        With xTest.RunningModel.Electric.Absortion.FogLight
            If .FluxBin.Enabled Then
                Dim BinTableIndex As Integer = RecipeElet.GetBinAbsortionIndex(xTest.Results.PieceCode, cFog, .FluxBin, xTest.FluxBins)
                If BinTableIndex <> -1 Then
                    .FluxBin.BinCodes(BinTableIndex).Min = Min
                    .FluxBin.BinCodes(BinTableIndex).Max = Max
                    UpdateEvents("RecipeElect.Absortion.FogBeam.BinCodes(" & BinTableIndex.ToString & ")", .FluxBin.BinCodes(BinTableIndex), Min, Max)
                End If
            Else
                UpdateEvents("RecipeElect.Absortion.FogBeam", xTest.RunningModel.Electric.Absortion.FogLight, Min, Max)
                .Min = Min
                .Max = Max
            End If
        End With
        'UpdateEvents("RecipeElect.Absortion.FogLight", xTest.RunningModel.Electric.Absortion.FogLight, Min, Max)
        'xTest.RunningModel.Electric.Absortion.FogLight.Min = Min
        'xTest.RunningModel.Electric.Absortion.FogLight.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewElectResult_SavePressedDL(ByVal sender As LasCore.ucViewElectResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewElectResultDL.SavePressed
        mnu.ActivateMenuSuspended()
        ViewElectResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        With xTest.RunningModel.Electric.Absortion.DayLight
            If .FluxBin.Enabled Then
                Dim BinTableIndex As Integer = RecipeElet.GetBinAbsortionIndex(xTest.Results.PieceCode, cDayLight, .FluxBin, xTest.FluxBins)
                If BinTableIndex <> -1 Then
                    .FluxBin.BinCodes(BinTableIndex).Min = Min
                    .FluxBin.BinCodes(BinTableIndex).Max = Max
                    UpdateEvents("RecipeElect.Absortion.DayLight.BinCodes(" & BinTableIndex.ToString & ")", .FluxBin.BinCodes(BinTableIndex), Min, Max)
                End If
            Else
                UpdateEvents("RecipeElect.Absortion.DayLight", xTest.RunningModel.Electric.Absortion.DayLight, Min, Max)
                .Min = Min
                .Max = Max
            End If
        End With
        'UpdateEvents("RecipeElect.Absortion.DayLight", xTest.RunningModel.Electric.Absortion.DayLight, Min, Max)
        'xTest.RunningModel.Electric.Absortion.DayLight.Min = Min
        'xTest.RunningModel.Electric.Absortion.DayLight.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewElectResult_SavePressedPL(ByVal sender As LasCore.ucViewElectResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewElectResultPL.SavePressed
        mnu.ActivateMenuSuspended()
        ViewElectResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        With xTest.RunningModel.Electric.Absortion.ParkLight
            If .FluxBin.Enabled Then
                Dim BinTableIndex As Integer = RecipeElet.GetBinAbsortionIndex(xTest.Results.PieceCode, cParkLight, .FluxBin, xTest.FluxBins)
                If BinTableIndex <> -1 Then
                    .FluxBin.BinCodes(BinTableIndex).Min = Min
                    .FluxBin.BinCodes(BinTableIndex).Max = Max
                    UpdateEvents("RecipeElect.Absortion.ParkLight.BinCodes(" & BinTableIndex.ToString & ")", .FluxBin.BinCodes(BinTableIndex), Min, Max)
                End If
            Else
                UpdateEvents("RecipeElect.Absortion.ParkLight", xTest.RunningModel.Electric.Absortion.ParkLight, Min, Max)
                .Min = Min
                .Max = Max
            End If
        End With
        'UpdateEvents("RecipeElect.Absortion.ParkLight", xTest.RunningModel.Electric.Absortion.ParkLight, Min, Max)
        'xTest.RunningModel.Electric.Absortion.ParkLight.Min = Min
        'xTest.RunningModel.Electric.Absortion.ParkLight.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewElectResult_SavePressedTL(ByVal sender As LasCore.ucViewElectResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewElectResultTL.SavePressed
        mnu.ActivateMenuSuspended()
        ViewElectResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        With xTest.RunningModel.Electric.Absortion.TurnIndicator
            If .FluxBin.Enabled Then
                Dim BinTableIndex As Integer = RecipeElet.GetBinAbsortionIndex(xTest.Results.PieceCode, cTurnIndicator, .FluxBin, xTest.FluxBins)
                If BinTableIndex <> -1 Then
                    .FluxBin.BinCodes(BinTableIndex).Min = Min
                    .FluxBin.BinCodes(BinTableIndex).Max = Max
                    UpdateEvents("RecipeElect.Absortion.TurnIndicator.BinCodes(" & BinTableIndex.ToString & ")", .FluxBin.BinCodes(BinTableIndex), Min, Max)
                End If
            Else
                UpdateEvents("RecipeElect.Absortion.TurnIndicator", xTest.RunningModel.Electric.Absortion.TurnIndicator, Min, Max)
                .Min = Min
                .Max = Max
            End If
        End With
        'UpdateEvents("RecipeElect.Absortion.TurnIndicator", xTest.RunningModel.Electric.Absortion.TurnIndicator, Min, Max)
        'xTest.RunningModel.Electric.Absortion.TurnIndicator.Min = Min
        'xTest.RunningModel.Electric.Absortion.TurnIndicator.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewElectResult_SavePressedSM(ByVal sender As LasCore.ucViewElectResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewElectResultSM.SavePressed
        mnu.ActivateMenuSuspended()
        ViewElectResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        With xTest.RunningModel.Electric.Absortion.SideMarker
            If .FluxBin.Enabled Then
                Dim BinTableIndex As Integer = RecipeElet.GetBinAbsortionIndex(xTest.Results.PieceCode, cSideMarker, .FluxBin, xTest.FluxBins)
                If BinTableIndex <> -1 Then
                    .FluxBin.BinCodes(BinTableIndex).Min = Min
                    .FluxBin.BinCodes(BinTableIndex).Max = Max
                    UpdateEvents("RecipeElect.Absortion.SideMarker.BinCodes(" & BinTableIndex.ToString & ")", .FluxBin.BinCodes(BinTableIndex), Min, Max)
                End If
            Else
                UpdateEvents("RecipeElect.Absortion.SideMarker", xTest.RunningModel.Electric.Absortion.SideMarker, Min, Max)
                .Min = Min
                .Max = Max
            End If
        End With
        'UpdateEvents("RecipeElect.Absortion.SideMarker", xTest.RunningModel.Electric.Absortion.SideMarker, Min, Max)
        'xTest.RunningModel.Electric.Absortion.SideMarker.Min = Min
        'xTest.RunningModel.Electric.Absortion.SideMarker.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewElectResult_SavePressedCL(ByVal sender As LasCore.ucViewElectResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewElectResultCL.SavePressed
        mnu.ActivateMenuSuspended()
        ViewElectResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        With xTest.RunningModel.Electric.Absortion.CorneringLight
            If .FluxBin.Enabled Then
                Dim BinTableIndex As Integer = RecipeElet.GetBinAbsortionIndex(xTest.Results.PieceCode, "CL", .FluxBin, xTest.FluxBins)
                If BinTableIndex <> -1 Then
                    .FluxBin.BinCodes(BinTableIndex).Min = Min
                    .FluxBin.BinCodes(BinTableIndex).Max = Max
                    UpdateEvents("RecipeElect.Absortion.CorneringLight.BinCodes(" & BinTableIndex.ToString & ")", .FluxBin.BinCodes(BinTableIndex), Min, Max)
                End If
            Else
                UpdateEvents("RecipeElect.Absortion.CorneringLight", xTest.RunningModel.Electric.Absortion.CorneringLight, Min, Max)
                .Min = Min
                .Max = Max
            End If
        End With
        'UpdateEvents("RecipeElect.Absortion.CorneringLight", xTest.RunningModel.Electric.Absortion.CorneringLight, Min, Max)
        'xTest.RunningModel.Electric.Absortion.CorneringLight.Min = Min
        'xTest.RunningModel.Electric.Absortion.CorneringLight.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub


    Private Sub ViewElectResult_EnableControls(ByVal senderName As String, ByVal bYes As Boolean)
        'Enabled/disable all other controls
        For Each item As Control In grpElectResults.Controls
            If TypeOf (item) Is LasCore.ucViewElectResults Then
                Dim _uc As LasCore.ucViewElectResults
                _uc = DirectCast(item, LasCore.ucViewElectResults)
                If _uc.Name <> senderName Then
                    _uc.EnableMenu(bYes)
                    _uc.Visible = bYes
                End If
            End If
        Next

    End Sub

    Private Sub UpdateEvents(ParamName As String, Bulb As RecipeElet.udtBulbAbsortion, Min As Single, Max As Single)
        If Bulb.Min <> Min Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Min" & ": " & Bulb.Min & " --> " & Min)
        End If
        If Bulb.Max <> Max Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Max" & ": " & Bulb.Max & " --> " & Max)
        End If
    End Sub
    Private Sub UpdateEvents(ParamName As String, Bulb As RecipeElet.udtFluxBin.udtBinAbsortion, Min As Single, Max As Single)
        If Bulb.Min <> Min Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Min" & ": " & Bulb.Min & " --> " & Min)
        End If
        If Bulb.Max <> Max Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Max" & ": " & Bulb.Max & " --> " & Max)
        End If
    End Sub


#End Region

#Region "EditBurninlResults"
    Private Sub ViewBurninResults_CancelPressed(ByVal sender As LasCore.ucViewElectResults) Handles ucViewBurnInResultVcc.CancelPressed,
        ucViewBurnInResultCurrentDrop.CancelPressed, ucViewBurnInResultGoodCycles.CancelPressed, ucViewBurnInResultBadCycles.CancelPressed

        mnu.ActivateMenuSuspended()
        ViewBurninResult_EnableControls(sender.Name, True)

    End Sub

    Private Sub ViewBurninResults_EditPressed(ByVal sender As LasCore.ucViewElectResults) Handles ucViewBurnInResultVcc.EditPressed,
        ucViewBurnInResultCurrentDrop.EditPressed, ucViewBurnInResultGoodCycles.EditPressed, ucViewBurnInResultBadCycles.EditPressed

        mnu.SuspendMenu()
        ViewBurninResult_EnableControls(sender.Name, False)

    End Sub

    Private Sub ViewBurninResult_SavePressedVcc(ByVal sender As LasCore.ucViewElectResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewBurnInResultVcc.SavePressed
        mnu.ActivateMenuSuspended()
        ViewBurninResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        If xTest.RunningModel.Electric.BurnIn.VoltageSupply.Min <> Min Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", "RecipeElect.BurnIn.VoltageSupply.Min" & ": " & xTest.RunningModel.Electric.BurnIn.VoltageSupply.Min & " --> " & Min)
        End If
        If xTest.RunningModel.Electric.BurnIn.VoltageSupply.Max <> Max Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", "RecipeElect.BurnIn.VoltageSupply.Max" & ": " & xTest.RunningModel.Electric.BurnIn.VoltageSupply.Max & " --> " & Max)

        End If
        xTest.RunningModel.Electric.BurnIn.VoltageSupply.Min = Min
        xTest.RunningModel.Electric.BurnIn.VoltageSupply.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewBurninResult_SavePressedCurrDrop(ByVal sender As LasCore.ucViewElectResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewBurnInResultCurrentDrop.SavePressed
        mnu.ActivateMenuSuspended()
        ViewBurninResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        If xTest.RunningModel.Electric.BurnIn.MinCurrent <> Min Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", "RecipeElect.BurnIn.MinCurrent.Min" & ": " & xTest.RunningModel.Electric.BurnIn.MinCurrent & " --> " & Min)
        End If
        xTest.RunningModel.Electric.BurnIn.MinCurrent = Min
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewBurninResult_SavePressedGoodCycles(ByVal sender As LasCore.ucViewElectResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewBurnInResultGoodCycles.SavePressed
        mnu.ActivateMenuSuspended()
        ViewBurninResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        If xTest.RunningModel.Electric.BurnIn.CyclesQty <> Min Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", "RecipeElect.BurnIn.CyclesQty" & ": " & xTest.RunningModel.Electric.BurnIn.CyclesQty & " --> " & Min)
        End If
        xTest.RunningModel.Electric.BurnIn.CyclesQty = Min
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub

    Private Sub ViewBurninResult_EnableControls(ByVal senderName As String, ByVal bYes As Boolean)
        'Enabled/disable all other controls
        For Each item As Control In grpBurnIn.Controls
            If TypeOf (item) Is LasCore.ucViewElectResults Then
                Dim _uc As LasCore.ucViewElectResults
                _uc = DirectCast(item, LasCore.ucViewElectResults)
                If _uc.Name <> senderName Then
                    _uc.EnableMenu(bYes)
                    _uc.Visible = bYes
                End If
            End If
        Next
    End Sub

#End Region

#Region "EditGeomResults"
    Private Sub ViewGeomPoint_ShowPressed(ByVal sender As LasCore.ucViewPointResults, ByVal bmpToShow As System.Drawing.Bitmap, pto As Geometry.udtPoint, X As Integer, Y As Integer, Width As Integer, Height As Integer, ResOk As Boolean) Handles _
        ucViewGeomPointHC.ShowPressed, ucViewGeomPointLBHS.ShowPressed, ucViewGeomPointHBHS.ShowPressed,
        ucViewGeomPointCLHS.ShowPressed, ucViewLowBeamCutoffPosition.ShowPressed

        picImageCamera.Image = bmpToShow
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)

        Dim col As Color = IIf(ResOk, Color.Lime, Color.Red)

        xGraphRes.DrawCrossWithCircle(col, 1, pto.X, pto.Y, 20, 20, 3)
        xGraphRes.DrawRecipeWnd(col, 1, X, Y, X + Width, Y + Height)

        xGraphRes.DrawReferencePoint(xTest.RunningModel.Generic.CoordHV.X, xTest.RunningModel.Generic.CoordHV.Y)

    End Sub
    Private Sub ViewGeomPointRefHC_ShowPressed(ByVal sender As LasCore.ucViewPointResults, ByVal bmpToShow As System.Drawing.Bitmap, pto As Geometry.udtPoint, X As Integer, Y As Integer, Width As Integer, Height As Integer, ResOk As Boolean) Handles _
        ucViewGeomPointCLMG.ShowPressed, ucViewGeomPointLowBeamBaseMG.ShowPressed, ucViewGeomPointLowBeamTopMG.ShowPressed

        picImageCamera.Image = bmpToShow
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)

        Dim col As Color = IIf(ResOk, Color.Lime, Color.Red)

        Dim DistHvHc As Integer = xTest.RunningModel.Generic.CoordHV.Y - xTest.Results.GeomTest.PointHC.PointGathered.Y
        Dim Y1 As Integer = Y - DistHvHc
        xGraphRes.DrawRecipeWnd(col, 1, X, Y1, X + Width, Y1 + Height)
        xGraphRes.DrawCrossWithCircle(col, 1, pto.X, pto.Y - DistHvHc, 20, 20, 3)

        xGraphRes.DrawReferencePoint(xTest.Results.GeomTest.PointHC.PointGathered.X, xTest.Results.GeomTest.PointHC.PointGathered.Y)

    End Sub

    Private Sub ViewGeomPoint_CancelPressed(ByVal sender As LasCore.ucViewPointResults) Handles _
        ucViewGeomPointHC.CancelPressed, ucViewGeomPointLBHS.CancelPressed, ucViewGeomPointHBHS.CancelPressed, ucViewGeomPointFBHS.CancelPressed,
         ucViewGeomPointCLHS.CancelPressed, ucViewGeomPointCLMG.CancelPressed, ucViewGeomPointLowBeamBaseMG.CancelPressed, ucViewLowBeamCutoffPosition.CancelPressed,
         ucViewGeomPointLowBeamTopMG.CancelPressed

        mnu.ActivateMenuSuspended()
        ViewGeomPoint_EnableControls(sender.Name, True)
    End Sub
    Private Sub ViewGeomPoint_EditPressed(ByVal sender As LasCore.ucViewPointResults, ByVal bmpToShow As System.Drawing.Bitmap, pto As Geometry.udtPoint) Handles _
        ucViewGeomPointHC.EditPressed, ucViewGeomPointLBHS.EditPressed, ucViewGeomPointHBHS.EditPressed, ucViewGeomPointFBHS.EditPressed,
        ucViewLowBeamCutoffPosition.EditPressed

        mnu.SuspendMenu()
        ViewGeomPoint_EnableControls(sender.Name, False)

        picImageCamera.Image = bmpToShow
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)

    End Sub
    Private Sub ViewGeomPointRefHC_EditPressed(ByVal sender As LasCore.ucViewPointResults, ByVal bmpToShow As System.Drawing.Bitmap, pto As Geometry.udtPoint) Handles _
        ucViewGeomPointCLHS.EditPressed, ucViewGeomPointCLMG.EditPressed, ucViewGeomPointLowBeamBaseMG.EditPressed, ucViewGeomPointLowBeamTopMG.EditPressed

        mnu.SuspendMenu()
        ViewGeomPoint_EnableControls(sender.Name, False)

        picImageCamera.Image = bmpToShow
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)

    End Sub

    Private Sub ViewGeomPoint_CreateSizeableRect(ByVal sender As LasCore.ucViewPointResults, rect As Rectangle, pto As Point) Handles _
        ucViewGeomPointHC.CreateSizeableRect, ucViewGeomPointLBHS.CreateSizeableRect, ucViewGeomPointHBHS.CreateSizeableRect, ucViewGeomPointFBHS.CreateSizeableRect,
        ucViewLowBeamCutoffPosition.CreateSizeableRect

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        Dim Crosses As New List(Of CsharpLibrary.Cross)
        Dim c As New CsharpLibrary.Cross(Color.Lime, 1, New Point(pto.X, pto.Y), New Size(20, 20), New CsharpLibrary.Circle(Color.Lime, 1, New Point(pto.X, pto.Y), 3))
        Crosses.Add(c)
        c = New CsharpLibrary.Cross(Color.Cyan, 1, New Point(xTest.RunningModel.Generic.CoordHV.X, xTest.RunningModel.Generic.CoordHV.Y), New Size(50, 50), Nothing)
        Crosses.Add(c)
        xSizeableShape.Show(rect, Crosses)


    End Sub
    Private Sub ViewGeomPointRefHC_CreateSizeableRect(ByVal sender As LasCore.ucViewPointResults, rect As Rectangle, pto As Point) Handles _
        ucViewGeomPointCLHS.CreateSizeableRect, ucViewGeomPointCLMG.CreateSizeableRect, ucViewGeomPointLowBeamBaseMG.CreateSizeableRect, ucViewGeomPointLowBeamTopMG.CreateSizeableRect

        Dim DistHvHc As Integer = xTest.RunningModel.Generic.CoordHV.Y - xTest.Results.GeomTest.PointHC.PointGathered.Y

        'Dim Y1 As Integer = rect.Y - DistHvHc
        ' SizeableRect = New LasCore.Geometry.SizeableRectangle(picImageCamera, x, Y1, Width, Height, Color.Red, 1, frmMainLocationX, frmMainLocationY)

        'xGraphRes.DrawCrossWithCircle(Color.Lime, 1, pto.X, pto.Y - DistHvHc, 20, 20, 3)
        'xGraphRes.DrawReferencePoint(xTest.Results.GeomTest.PointHC.PointGathered.X, xTest.Results.GeomTest.PointHC.PointGathered.Y)

        pto.Y = pto.Y - DistHvHc
        Dim Crosses As New List(Of CsharpLibrary.Cross)
        Dim c As New CsharpLibrary.Cross(Color.Lime, 1, New Point(pto.X, pto.Y), New Size(20, 20), New CsharpLibrary.Circle(Color.Lime, 1, New Point(pto.X, pto.Y), 3))
        Crosses.Add(c)
        c = New CsharpLibrary.Cross(Color.Cyan, 1, New Point(xTest.Results.GeomTest.PointHC.PointGathered.X, xTest.Results.GeomTest.PointHC.PointGathered.Y), New Size(50, 50), Nothing)

        rect.Y = rect.Y - DistHvHc
        xSizeableShape.Show(rect, Crosses)


    End Sub
    Private Sub ViewGeomPoint_RemoveSizeableRect(ByVal sender As LasCore.ucViewPointResults) Handles _
        ucViewGeomPointHC.RemoveSizeableRect, ucViewGeomPointLBHS.RemoveSizeableRect, ucViewGeomPointHBHS.RemoveSizeableRect, ucViewGeomPointFBHS.RemoveSizeableRect,
        ucViewGeomPointCLHS.RemoveSizeableRect, ucViewGeomPointCLMG.RemoveSizeableRect, ucViewGeomPointLowBeamBaseMG.RemoveSizeableRect, ucViewLowBeamCutoffPosition.RemoveSizeableRect,
        ucViewGeomPointLowBeamTopMG.RemoveSizeableRect

        Try
            xSizeableShape.Hide()
        Catch ex As Exception

        End Try

    End Sub

    Private Sub ViewGeomPoint_SavePressedHC(ByVal sender As LasCore.ucViewPointResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera) Handles ucViewGeomPointHC.SavePressed

        mnu.ActivateMenuSuspended()
        ViewGeomPoint_EnableControls(sender.Name, True)

        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, SizeableRect.yRect, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, SizeableRect.yRect + SizeableRect.hRect, PtoRef, camera)

        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + xSizeableShape.rect.Height, PtoRef, camera)



        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeGeom.PointHC", xTest.RunningModel.Geom.PointHC, lt.H, rb.H, rb.V, lt.V)

        xTest.RunningModel.Geom.PointHC.Hori.Min = lt.H
        xTest.RunningModel.Geom.PointHC.Hori.Max = rb.H
        xTest.RunningModel.Geom.PointHC.Vert.Min = rb.V
        xTest.RunningModel.Geom.PointHC.Vert.Max = lt.V

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimitsHor(xTest.RunningModel.Geom.PointHC.Hori.Min, xTest.RunningModel.Geom.PointHC.Hori.Max, xTest.RunningModel.Geom.PointHC.Hori.Enabled, xAppConfig.Params.DisplayFrmt.Grad)
        sender.DisplayTestLimitsVer(xTest.RunningModel.Geom.PointHC.Vert.Min, xTest.RunningModel.Geom.PointHC.Vert.Max, xTest.RunningModel.Geom.PointHC.Vert.Enabled, xAppConfig.Params.DisplayFrmt.Grad)

    End Sub
    Private Sub ViewGeomPoint_SavePressedLBHS(ByVal sender As LasCore.ucViewPointResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera) Handles ucViewGeomPointLBHS.SavePressed

        mnu.ActivateMenuSuspended()
        'Enabled all other controls
        ViewGeomPoint_EnableControls(sender.Name, True)

        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, SizeableRect.yRect, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, SizeableRect.yRect + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)

        UpdateEvents("RecipeGeom.LowBeamHotSpot", xTest.RunningModel.Geom.LowBeamHotSpot, lt.H, rb.H, rb.V, lt.V)

        xTest.RunningModel.Geom.LowBeamHotSpot.Hori.Min = lt.H
        xTest.RunningModel.Geom.LowBeamHotSpot.Hori.Max = rb.H
        xTest.RunningModel.Geom.LowBeamHotSpot.Vert.Min = rb.V
        xTest.RunningModel.Geom.LowBeamHotSpot.Vert.Max = lt.V

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimitsHor(xTest.RunningModel.Geom.LowBeamHotSpot.Hori.Min, xTest.RunningModel.Geom.LowBeamHotSpot.Hori.Max, xTest.RunningModel.Geom.LowBeamHotSpot.Hori.Enabled, xAppConfig.Params.DisplayFrmt.Grad)
        sender.DisplayTestLimitsVer(xTest.RunningModel.Geom.LowBeamHotSpot.Vert.Min, xTest.RunningModel.Geom.LowBeamHotSpot.Vert.Max, xTest.RunningModel.Geom.LowBeamHotSpot.Vert.Enabled, xAppConfig.Params.DisplayFrmt.Grad)

    End Sub
    Private Sub ViewGeomPoint_SavePressedHBHS(ByVal sender As LasCore.ucViewPointResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera) Handles ucViewGeomPointHBHS.SavePressed

        mnu.ActivateMenuSuspended()
        'Enabled all other controls
        ViewGeomPoint_EnableControls(sender.Name, True)

        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, SizeableRect.yRect, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, SizeableRect.yRect + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeGeom.HighBeamHotSpot", xTest.RunningModel.Geom.HighBeamHotSpot, lt.H, rb.H, rb.V, lt.V)

        xTest.RunningModel.Geom.HighBeamHotSpot.Hori.Min = lt.H
        xTest.RunningModel.Geom.HighBeamHotSpot.Hori.Max = rb.H
        xTest.RunningModel.Geom.HighBeamHotSpot.Vert.Min = rb.V
        xTest.RunningModel.Geom.HighBeamHotSpot.Vert.Max = lt.V

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimitsHor(xTest.RunningModel.Geom.HighBeamHotSpot.Hori.Min, xTest.RunningModel.Geom.HighBeamHotSpot.Hori.Max, xTest.RunningModel.Geom.HighBeamHotSpot.Hori.Enabled, xAppConfig.Params.DisplayFrmt.Grad)
        sender.DisplayTestLimitsVer(xTest.RunningModel.Geom.HighBeamHotSpot.Vert.Min, xTest.RunningModel.Geom.HighBeamHotSpot.Vert.Max, xTest.RunningModel.Geom.HighBeamHotSpot.Vert.Enabled, xAppConfig.Params.DisplayFrmt.Grad)

    End Sub
    Private Sub ViewGeomPoint_SavePressedFBHS(ByVal sender As LasCore.ucViewPointResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera) Handles ucViewGeomPointFBHS.SavePressed

        mnu.ActivateMenuSuspended()
        'Enabled all other controls
        ViewGeomPoint_EnableControls(sender.Name, True)

        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, SizeableRect.yRect, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, SizeableRect.yRect + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeGeom.FogBeamHotSpot", xTest.RunningModel.Geom.FogBeamHotSpot, lt.H, rb.H, rb.V, lt.V)

        xTest.RunningModel.Geom.FogBeamHotSpot.Hori.Min = lt.H
        xTest.RunningModel.Geom.FogBeamHotSpot.Hori.Max = rb.H
        xTest.RunningModel.Geom.FogBeamHotSpot.Vert.Min = rb.V
        xTest.RunningModel.Geom.FogBeamHotSpot.Vert.Max = lt.V

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimitsHor(xTest.RunningModel.Geom.FogBeamHotSpot.Hori.Min, xTest.RunningModel.Geom.FogBeamHotSpot.Hori.Max, xTest.RunningModel.Geom.FogBeamHotSpot.Hori.Enabled, xAppConfig.Params.DisplayFrmt.Grad)
        sender.DisplayTestLimitsVer(xTest.RunningModel.Geom.FogBeamHotSpot.Vert.Min, xTest.RunningModel.Geom.FogBeamHotSpot.Vert.Max, xTest.RunningModel.Geom.FogBeamHotSpot.Vert.Enabled, xAppConfig.Params.DisplayFrmt.Grad)

    End Sub
    Private Sub ViewGeomPoint_SavePressedCLHS(ByVal sender As LasCore.ucViewPointResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera) Handles ucViewGeomPointCLHS.SavePressed

        mnu.ActivateMenuSuspended()
        'Enabled all other controls
        ViewGeomPoint_EnableControls(sender.Name, True)

        Dim DistHvHc As Integer = xTest.RunningModel.Generic.CoordHV.Y - xTest.Results.GeomTest.PointHC.PointGathered.Y
        'Dim Y1 As Integer = SizeableRect.yRect + DistHvHc
        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, Y1, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, Y1 + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y + DistHvHc, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + DistHvHc + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeGeom.CornerLightHotSpot", xTest.RunningModel.Geom.CornerLightHotSpot, lt.H, rb.H, rb.V, lt.V)

        xTest.RunningModel.Geom.CornerLightHotSpot.Hori.Min = lt.H
        xTest.RunningModel.Geom.CornerLightHotSpot.Hori.Max = rb.H
        xTest.RunningModel.Geom.CornerLightHotSpot.Vert.Min = rb.V
        xTest.RunningModel.Geom.CornerLightHotSpot.Vert.Max = lt.V

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimitsHor(xTest.RunningModel.Geom.CornerLightHotSpot.Hori.Min, xTest.RunningModel.Geom.CornerLightHotSpot.Hori.Max, xTest.RunningModel.Geom.CornerLightHotSpot.Hori.Enabled, xAppConfig.Params.DisplayFrmt.Grad)
        sender.DisplayTestLimitsVer(xTest.RunningModel.Geom.CornerLightHotSpot.Vert.Min, xTest.RunningModel.Geom.CornerLightHotSpot.Vert.Max, xTest.RunningModel.Geom.CornerLightHotSpot.Vert.Enabled, xAppConfig.Params.DisplayFrmt.Grad)

    End Sub
    Private Sub ViewGeomPoint_SavePressedCLMG(ByVal sender As LasCore.ucViewPointResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera) Handles ucViewGeomPointCLMG.SavePressed

        mnu.ActivateMenuSuspended()
        'Enabled all other controls
        ViewGeomPoint_EnableControls(sender.Name, True)

        Dim DistHvHc As Integer = xTest.RunningModel.Generic.CoordHV.Y - xTest.Results.GeomTest.PointHC.PointGathered.Y
        'Dim Y1 As Integer = SizeableRect.yRect + DistHvHc
        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, Y1, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, Y1 + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y + DistHvHc, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + DistHvHc + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeGeom.CornerLightMaxGrad", xTest.RunningModel.Geom.CornerLightMaxGrad, lt.H, rb.H, rb.V, lt.V)

        xTest.RunningModel.Geom.CornerLightMaxGrad.Hori.Min = lt.H
        xTest.RunningModel.Geom.CornerLightMaxGrad.Hori.Max = rb.H
        xTest.RunningModel.Geom.CornerLightMaxGrad.Vert.Min = rb.V
        xTest.RunningModel.Geom.CornerLightMaxGrad.Vert.Max = lt.V

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimitsHor(xTest.RunningModel.Geom.CornerLightMaxGrad.Hori.Min, xTest.RunningModel.Geom.CornerLightMaxGrad.Hori.Max, xTest.RunningModel.Geom.CornerLightMaxGrad.Hori.Enabled, xAppConfig.Params.DisplayFrmt.Grad)
        sender.DisplayTestLimitsVer(xTest.RunningModel.Geom.CornerLightMaxGrad.Vert.Min, xTest.RunningModel.Geom.CornerLightMaxGrad.Vert.Max, xTest.RunningModel.Geom.CornerLightMaxGrad.Vert.Enabled, xAppConfig.Params.DisplayFrmt.Grad)

    End Sub
    Private Sub ViewGeomPoint_SavePressedLowBeamBaseMG(ByVal sender As LasCore.ucViewPointResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera) Handles ucViewGeomPointLowBeamBaseMG.SavePressed

        mnu.ActivateMenuSuspended()
        'Enabled all other controls
        ViewGeomPoint_EnableControls(sender.Name, True)

        Dim DistHvHc As Integer = xTest.RunningModel.Generic.CoordHV.Y - xTest.Results.GeomTest.PointHC.PointGathered.Y
        'Dim Y1 As Integer = SizeableRect.yRect + DistHvHc
        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, Y1, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, Y1 + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y + DistHvHc, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + DistHvHc + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeGeom.LowBeamBaseMaxGrad", xTest.RunningModel.Geom.LowBeamBaseMaxGrad, lt.H, rb.H, rb.V, lt.V)

        xTest.RunningModel.Geom.LowBeamBaseMaxGrad.Hori.Min = lt.H
        xTest.RunningModel.Geom.LowBeamBaseMaxGrad.Hori.Max = rb.H
        xTest.RunningModel.Geom.LowBeamBaseMaxGrad.Vert.Min = rb.V
        xTest.RunningModel.Geom.LowBeamBaseMaxGrad.Vert.Max = lt.V

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimitsHor(xTest.RunningModel.Geom.LowBeamBaseMaxGrad.Hori.Min, xTest.RunningModel.Geom.LowBeamBaseMaxGrad.Hori.Max,
                                    xTest.RunningModel.Geom.LowBeamBaseMaxGrad.Hori.Enabled, xAppConfig.Params.DisplayFrmt.Grad)
        sender.DisplayTestLimitsVer(xTest.RunningModel.Geom.LowBeamBaseMaxGrad.Vert.Min, xTest.RunningModel.Geom.LowBeamBaseMaxGrad.Vert.Max,
                                    xTest.RunningModel.Geom.LowBeamBaseMaxGrad.Vert.Enabled, xAppConfig.Params.DisplayFrmt.Grad)

    End Sub
    Private Sub ViewGeomPoint_SavePressedLowBeamCutoffPosition(ByVal sender As LasCore.ucViewPointResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera) Handles ucViewLowBeamCutoffPosition.SavePressed

        mnu.ActivateMenuSuspended()
        'Enabled all other controls
        ViewGeomPoint_EnableControls(sender.Name, True)

        ' Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, SizeableRect.yRect, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, SizeableRect.yRect + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeGeom.LowBeamMaxGrad", xTest.RunningModel.Geom.LowBeamMaxGrad, lt.H, rb.H, rb.V, lt.V)

        xTest.RunningModel.Geom.LowBeamMaxGrad.Hori.Min = lt.H
        xTest.RunningModel.Geom.LowBeamMaxGrad.Hori.Max = rb.H
        xTest.RunningModel.Geom.LowBeamMaxGrad.Vert.Min = rb.V
        xTest.RunningModel.Geom.LowBeamMaxGrad.Vert.Max = lt.V

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimitsHor(xTest.RunningModel.Geom.LowBeamMaxGrad.Hori.Min, xTest.RunningModel.Geom.LowBeamMaxGrad.Hori.Max, xTest.RunningModel.Geom.LowBeamMaxGrad.Hori.Enabled, xAppConfig.Params.DisplayFrmt.Grad)
        sender.DisplayTestLimitsVer(xTest.RunningModel.Geom.LowBeamMaxGrad.Vert.Min, xTest.RunningModel.Geom.LowBeamMaxGrad.Vert.Max, xTest.RunningModel.Geom.LowBeamMaxGrad.Vert.Enabled, xAppConfig.Params.DisplayFrmt.Grad)

    End Sub

    Private Sub ViewGeomPoint_SavePressedLowBeamTopCutoffPosition(ByVal sender As LasCore.ucViewPointResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera) Handles ucViewGeomPointLowBeamTopMG.SavePressed

        mnu.ActivateMenuSuspended()
        'Enabled all other controls
        ViewGeomPoint_EnableControls(sender.Name, True)

        Dim DistHvHc As Integer = xTest.RunningModel.Generic.CoordHV.Y - xTest.Results.GeomTest.PointHC.PointGathered.Y
        'Dim Y1 As Integer = SizeableRect.yRect + DistHvHc
        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, Y1, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, Y1 + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y + DistHvHc, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + DistHvHc + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeGeom.LowBeamTopMaxGrad", xTest.RunningModel.Geom.LowBeamTopMaxGrad, lt.H, rb.H, rb.V, lt.V)

        xTest.RunningModel.Geom.LowBeamTopMaxGrad.Hori.Min = lt.H
        xTest.RunningModel.Geom.LowBeamTopMaxGrad.Hori.Max = rb.H
        xTest.RunningModel.Geom.LowBeamTopMaxGrad.Vert.Min = rb.V
        xTest.RunningModel.Geom.LowBeamTopMaxGrad.Vert.Max = lt.V

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimitsHor(xTest.RunningModel.Geom.LowBeamTopMaxGrad.Hori.Min, xTest.RunningModel.Geom.LowBeamTopMaxGrad.Hori.Max,
                                    xTest.RunningModel.Geom.LowBeamTopMaxGrad.Hori.Enabled, xAppConfig.Params.DisplayFrmt.Grad)
        sender.DisplayTestLimitsVer(xTest.RunningModel.Geom.LowBeamTopMaxGrad.Vert.Min, xTest.RunningModel.Geom.LowBeamTopMaxGrad.Vert.Max,
                                    xTest.RunningModel.Geom.LowBeamTopMaxGrad.Vert.Enabled, xAppConfig.Params.DisplayFrmt.Grad)

    End Sub

    Private Sub ViewGeomPoint_EnableControls(ByVal senderName As String, ByVal bYes As Boolean)

        For Each item As Control In grpGeomPointPos.Controls
            If TypeOf (item) Is LasCore.ucViewPointResults Then
                Dim _uc As LasCore.ucViewPointResults
                _uc = DirectCast(item, LasCore.ucViewPointResults)
                If _uc.Name <> senderName Then
                    _uc.EnableMenu(bYes)
                End If
            End If
        Next

    End Sub

    Private Sub UpdateEvents(ParamName As String, point As RecipeGeom.udtPointAnalysis, X1 As Single, X2 As Single, Y1 As Single, Y2 As Single)

        If point.Hori.Min <> X1 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Hori.Min" & ": " & point.Hori.Min & " --> " & X1)
        End If
        If point.Hori.Max <> X2 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Hori.Max" & ": " & point.Hori.Max & " --> " & X2)
        End If
        If point.Vert.Min <> Y1 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Vert.Min" & ": " & point.Vert.Min & " --> " & Y1)
        End If
        If point.Vert.Max <> Y2 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Vert.Max" & ": " & point.Vert.Max & " --> " & Y2)
        End If

    End Sub



#End Region

#Region "EditDriveTestResults"
    Private Sub ViewDriveTestPoint_ShowPressed(ByVal sender As LasCore.ucViewDrivePointResult) Handles ucViewGeomDrive.ShowPressed

        picImageCamera.Image = xTest.Results.GeomTest.DriveType.BmpUsed
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        xGraphRes.DrawHV(New AForge.Point(xTest.RunningModel.Generic.CoordHV.X, xTest.RunningModel.Generic.CoordHV.Y))

        Dim IdCamera As Byte = xTest.RunningModel.Geom.PointHC.Advanced.Camera.Id
        Dim cam As LasCore.Icamera = xCameraManagement.GetCamera(IdCamera)

        Dim iPto As Integer = 0
        For Each item As RecipeDriveSide.udtRecipeDriveAnalysis.udtTestPoint In xTest.RunningModel.DriveSide.DriveSideTest.TestPoints
            Dim pto As New Geometry.Point(CSng(item.coordH), CSng(item.coordV), xTest.GeomTest.PointRefDriveSide, cam)
            If xTest.Results.GeomTest.DriveType.Points(iPto).Ok Then
                xGraphRes.DrawPhotomPoint(Color.Green, 1, pto.X, pto.Y, 3, item.Name)
            Else
                xGraphRes.DrawPhotomPoint(Color.Red, 1, pto.X, pto.Y, 3, item.Name)
            End If
            iPto += 1
        Next

    End Sub
    Private Sub ViewDriveTestPoint_CancelPressed(ByVal sender As LasCore.ucViewDrivePointResult) Handles _
        ucViewGeomDrive.CancelPressed

        mnu.ActivateMenuSuspended()
        ViewDriveTestPoint_EnableControls(sender.Name, True)
    End Sub
    Private Sub ViewDriveTestPoint_EditPressed(ByVal sender As LasCore.ucViewDrivePointResult) Handles _
        ucViewGeomDrive.EditPressed

        mnu.SuspendMenu()
        ViewDriveTestPoint_EnableControls(sender.Name, False)

        picImageCamera.Image = xTest.Results.GeomTest.DriveType.BmpUsed
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        xGraphRes.DrawHV(New AForge.Point(xTest.RunningModel.Generic.CoordHV.X, xTest.RunningModel.Generic.CoordHV.Y))

        Dim IdCamera As Byte = xTest.RunningModel.Geom.PointHC.Advanced.Camera.Id
        Dim cam As LasCore.Icamera = xCameraManagement.GetCamera(IdCamera)

        Dim iPto As Integer = 0
        For Each item As RecipeDriveSide.udtRecipeDriveAnalysis.udtTestPoint In xTest.RunningModel.DriveSide.DriveSideTest.TestPoints
            Dim pto As New Geometry.Point(CSng(item.coordH), CSng(item.coordV), xTest.GeomTest.PointRefDriveSide, cam)
            If xTest.Results.GeomTest.DriveType.Points(iPto).Ok Then
                xGraphRes.DrawPhotomPoint(Color.Green, 1, pto.X, pto.Y, 3, item.Name)
            Else
                xGraphRes.DrawPhotomPoint(Color.Red, 1, pto.X, pto.Y, 3, item.Name)
            End If
            iPto += 1
        Next

    End Sub
    Private Sub ViewGeomDrive_SavePressed(ByVal sender As LasCore.ucViewDrivePointResult, ByVal Value() As Integer, GreaterThen() As Boolean) Handles ucViewGeomDrive.SavePressed

        mnu.ActivateMenuSuspended()
        ViewDriveTestPoint_EnableControls(sender.Name, True)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)

        For i As Integer = 0 To 5
            UpdateEvents("DriveSide.DriveSideTest.TestPoints(" & i.ToString & ")", xTest.RunningModel.DriveSide.DriveSideTest.TestPoints(i), Value(i), GreaterThen(i))
            xTest.RunningModel.DriveSide.DriveSideTest.TestPoints(i).GreyLevel = Value(i)
            xTest.RunningModel.DriveSide.DriveSideTest.TestPoints(i).GreaterThen = GreaterThen(i)
        Next

        'xTest.RunningModel.DriveSide.DriveSideTest.TestPoints(0).GreyLevel = Value(0)
        'xTest.RunningModel.DriveSide.DriveSideTest.TestPoints(0).GreaterThen = GreaterThen(0)
        'xTest.RunningModel.DriveSide.DriveSideTest.TestPoints(1).GreyLevel = Value(1)
        'xTest.RunningModel.DriveSide.DriveSideTest.TestPoints(1).GreaterThen = GreaterThen(1)
        'xTest.RunningModel.DriveSide.DriveSideTest.TestPoints(2).GreyLevel = Value(2)
        'xTest.RunningModel.DriveSide.DriveSideTest.TestPoints(2).GreaterThen = GreaterThen(2)
        'xTest.RunningModel.DriveSide.DriveSideTest.TestPoints(3).GreyLevel = Value(3)
        'xTest.RunningModel.DriveSide.DriveSideTest.TestPoints(3).GreaterThen = GreaterThen(3)
        'xTest.RunningModel.DriveSide.DriveSideTest.TestPoints(4).GreyLevel = Value(4)
        'xTest.RunningModel.DriveSide.DriveSideTest.TestPoints(4).GreaterThen = GreaterThen(4)
        'xTest.RunningModel.DriveSide.DriveSideTest.TestPoints(5).GreyLevel = Value(5)
        'xTest.RunningModel.DriveSide.DriveSideTest.TestPoints(5).GreaterThen = GreaterThen(5)

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)


    End Sub

    Private Sub ViewDriveTestPoint_EnableControls(ByVal senderName As String, ByVal bYes As Boolean)

        For Each item As Control In grpGeomDriveType.Controls
            If TypeOf (item) Is LasCore.ucViewDrivePointResult Then
                Dim _uc As LasCore.ucViewDrivePointResult
                _uc = DirectCast(item, LasCore.ucViewDrivePointResult)
                If _uc.Name <> senderName Then
                    _uc.EnableMenu(bYes)
                End If
            End If
        Next

    End Sub

    Private Sub UpdateEvents(ParamName As String, point As RecipeDriveSide.udtRecipeDriveAnalysis.udtTestPoint, Value As Integer, GreaterThen As Boolean)
        If point.GreyLevel <> Value Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".GreyLevel" & ": " & point.GreyLevel & " --> " & Value)
        End If
        If point.GreaterThen <> GreaterThen Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".GreaterThen" & ": " & point.GreaterThen & " --> " & GreaterThen)
        End If
    End Sub

#End Region

#Region "EditMotorsResults"
    Private Sub ViewMotorsPoint_CancelPressed(ByVal sender As LasCore.ucViewMotorPosResults) Handles _
        ucViewMotorPos00.CancelPressed, ucViewMotorPos01.CancelPressed, ucViewMotorPos02.CancelPressed,
        ucViewMotorPos03.CancelPressed, ucViewMotorPos04.CancelPressed, ucViewMotorPos05.CancelPressed,
        ucViewMotorPos06.CancelPressed, ucViewMotorPos07.CancelPressed, ucViewMotorPos08.CancelPressed

        mnu.ActivateMenuSuspended()
        'Enabled all other controls
        ViewMotors_EnableControls(sender.Name, True)

    End Sub
    Private Sub ViewMotorsPoint_EditPressed(ByVal sender As LasCore.ucViewMotorPosResults, ByVal bmpToShow As System.Drawing.Bitmap, pto As Geometry.udtPoint) Handles _
        ucViewMotorPos00.EditPressed, ucViewMotorPos01.EditPressed, ucViewMotorPos02.EditPressed,
        ucViewMotorPos03.EditPressed, ucViewMotorPos04.EditPressed, ucViewMotorPos05.EditPressed,
        ucViewMotorPos06.EditPressed, ucViewMotorPos07.EditPressed, ucViewMotorPos08.EditPressed

        mnu.SuspendMenu()
        'Disabled all other controls
        ViewMotors_EnableControls(sender.Name, False)

        picImageCamera.Image = bmpToShow
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)

        ' xGraphRes.DrawCrossWithCircle(Color.Lime, 1, pto.X, pto.Y, 20, 20, 3)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)

    End Sub
    Private Sub ViewMotorsPoint_CreateSizeableRect(ByVal sender As LasCore.ucViewMotorPosResults, rect As Rectangle, pto As Point) Handles _
        ucViewMotorPos00.CreateSizeableRect, ucViewMotorPos01.CreateSizeableRect, ucViewMotorPos02.CreateSizeableRect,
        ucViewMotorPos03.CreateSizeableRect, ucViewMotorPos04.CreateSizeableRect, ucViewMotorPos05.CreateSizeableRect,
        ucViewMotorPos06.CreateSizeableRect, ucViewMotorPos07.CreateSizeableRect, ucViewMotorPos08.CreateSizeableRect

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        Dim Crosses As New List(Of CsharpLibrary.Cross)
        Dim c As New CsharpLibrary.Cross(Color.Lime, 1, New Point(pto.X, pto.Y), New Size(20, 20), New CsharpLibrary.Circle(Color.Lime, 1, New Point(pto.X, pto.Y), 3))
        Crosses.Add(c)
        xSizeableShape.Show(rect, Crosses)

    End Sub
    Private Sub ViewMotorsPoint_RemoveSizeableRect(ByVal sender As LasCore.ucViewMotorPosResults) Handles _
        ucViewMotorPos00.RemoveSizeableRect, ucViewMotorPos01.RemoveSizeableRect, ucViewMotorPos02.RemoveSizeableRect,
        ucViewMotorPos03.RemoveSizeableRect, ucViewMotorPos04.RemoveSizeableRect, ucViewMotorPos05.RemoveSizeableRect,
        ucViewMotorPos06.RemoveSizeableRect, ucViewMotorPos07.RemoveSizeableRect, ucViewMotorPos08.RemoveSizeableRect

        Try
            xSizeableShape.Hide()
        Catch ex As Exception

        End Try
    End Sub
    Private Sub ViewMotorsPoint_SavePressedPos0(ByVal sender As LasCore.ucViewMotorPosResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera, CurMin As Single, CurMax As Single) Handles _
        ucViewMotorPos00.SavePressed

        mnu.ActivateMenuSuspended()
        ViewMotors_EnableControls(sender.Name, True)

        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, SizeableRect.yRect, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, SizeableRect.yRect + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeMotors.Position(0)", xTest.RunningModel.Motors.Position(0), lt.H, rb.H, rb.V, lt.V, CurMin, CurMax)

        xTest.RunningModel.Motors.Position(0).PositionToll.Hori.Min = lt.H
        xTest.RunningModel.Motors.Position(0).PositionToll.Hori.Max = rb.H
        xTest.RunningModel.Motors.Position(0).PositionToll.Vert.Min = rb.V
        xTest.RunningModel.Motors.Position(0).PositionToll.Vert.Max = lt.V
        xTest.RunningModel.Motors.Position(0).Current.Min = CurMin
        xTest.RunningModel.Motors.Position(0).Current.Max = CurMax

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimits(rb.V, lt.V, lt.H, rb.H, CurMin, CurMax)


    End Sub
    Private Sub ViewMotorsPoint_SavePressedPos1(ByVal sender As LasCore.ucViewMotorPosResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera, CurMin As Single, CurMax As Single) Handles _
       ucViewMotorPos01.SavePressed

        mnu.ActivateMenuSuspended()
        ViewMotors_EnableControls(sender.Name, True)

        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, SizeableRect.yRect, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, SizeableRect.yRect + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeMotors.Position(1)", xTest.RunningModel.Motors.Position(1), lt.H, rb.H, rb.V, lt.V, CurMin, CurMax)

        xTest.RunningModel.Motors.Position(1).PositionToll.Hori.Min = lt.H
        xTest.RunningModel.Motors.Position(1).PositionToll.Hori.Max = rb.H
        xTest.RunningModel.Motors.Position(1).PositionToll.Vert.Min = rb.V
        xTest.RunningModel.Motors.Position(1).PositionToll.Vert.Max = lt.V
        xTest.RunningModel.Motors.Position(1).Current.Min = CurMin
        xTest.RunningModel.Motors.Position(1).Current.Max = CurMax

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimits(rb.V, lt.V, lt.H, rb.H, CurMin, CurMax)

    End Sub
    Private Sub ViewMotorsPoint_SavePressedPos2(ByVal sender As LasCore.ucViewMotorPosResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera, CurMin As Single, CurMax As Single) Handles _
      ucViewMotorPos02.SavePressed

        mnu.ActivateMenuSuspended()
        ViewMotors_EnableControls(sender.Name, True)

        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, SizeableRect.yRect, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, SizeableRect.yRect + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeMotors.Position(2)", xTest.RunningModel.Motors.Position(2), lt.H, rb.H, rb.V, lt.V, CurMin, CurMax)

        xTest.RunningModel.Motors.Position(2).PositionToll.Hori.Min = lt.H
        xTest.RunningModel.Motors.Position(2).PositionToll.Hori.Max = rb.H
        xTest.RunningModel.Motors.Position(2).PositionToll.Vert.Min = rb.V
        xTest.RunningModel.Motors.Position(2).PositionToll.Vert.Max = lt.V
        xTest.RunningModel.Motors.Position(2).Current.Min = CurMin
        xTest.RunningModel.Motors.Position(2).Current.Max = CurMax

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimits(rb.V, lt.V, lt.H, rb.H, CurMin, CurMax)

    End Sub
    Private Sub ViewMotorsPoint_SavePressedPos3(ByVal sender As LasCore.ucViewMotorPosResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera, CurMin As Single, CurMax As Single) Handles _
      ucViewMotorPos03.SavePressed

        mnu.ActivateMenuSuspended()
        ViewMotors_EnableControls(sender.Name, True)

        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, SizeableRect.yRect, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, SizeableRect.yRect + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeMotors.Position(3)", xTest.RunningModel.Motors.Position(3), lt.H, rb.H, rb.V, lt.V, CurMin, CurMax)

        xTest.RunningModel.Motors.Position(3).PositionToll.Hori.Min = lt.H
        xTest.RunningModel.Motors.Position(3).PositionToll.Hori.Max = rb.H
        xTest.RunningModel.Motors.Position(3).PositionToll.Vert.Min = rb.V
        xTest.RunningModel.Motors.Position(3).PositionToll.Vert.Max = lt.V
        xTest.RunningModel.Motors.Position(3).Current.Min = CurMin
        xTest.RunningModel.Motors.Position(3).Current.Max = CurMax

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimits(rb.V, lt.V, lt.H, rb.H, CurMin, CurMax)

    End Sub
    Private Sub ViewMotorsPoint_SavePressedPos4(ByVal sender As LasCore.ucViewMotorPosResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera, CurMin As Single, CurMax As Single) Handles _
     ucViewMotorPos04.SavePressed

        mnu.ActivateMenuSuspended()
        ViewMotors_EnableControls(sender.Name, True)

        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, SizeableRect.yRect, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, SizeableRect.yRect + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeMotors.Position(4)", xTest.RunningModel.Motors.Position(4), lt.H, rb.H, rb.V, lt.V, CurMin, CurMax)

        xTest.RunningModel.Motors.Position(4).PositionToll.Hori.Min = lt.H
        xTest.RunningModel.Motors.Position(4).PositionToll.Hori.Max = rb.H
        xTest.RunningModel.Motors.Position(4).PositionToll.Vert.Min = rb.V
        xTest.RunningModel.Motors.Position(4).PositionToll.Vert.Max = lt.V
        xTest.RunningModel.Motors.Position(4).Current.Min = CurMin
        xTest.RunningModel.Motors.Position(4).Current.Max = CurMax

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimits(rb.V, lt.V, lt.H, rb.H, CurMin, CurMax)

    End Sub
    Private Sub ViewMotorsPoint_SavePressedPos5(ByVal sender As LasCore.ucViewMotorPosResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera, CurMin As Single, CurMax As Single) Handles _
     ucViewMotorPos05.SavePressed

        mnu.ActivateMenuSuspended()
        ViewMotors_EnableControls(sender.Name, True)

        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, SizeableRect.yRect, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, SizeableRect.yRect + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeMotors.Position(5)", xTest.RunningModel.Motors.Position(5), lt.H, rb.H, rb.V, lt.V, CurMin, CurMax)

        xTest.RunningModel.Motors.Position(5).PositionToll.Hori.Min = lt.H
        xTest.RunningModel.Motors.Position(5).PositionToll.Hori.Max = rb.H
        xTest.RunningModel.Motors.Position(5).PositionToll.Vert.Min = rb.V
        xTest.RunningModel.Motors.Position(5).PositionToll.Vert.Max = lt.V
        xTest.RunningModel.Motors.Position(5).Current.Min = CurMin
        xTest.RunningModel.Motors.Position(5).Current.Max = CurMax

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimits(rb.V, lt.V, lt.H, rb.H, CurMin, CurMax)

    End Sub
    Private Sub ViewMotorsPoint_SavePressedPos6(ByVal sender As LasCore.ucViewMotorPosResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera, CurMin As Single, CurMax As Single) Handles _
     ucViewMotorPos06.SavePressed

        mnu.ActivateMenuSuspended()
        ViewMotors_EnableControls(sender.Name, True)

        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, SizeableRect.yRect, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, SizeableRect.yRect + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeMotors.Position(6)", xTest.RunningModel.Motors.Position(6), lt.H, rb.H, rb.V, lt.V, CurMin, CurMax)

        xTest.RunningModel.Motors.Position(6).PositionToll.Hori.Min = lt.H
        xTest.RunningModel.Motors.Position(6).PositionToll.Hori.Max = rb.H
        xTest.RunningModel.Motors.Position(6).PositionToll.Vert.Min = rb.V
        xTest.RunningModel.Motors.Position(6).PositionToll.Vert.Max = lt.V
        xTest.RunningModel.Motors.Position(6).Current.Min = CurMin
        xTest.RunningModel.Motors.Position(6).Current.Max = CurMax

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimits(rb.V, lt.V, lt.H, rb.H, CurMin, CurMax)

    End Sub
    Private Sub ViewMotorsPoint_SavePressedPos7(ByVal sender As LasCore.ucViewMotorPosResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera, CurMin As Single, CurMax As Single) Handles _
     ucViewMotorPos07.SavePressed

        mnu.ActivateMenuSuspended()
        ViewMotors_EnableControls(sender.Name, True)

        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, SizeableRect.yRect, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, SizeableRect.yRect + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeMotors.Position(7)", xTest.RunningModel.Motors.Position(7), lt.H, rb.H, rb.V, lt.V, CurMin, CurMax)

        xTest.RunningModel.Motors.Position(7).PositionToll.Hori.Min = lt.H
        xTest.RunningModel.Motors.Position(7).PositionToll.Hori.Max = rb.H
        xTest.RunningModel.Motors.Position(7).PositionToll.Vert.Min = rb.V
        xTest.RunningModel.Motors.Position(7).PositionToll.Vert.Max = lt.V
        xTest.RunningModel.Motors.Position(7).Current.Min = CurMin
        xTest.RunningModel.Motors.Position(7).Current.Max = CurMax

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimits(rb.V, lt.V, lt.H, rb.H, CurMin, CurMax)

    End Sub
    Private Sub ViewMotorsPoint_SavePressedPos8(ByVal sender As LasCore.ucViewMotorPosResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera, CurMin As Single, CurMax As Single) Handles _
     ucViewMotorPos08.SavePressed

        mnu.ActivateMenuSuspended()
        ViewMotors_EnableControls(sender.Name, True)

        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, SizeableRect.yRect, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, SizeableRect.yRect + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeMotors.Position(8)", xTest.RunningModel.Motors.Position(8), lt.H, rb.H, rb.V, lt.V, CurMin, CurMax)

        xTest.RunningModel.Motors.Position(8).PositionToll.Hori.Min = lt.H
        xTest.RunningModel.Motors.Position(8).PositionToll.Hori.Max = rb.H
        xTest.RunningModel.Motors.Position(8).PositionToll.Vert.Min = rb.V
        xTest.RunningModel.Motors.Position(8).PositionToll.Vert.Max = lt.V
        xTest.RunningModel.Motors.Position(8).Current.Min = CurMin
        xTest.RunningModel.Motors.Position(8).Current.Max = CurMax

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimits(rb.V, lt.V, lt.H, rb.H, CurMin, CurMax)

    End Sub


    Private Sub ViewMotors_EnableControls(ByVal senderName As String, ByVal bYes As Boolean)
        'Enabled/disable all other controls
        For Each item As Control In grpMotorsPos.Controls
            If TypeOf (item) Is LasCore.ucViewMotorPosResults Then
                Dim _uc As LasCore.ucViewMotorPosResults
                _uc = DirectCast(item, LasCore.ucViewMotorPosResults)
                If _uc.Name <> senderName Then
                    _uc.EnableMenu(bYes)
                    _uc.Visible = bYes
                End If
            End If
        Next
    End Sub

    Private Sub UpdateEvents(ParamName As String, Position As RecipeMotors.udtDataPositions, X1 As Single, X2 As Single, Y1 As Single, Y2 As Single, CurMin As Single, CurMax As Single)

        If Position.PositionToll.Hori.Min <> X1 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".PositionToll.Hori.Min" & ": " & Position.PositionToll.Hori.Min & " --> " & X1)
        End If
        If Position.PositionToll.Hori.Max <> X2 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".PositionToll.Hori.Max" & ": " & Position.PositionToll.Hori.Max & " --> " & X2)
        End If
        If Position.PositionToll.Vert.Min <> Y1 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".PositionToll.Vert.Min" & ": " & Position.PositionToll.Vert.Min & " --> " & Y1)
        End If
        If Position.PositionToll.Vert.Max <> Y2 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".PositionToll.Vert.Max" & ": " & Position.PositionToll.Vert.Max & " --> " & Y2)
        End If

        If Position.Current.Min <> CurMin Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Current.Min" & ": " & Position.Current.Min & " --> " & CurMin)
        End If
        If Position.Current.Max <> CurMax Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Current.Max" & ": " & Position.Current.Max & " --> " & CurMax)
        End If
    End Sub

#End Region

#Region "EditLEDsResults"

    Private Sub ViewLEDs_ShowImage(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer, bmpToShow As Bitmap,
                                   result As LasCore.ucViewLEDsResults.udtResultLED, param As LasCore.ucViewLEDsResults.udtParamLED) Handles _
                               ucViewLEDsLowBeamResults.ShowImage, ucViewLEDsHighBeamResults.ShowImage,
        ucViewLEDsPosResults.ShowImage, ucViewLEDsTurnResults.ShowImage, ucViewLEDsDayResults.ShowImage,
        ucViewLEDsSideResults.ShowImage, ucViewLEDsComingHomeResults.ShowImage, ucViewLEDsCorneringLightResults.ShowImage

        picImageCamera.Image = bmpToShow
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)
        Application.DoEvents()



        'Shows results
        Dim res As New LAS.udtLEDsTestResults.udtResultLED()
        res.TestDone = result.Res.TestDone
        res.Ok = result.Res.Ok
        res.HoriPosition = New LasCore.ResultData(result.HoriPosition.Ok, result.HoriPosition.TestDone, EnzoLib.TextToSingle(result.HoriPosition.ValueStr))
        res.VertPosition = New LasCore.ResultData(result.VertPosition.Ok, result.VertPosition.TestDone, EnzoLib.TextToSingle(result.VertPosition.ValueStr))
        res.RedColor = New LasCore.ResultData(result.RedColor.Ok, result.RedColor.TestDone, EnzoLib.TextToSingle(result.RedColor.ValueStr))
        res.GreenColor = New LasCore.ResultData(result.GreenColor.Ok, result.GreenColor.TestDone, EnzoLib.TextToSingle(result.GreenColor.ValueStr))
        res.BlueColor = New LasCore.ResultData(result.BlueColor.Ok, result.BlueColor.TestDone, EnzoLib.TextToSingle(result.BlueColor.ValueStr))
        res.HoriSize = New LasCore.ResultData(result.HoriSize.Ok, result.HoriSize.TestDone, EnzoLib.TextToSingle(result.HoriSize.ValueStr))
        res.VertSize = New LasCore.ResultData(result.VertSize.Ok, result.VertSize.TestDone, EnzoLib.TextToSingle(result.VertSize.ValueStr))

        Dim par As New RecipeLEDs.udtParamLED
        par.Name = param.Name
        par.PosEnabled = param.PosEnabled
        par.ColorEnabled = param.ColorEnabled
        par.SizeEnabled = param.SizeEnabled
        par.PosHori = New LAS.Recipe.udtParam(param.PosHori.Enabled, param.PosHori.Value, param.PosHori.Min, param.PosHori.Max)
        par.PosVert = New LAS.Recipe.udtParam(param.PosVert.Enabled, param.PosVert.Value, param.PosVert.Min, param.PosVert.Max)
        par.Red = New LAS.Recipe.udtParam(param.Red.Enabled, param.Red.Value, param.Red.Min, param.Red.Max)
        par.Green = New LAS.Recipe.udtParam(param.Green.Enabled, param.Green.Value, param.Green.Min, param.Green.Max)
        par.Blue = New LAS.Recipe.udtParam(param.Blue.Enabled, param.Blue.Value, param.Blue.Min, param.Blue.Max)
        par.Brightness = New LAS.Recipe.udtParam(param.Brightness.Enabled, param.Brightness.Value, param.Brightness.Min, param.Brightness.Max)
        par.SizeHori = New LAS.Recipe.udtParam(param.SizeHori.Enabled, param.SizeHori.Value, param.SizeHori.Min, param.SizeHori.Max)
        par.SizeVert = New LAS.Recipe.udtParam(param.SizeVert.Enabled, param.SizeVert.Value, param.SizeVert.Min, param.SizeVert.Max)
        par.Advanced.AOI.Left = param.AOI.Left
        par.Advanced.AOI.Top = param.AOI.Top
        par.Advanced.AOI.Width = param.AOI.Width
        par.Advanced.AOI.Height = param.AOI.Height

        If res.TestDone Then
            xTest.LEDsTest.DrawResult(iAOI, par, res)
        End If


    End Sub

    Private Sub ViewLEDs_CancelPressed(ByVal sender As LasCore.ucViewLEDsResults, bmpToShow As Bitmap) Handles _
        ucViewLEDsLowBeamResults.CancelPressed, ucViewLEDsHighBeamResults.CancelPressed,
        ucViewLEDsPosResults.CancelPressed, ucViewLEDsTurnResults.CancelPressed, ucViewLEDsDayResults.CancelPressed,
        ucViewLEDsSideResults.CancelPressed, ucViewLEDsComingHomeResults.CancelPressed, ucViewLEDsCorneringLightResults.CancelPressed

        picImageCamera.Image = bmpToShow
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)
        Application.DoEvents()

        mnu.ActivateMenuSuspended()

    End Sub

    Private Sub ViewLEDs_EditPositionPressed(sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer, bmpToShow As Bitmap, ptoX As Integer, ptoY As Integer) Handles _
        ucViewLEDsLowBeamResults.EditPositionPressed, ucViewLEDsHighBeamResults.EditPositionPressed,
        ucViewLEDsPosResults.EditPositionPressed, ucViewLEDsTurnResults.EditPositionPressed, ucViewLEDsDayResults.EditPositionPressed,
        ucViewLEDsSideResults.EditPositionPressed, ucViewLEDsComingHomeResults.EditPositionPressed, ucViewLEDsCorneringLightResults.EditPositionPressed

        mnu.SuspendMenu()

        picImageCamera.Image = bmpToShow
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)
        Application.DoEvents()

        ' xGraphRes.DrawCrossWithCircle(Color.Lime, 1, ptoX, ptoY, 20, 20, 3)

    End Sub
    Private Sub ViewLEDs_EditAoiPressed(sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer, bmpToShow As Bitmap) Handles _
        ucViewLEDsLowBeamResults.EditAoiPressed, ucViewLEDsHighBeamResults.EditAoiPressed,
       ucViewLEDsPosResults.EditAoiPressed, ucViewLEDsTurnResults.EditAoiPressed, ucViewLEDsDayResults.EditAoiPressed,
       ucViewLEDsSideResults.EditAoiPressed, ucViewLEDsComingHomeResults.EditAoiPressed, ucViewLEDsCorneringLightResults.EditAoiPressed

        mnu.SuspendMenu()

        picImageCamera.Image = bmpToShow
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)
        Application.DoEvents()


    End Sub
    Private Sub ViewLEDs_EditPressed(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer) Handles _
        ucViewLEDsLowBeamResults.EditPressed, ucViewLEDsHighBeamResults.EditPressed,
        ucViewLEDsPosResults.EditPressed, ucViewLEDsTurnResults.EditPressed, ucViewLEDsDayResults.EditPressed,
        ucViewLEDsSideResults.EditPressed, ucViewLEDsComingHomeResults.EditPressed, ucViewLEDsCorneringLightResults.EditPressed

        mnu.SuspendMenu()

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)

    End Sub
    Private Sub ViewLEDs_CreateSizeableRect(ByVal sender As LasCore.ucViewLEDsResults, rect As Rectangle, pto As Point) Handles _
        ucViewLEDsLowBeamResults.CreateSizeableRect, ucViewLEDsHighBeamResults.CreateSizeableRect,
        ucViewLEDsPosResults.CreateSizeableRect, ucViewLEDsTurnResults.CreateSizeableRect, ucViewLEDsDayResults.CreateSizeableRect,
        ucViewLEDsSideResults.CreateSizeableRect, ucViewLEDsComingHomeResults.CreateSizeableRect, ucViewLEDsCorneringLightResults.CreateSizeableRect

        Dim Crosses As New List(Of CsharpLibrary.Cross)
        Dim c As New CsharpLibrary.Cross(Color.Lime, 1, New Point(pto.X, pto.Y), New Size(20, 20), New CsharpLibrary.Circle(Color.Lime, 1, New Point(pto.X, pto.Y), 3))
        Crosses.Add(c)
        xSizeableShape.Show(rect, Crosses)

    End Sub
    Private Sub ViewLEDs_CreateSizeableRectAoiLB(ByVal sender As LasCore.ucViewLEDsResults, rect As Rectangle, iAOI As Integer) Handles _
        ucViewLEDsLowBeamResults.CreateSizeableRectAoi

        Dim Rects As New List(Of Rectangle)
        For Each item As RecipeLEDs.udtParamLED In xTest.RunningModel.LEDs.LowBeam.Params '   xTest.RunningModel.LEDs.LowBeam
            If item.Name <> iAOI.ToString Then
                Dim r As New Rectangle(item.Advanced.AOI.Left, item.Advanced.AOI.Top, item.Advanced.AOI.Width, item.Advanced.AOI.Height)
                Rects.Add(r)
            End If
        Next
        xSizeableShape.Show(rect, Rects)

    End Sub
    Private Sub ViewLEDs_CreateSizeableRectAoiHB(ByVal sender As LasCore.ucViewLEDsResults, rect As Rectangle, iAOI As Integer) Handles _
         ucViewLEDsHighBeamResults.CreateSizeableRectAoi

        Dim Rects As New List(Of Rectangle)
        'For Each item As RecipeLEDs.udtParamLED In xTest.RunningModel.LEDs.HighBeam
        For Each item As RecipeLEDs.udtParamLED In xTest.RunningModel.LEDs.HighBeam.Params
            If item.Name <> iAOI.ToString Then
                Dim r As New Rectangle(item.Advanced.AOI.Left, item.Advanced.AOI.Top, item.Advanced.AOI.Width, item.Advanced.AOI.Height)
                Rects.Add(r)
            End If
        Next
        xSizeableShape.Show(rect, Rects)

    End Sub
    Private Sub ViewLEDs_CreateSizeableRectAoiPos(ByVal sender As LasCore.ucViewLEDsResults, rect As Rectangle, iAOI As Integer) Handles _
        ucViewLEDsPosResults.CreateSizeableRectAoi

        Dim Rects As New List(Of Rectangle)
        For Each item As RecipeLEDs.udtParamLED In xTest.RunningModel.LEDs.ParkLight.Params
            If item.Name <> iAOI.ToString Then
                Dim r As New Rectangle(item.Advanced.AOI.Left, item.Advanced.AOI.Top, item.Advanced.AOI.Width, item.Advanced.AOI.Height)
                Rects.Add(r)
            End If
        Next
        xSizeableShape.Show(rect, Rects)

    End Sub
    Private Sub ViewLEDs_CreateSizeableRectAoiTI(ByVal sender As LasCore.ucViewLEDsResults, rect As Rectangle, iAOI As Integer) Handles _
        ucViewLEDsTurnResults.CreateSizeableRectAoi

        Dim Rects As New List(Of Rectangle)
        For Each item As RecipeLEDs.udtParamLED In xTest.RunningModel.LEDs.TurnLight.Params
            If item.Name <> iAOI.ToString Then
                Dim r As New Rectangle(item.Advanced.AOI.Left, item.Advanced.AOI.Top, item.Advanced.AOI.Width, item.Advanced.AOI.Height)
                Rects.Add(r)
            End If
        Next
        xSizeableShape.Show(rect, Rects)

    End Sub
    Private Sub ViewLEDs_CreateSizeableRectAoiDrl(ByVal sender As LasCore.ucViewLEDsResults, rect As Rectangle, iAOI As Integer) Handles _
        ucViewLEDsDayResults.CreateSizeableRectAoi

        Dim Rects As New List(Of Rectangle)
        For Each item As RecipeLEDs.udtParamLED In xTest.RunningModel.LEDs.DayLight.Params
            If item.Name <> iAOI.ToString Then
                Dim r As New Rectangle(item.Advanced.AOI.Left, item.Advanced.AOI.Top, item.Advanced.AOI.Width, item.Advanced.AOI.Height)
                Rects.Add(r)
            End If
        Next
        xSizeableShape.Show(rect, Rects)

    End Sub
    Private Sub ViewLEDs_CreateSizeableRectAoiSM(ByVal sender As LasCore.ucViewLEDsResults, rect As Rectangle, iAOI As Integer) Handles _
        ucViewLEDsSideResults.CreateSizeableRectAoi

        Dim Rects As New List(Of Rectangle)
        For Each item As RecipeLEDs.udtParamLED In xTest.RunningModel.LEDs.SideMarker.Params
            If item.Name <> iAOI.ToString Then
                Dim r As New Rectangle(item.Advanced.AOI.Left, item.Advanced.AOI.Top, item.Advanced.AOI.Width, item.Advanced.AOI.Height)
                Rects.Add(r)
            End If
        Next
        xSizeableShape.Show(rect, Rects)

    End Sub
    Private Sub ViewLEDs_CreateSizeableRectAoiCH(ByVal sender As LasCore.ucViewLEDsResults, rect As Rectangle, iAOI As Integer) Handles _
        ucViewLEDsComingHomeResults.CreateSizeableRectAoi

        Dim Rects As New List(Of Rectangle)
        For Each item As RecipeLEDs.udtParamLED In xTest.RunningModel.LEDs.ComingHome.Params
            If item.Name <> iAOI.ToString Then
                Dim r As New Rectangle(item.Advanced.AOI.Left, item.Advanced.AOI.Top, item.Advanced.AOI.Width, item.Advanced.AOI.Height)
                Rects.Add(r)
            End If
        Next
        xSizeableShape.Show(rect, Rects)

    End Sub
    Private Sub ViewLEDs_CreateSizeableRectAoiCL(ByVal sender As LasCore.ucViewLEDsResults, rect As Rectangle, iAOI As Integer) Handles _
        ucViewLEDsCorneringLightResults.CreateSizeableRectAoi

        Dim Rects As New List(Of Rectangle)
        For Each item As RecipeLEDs.udtParamLED In xTest.RunningModel.LEDs.CorneringLight.Params
            If item.Name <> iAOI.ToString Then
                Dim r As New Rectangle(item.Advanced.AOI.Left, item.Advanced.AOI.Top, item.Advanced.AOI.Width, item.Advanced.AOI.Height)
                Rects.Add(r)
            End If
        Next
        xSizeableShape.Show(rect, Rects)

    End Sub


    Private Sub ViewLEDs_RemoveSizeableRect(ByVal sender As LasCore.ucViewLEDsResults) Handles _
        ucViewLEDsLowBeamResults.RemoveSizeableRect, ucViewLEDsHighBeamResults.RemoveSizeableRect,
        ucViewLEDsPosResults.RemoveSizeableRect, ucViewLEDsTurnResults.RemoveSizeableRect, ucViewLEDsDayResults.RemoveSizeableRect,
        ucViewLEDsSideResults.RemoveSizeableRect, ucViewLEDsComingHomeResults.RemoveSizeableRect, ucViewLEDsCorneringLightResults.RemoveSizeableRect

        Try
            xSizeableShape.Hide()
        Catch ex As Exception

        End Try
    End Sub


    Private Sub ViewLEDs_SavePositionPressedLB(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer) Handles ucViewLEDsLowBeamResults.SavePositionPressed
        mnu.ActivateMenuSuspended()

        With xSizeableShape.rect
            sender.DisplayPositionTestLimitsOneLed(iAOI, .X, .X + .Width, .Y, .Y + .Height)
            xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
            'UpdateEvents("RecipLEDs.LowBeam(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.LowBeam(iAOI), .X, .X + .Width, .Y, .Y + .Height)
            'xTest.RunningModel.LEDs.LowBeam(iAOI).PosHori.Min = .X
            'xTest.RunningModel.LEDs.LowBeam(iAOI).PosHori.Max = .X + .Width
            'xTest.RunningModel.LEDs.LowBeam(iAOI).PosVert.Min = .Y
            'xTest.RunningModel.LEDs.LowBeam(iAOI).PosVert.Max = .Y + .Height

            UpdateEvents("RecipLEDs.LowBeam(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.LowBeam.Params(iAOI), .X, .X + .Width, .Y, .Y + .Height)
            xTest.RunningModel.LEDs.LowBeam.Params(iAOI).PosHori.Min = .X
            xTest.RunningModel.LEDs.LowBeam.Params(iAOI).PosHori.Max = .X + .Width
            xTest.RunningModel.LEDs.LowBeam.Params(iAOI).PosVert.Min = .Y
            xTest.RunningModel.LEDs.LowBeam.Params(iAOI).PosVert.Max = .Y + .Height

            xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
        End With

    End Sub
    Private Sub ViewLEDs_SaveColorPressedLB(sender As LasCore.ucViewLEDsResults, iAOI As Integer, RedMin As Integer, RedMax As Integer, GreenMin As Integer, GreenMax As Integer, BlueMin As Integer, BlueMax As Integer) Handles ucViewLEDsLowBeamResults.SaveColorPressed
        mnu.ActivateMenuSuspended()

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        'UpdateEvents("RecipLEDs.LowBeam(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.LowBeam(iAOI), RedMin, RedMax, GreenMin, GreenMax, BlueMin, BlueMax)
        'xTest.RunningModel.LEDs.LowBeam(iAOI).Red.Min = RedMin
        'xTest.RunningModel.LEDs.LowBeam(iAOI).Red.Max = RedMax
        'xTest.RunningModel.LEDs.LowBeam(iAOI).Green.Min = GreenMin
        'xTest.RunningModel.LEDs.LowBeam(iAOI).Green.Max = GreenMax
        'xTest.RunningModel.LEDs.LowBeam(iAOI).Blue.Min = BlueMin
        'xTest.RunningModel.LEDs.LowBeam(iAOI).Blue.Max = BlueMax

        UpdateEvents("RecipLEDs.LowBeam(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.LowBeam.Params(iAOI), RedMin, RedMax, GreenMin, GreenMax, BlueMin, BlueMax)
        xTest.RunningModel.LEDs.LowBeam.Params(iAOI).Red.Min = RedMin
        xTest.RunningModel.LEDs.LowBeam.Params(iAOI).Red.Max = RedMax
        xTest.RunningModel.LEDs.LowBeam.Params(iAOI).Green.Min = GreenMin
        xTest.RunningModel.LEDs.LowBeam.Params(iAOI).Green.Max = GreenMax
        xTest.RunningModel.LEDs.LowBeam.Params(iAOI).Blue.Min = BlueMin
        xTest.RunningModel.LEDs.LowBeam.Params(iAOI).Blue.Max = BlueMax

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

    End Sub
    Private Sub ViewLEDs_SaveSizePressedLB(sender As LasCore.ucViewLEDsResults, iAOI As Integer, HorMin As Integer, HorMax As Integer, VerMin As Integer, VerMax As Integer) Handles ucViewLEDsLowBeamResults.SaveSizePressed
        mnu.ActivateMenuSuspended()

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        'UpdateEvents("RecipLEDs.LowBeam(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.LowBeam(iAOI), HorMin, HorMax, VerMin, VerMax)
        'xTest.RunningModel.LEDs.LowBeam(iAOI).SizeHori.Min = HorMin
        'xTest.RunningModel.LEDs.LowBeam(iAOI).SizeHori.Max = HorMax
        'xTest.RunningModel.LEDs.LowBeam(iAOI).SizeVert.Min = VerMin
        'xTest.RunningModel.LEDs.LowBeam(iAOI).SizeVert.Max = VerMax

        UpdateEvents("RecipLEDs.LowBeam(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.LowBeam.Params(iAOI), HorMin, HorMax, VerMin, VerMax)
        xTest.RunningModel.LEDs.LowBeam.Params(iAOI).SizeHori.Min = HorMin
        xTest.RunningModel.LEDs.LowBeam.Params(iAOI).SizeHori.Max = HorMax
        xTest.RunningModel.LEDs.LowBeam.Params(iAOI).SizeVert.Min = VerMin
        xTest.RunningModel.LEDs.LowBeam.Params(iAOI).SizeVert.Max = VerMax
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewLEDs_SaveAoiPressedLB(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer) Handles ucViewLEDsLowBeamResults.SaveAoiPressed
        mnu.ActivateMenuSuspended()

        With xSizeableShape.rect
            sender.DisplayAoiTestLimitsOneLed(iAOI, .X, .Y, .X + .Width, .Y + .Height)
            xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
            'UpdateEvents("RecipLEDs.LowBeam(" & iAOI.ToString & ").Advanced.AOI", xTest.RunningModel.LEDs.LowBeam(iAOI).Advanced.AOI, .X, .Y, .Width, .Height)
            'xTest.RunningModel.LEDs.LowBeam(iAOI).Advanced.AOI.Left = .X
            'xTest.RunningModel.LEDs.LowBeam(iAOI).Advanced.AOI.Top = .Y
            'xTest.RunningModel.LEDs.LowBeam(iAOI).Advanced.AOI.Width = .Width
            'xTest.RunningModel.LEDs.LowBeam(iAOI).Advanced.AOI.Height = .Height

            UpdateEvents("RecipLEDs.LowBeam(" & iAOI.ToString & ").Advanced.AOI", xTest.RunningModel.LEDs.LowBeam.Params(iAOI).Advanced.AOI, .X, .Y, .Width, .Height)
            xTest.RunningModel.LEDs.LowBeam.Params(iAOI).Advanced.AOI.Left = .X
            xTest.RunningModel.LEDs.LowBeam.Params(iAOI).Advanced.AOI.Top = .Y
            xTest.RunningModel.LEDs.LowBeam.Params(iAOI).Advanced.AOI.Width = .Width
            xTest.RunningModel.LEDs.LowBeam.Params(iAOI).Advanced.AOI.Height = .Height

            xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
        End With


    End Sub

    Private Sub ViewLEDs_SavePositionPressedHB(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer) Handles ucViewLEDsHighBeamResults.SavePositionPressed
        mnu.ActivateMenuSuspended()

        With xSizeableShape.rect
            sender.DisplayPositionTestLimitsOneLed(iAOI, .X, .X + .Width, .Y, .Y + .Height)
            xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
            'UpdateEvents("RecipLEDs.HighBeam(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.HighBeam.Params(iAOI), .X, .X + .Width, .Y, .Y + .Height)
            'xTest.RunningModel.LEDs.HighBeam(iAOI).PosHori.Min = .X
            'xTest.RunningModel.LEDs.HighBeam(iAOI).PosHori.Max = .X + .Width
            'xTest.RunningModel.LEDs.HighBeam(iAOI).PosVert.Min = .Y
            'xTest.RunningModel.LEDs.HighBeam(iAOI).PosVert.Max = .Y + .Height

            UpdateEvents("RecipLEDs.HighBeam(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.HighBeam.Params(iAOI), .X, .X + .Width, .Y, .Y + .Height)
            xTest.RunningModel.LEDs.HighBeam.Params(iAOI).PosHori.Min = .X
            xTest.RunningModel.LEDs.HighBeam.Params(iAOI).PosHori.Max = .X + .Width
            xTest.RunningModel.LEDs.HighBeam.Params(iAOI).PosVert.Min = .Y
            xTest.RunningModel.LEDs.HighBeam.Params(iAOI).PosVert.Max = .Y + .Height

            xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
        End With
    End Sub
    Private Sub ViewLEDs_SaveColorPressedHB(sender As LasCore.ucViewLEDsResults, iAOI As Integer, RedMin As Integer, RedMax As Integer, GreenMin As Integer, GreenMax As Integer, BlueMin As Integer, BlueMax As Integer) Handles ucViewLEDsHighBeamResults.SaveColorPressed
        mnu.ActivateMenuSuspended()

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipLEDs.HighBeam(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.HighBeam.Params(iAOI), RedMin, RedMax, GreenMin, GreenMax, BlueMin, BlueMax)
        xTest.RunningModel.LEDs.HighBeam.Params(iAOI).Red.Min = RedMin
        xTest.RunningModel.LEDs.HighBeam.Params(iAOI).Red.Max = RedMax
        xTest.RunningModel.LEDs.HighBeam.Params(iAOI).Green.Min = GreenMin
        xTest.RunningModel.LEDs.HighBeam.Params(iAOI).Green.Max = GreenMax
        xTest.RunningModel.LEDs.HighBeam.Params(iAOI).Blue.Min = BlueMin
        xTest.RunningModel.LEDs.HighBeam.Params(iAOI).Blue.Max = BlueMax
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

    End Sub
    Private Sub ViewLEDs_SaveSizePressedHB(sender As LasCore.ucViewLEDsResults, iAOI As Integer, HorMin As Integer, HorMax As Integer, VerMin As Integer, VerMax As Integer) Handles ucViewLEDsHighBeamResults.SaveSizePressed
        mnu.ActivateMenuSuspended()

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipLEDs.HighBeam(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.HighBeam.Params(iAOI), HorMin, HorMax, VerMin, VerMax)
        xTest.RunningModel.LEDs.HighBeam.Params(iAOI).SizeHori.Min = HorMin
        xTest.RunningModel.LEDs.HighBeam.Params(iAOI).SizeHori.Max = HorMax
        xTest.RunningModel.LEDs.HighBeam.Params(iAOI).SizeVert.Min = VerMin
        xTest.RunningModel.LEDs.HighBeam.Params(iAOI).SizeVert.Max = VerMax
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewLEDs_SaveAoiPressedHB(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer) Handles ucViewLEDsHighBeamResults.SaveAoiPressed
        mnu.ActivateMenuSuspended()

        With xSizeableShape.rect
            sender.DisplayAoiTestLimitsOneLed(iAOI, .X, .Y, .X + .Width, .Y + .Height)
            xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
            UpdateEvents("RecipLEDs.HighBeam(" & iAOI.ToString & ").Advanced.AOI", xTest.RunningModel.LEDs.HighBeam.Params(iAOI).Advanced.AOI, .X, .Y, .Width, .Height)
            xTest.RunningModel.LEDs.HighBeam.Params(iAOI).Advanced.AOI.Left = .X
            xTest.RunningModel.LEDs.HighBeam.Params(iAOI).Advanced.AOI.Top = .Y
            xTest.RunningModel.LEDs.HighBeam.Params(iAOI).Advanced.AOI.Width = .Width
            xTest.RunningModel.LEDs.HighBeam.Params(iAOI).Advanced.AOI.Height = .Height
            xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
        End With
    End Sub


    Private Sub ViewLEDs_SavePositionPressedPL(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer) Handles ucViewLEDsPosResults.SavePositionPressed
        mnu.ActivateMenuSuspended()

        With xSizeableShape.rect
            sender.DisplayPositionTestLimitsOneLed(iAOI, .X, .X + .Width, .Y, .Y + .Height)
            xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
            UpdateEvents("RecipLEDs.ParkLight(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.ParkLight.Params(iAOI), .X, .X + .Width, .Y, .Y + .Height)
            xTest.RunningModel.LEDs.ParkLight.Params(iAOI).PosHori.Min = .X
            xTest.RunningModel.LEDs.ParkLight.Params(iAOI).PosHori.Max = .X + .Width
            xTest.RunningModel.LEDs.ParkLight.Params(iAOI).PosVert.Min = .Y
            xTest.RunningModel.LEDs.ParkLight.Params(iAOI).PosVert.Max = .Y + .Height
            xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
        End With

    End Sub
    Private Sub ViewLEDs_SaveColorPressedPL(sender As LasCore.ucViewLEDsResults, iAOI As Integer, RedMin As Integer, RedMax As Integer, GreenMin As Integer, GreenMax As Integer, BlueMin As Integer, BlueMax As Integer) Handles ucViewLEDsPosResults.SaveColorPressed
        mnu.ActivateMenuSuspended()

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipLEDs.ParkLight(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.ParkLight.Params(iAOI), RedMin, RedMax, GreenMin, GreenMax, BlueMin, BlueMax)
        xTest.RunningModel.LEDs.ParkLight.Params(iAOI).Red.Min = RedMin
        xTest.RunningModel.LEDs.ParkLight.Params(iAOI).Red.Max = RedMax
        xTest.RunningModel.LEDs.ParkLight.Params(iAOI).Green.Min = GreenMin
        xTest.RunningModel.LEDs.ParkLight.Params(iAOI).Green.Max = GreenMax
        xTest.RunningModel.LEDs.ParkLight.Params(iAOI).Blue.Min = BlueMin
        xTest.RunningModel.LEDs.ParkLight.Params(iAOI).Blue.Max = BlueMax
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

    End Sub
    Private Sub ViewLEDs_SaveSizePressedPL(sender As LasCore.ucViewLEDsResults, iAOI As Integer, HorMin As Integer, HorMax As Integer, VerMin As Integer, VerMax As Integer) Handles ucViewLEDsPosResults.SaveSizePressed
        mnu.ActivateMenuSuspended()

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipLEDs.ParkLight(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.ParkLight.Params(iAOI), HorMin, HorMax, VerMin, VerMax)
        xTest.RunningModel.LEDs.ParkLight.Params(iAOI).SizeHori.Min = HorMin
        xTest.RunningModel.LEDs.ParkLight.Params(iAOI).SizeHori.Max = HorMax
        xTest.RunningModel.LEDs.ParkLight.Params(iAOI).SizeVert.Min = VerMin
        xTest.RunningModel.LEDs.ParkLight.Params(iAOI).SizeVert.Max = VerMax
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewLEDs_SaveAoiPressedPL(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer) Handles ucViewLEDsPosResults.SaveAoiPressed
        mnu.ActivateMenuSuspended()

        'sender.DisplayAoiTestLimitsOneLed(iAOI, SizeableRect.xRect, SizeableRect.yRect, SizeableRect.xRect + SizeableRect.wRect, SizeableRect.yRect + SizeableRect.hRect)

        'xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        'UpdateEvents("RecipLEDs.ParkLight(" & iAOI.ToString & ").Advanced.AOI", xTest.RunningModel.LEDs.ParkLight(iAOI).Advanced.AOI, SizeableRect.xRect, SizeableRect.yRect,
        '             SizeableRect.wRect, SizeableRect.hRect)
        'xTest.RunningModel.LEDs.ParkLight(iAOI).Advanced.AOI.Left = SizeableRect.xRect
        'xTest.RunningModel.LEDs.ParkLight(iAOI).Advanced.AOI.Top = SizeableRect.yRect
        'xTest.RunningModel.LEDs.ParkLight(iAOI).Advanced.AOI.Width = SizeableRect.wRect
        'xTest.RunningModel.LEDs.ParkLight(iAOI).Advanced.AOI.Height = SizeableRect.hRect
        'xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        With xSizeableShape.rect
            sender.DisplayAoiTestLimitsOneLed(iAOI, .X, .Y, .X + .Width, .Y + .Height)
            xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
            UpdateEvents("RecipLEDs.ParkLight(" & iAOI.ToString & ").Advanced.AOI", xTest.RunningModel.LEDs.ParkLight.Params(iAOI).Advanced.AOI, .X, .Y, .Width, .Height)
            xTest.RunningModel.LEDs.ParkLight.Params(iAOI).Advanced.AOI.Left = .X
            xTest.RunningModel.LEDs.ParkLight.Params(iAOI).Advanced.AOI.Top = .Y
            xTest.RunningModel.LEDs.ParkLight.Params(iAOI).Advanced.AOI.Width = .Width
            xTest.RunningModel.LEDs.ParkLight.Params(iAOI).Advanced.AOI.Height = .Height
            xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
        End With
    End Sub

    Private Sub ViewLEDs_SavePositionPressedTI(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer) Handles ucViewLEDsTurnResults.SavePositionPressed
        mnu.ActivateMenuSuspended()

        With xSizeableShape.rect
            sender.DisplayPositionTestLimitsOneLed(iAOI, .X, .X + .Width, .Y, .Y + .Height)
            xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
            UpdateEvents("RecipLEDs.TurnLight(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.TurnLight.Params(iAOI), .X, .X + .Width, .Y, .Y + .Height)
            xTest.RunningModel.LEDs.TurnLight.Params(iAOI).PosHori.Min = .X
            xTest.RunningModel.LEDs.TurnLight.Params(iAOI).PosHori.Max = .X + .Width
            xTest.RunningModel.LEDs.TurnLight.Params(iAOI).PosVert.Min = .Y
            xTest.RunningModel.LEDs.TurnLight.Params(iAOI).PosVert.Max = .Y + .Height
            xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
        End With
    End Sub
    Private Sub ViewLEDs_SaveColorPressedTI(sender As LasCore.ucViewLEDsResults, iAOI As Integer, RedMin As Integer, RedMax As Integer, GreenMin As Integer, GreenMax As Integer, BlueMin As Integer, BlueMax As Integer) Handles ucViewLEDsTurnResults.SaveColorPressed
        mnu.ActivateMenuSuspended()

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipLEDs.TurnLight(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.TurnLight.Params(iAOI), RedMin, RedMax, GreenMin, GreenMax, BlueMin, BlueMax)
        xTest.RunningModel.LEDs.TurnLight.Params(iAOI).Red.Min = RedMin
        xTest.RunningModel.LEDs.TurnLight.Params(iAOI).Red.Max = RedMax
        xTest.RunningModel.LEDs.TurnLight.Params(iAOI).Green.Min = GreenMin
        xTest.RunningModel.LEDs.TurnLight.Params(iAOI).Green.Max = GreenMax
        xTest.RunningModel.LEDs.TurnLight.Params(iAOI).Blue.Min = BlueMin
        xTest.RunningModel.LEDs.TurnLight.Params(iAOI).Blue.Max = BlueMax
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

    End Sub
    Private Sub ViewLEDs_SaveSizePressedTI(sender As LasCore.ucViewLEDsResults, iAOI As Integer, HorMin As Integer, HorMax As Integer, VerMin As Integer, VerMax As Integer) Handles ucViewLEDsTurnResults.SaveSizePressed
        mnu.ActivateMenuSuspended()

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipLEDs.TurnLight(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.TurnLight.Params(iAOI), HorMin, HorMax, VerMin, VerMax)
        xTest.RunningModel.LEDs.TurnLight.Params(iAOI).SizeHori.Min = HorMin
        xTest.RunningModel.LEDs.TurnLight.Params(iAOI).SizeHori.Max = HorMax
        xTest.RunningModel.LEDs.TurnLight.Params(iAOI).SizeVert.Min = VerMin
        xTest.RunningModel.LEDs.TurnLight.Params(iAOI).SizeVert.Max = VerMax
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewLEDs_SaveAoiPressedTI(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer) Handles ucViewLEDsTurnResults.SaveAoiPressed
        mnu.ActivateMenuSuspended()

        With xSizeableShape.rect
            sender.DisplayAoiTestLimitsOneLed(iAOI, .X, .Y, .X + .Width, .Y + .Height)
            xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
            UpdateEvents("RecipLEDs.TurnLight(" & iAOI.ToString & ").Advanced.AOI", xTest.RunningModel.LEDs.TurnLight.Params(iAOI).Advanced.AOI, .X, .Y, .Width, .Height)
            xTest.RunningModel.LEDs.TurnLight.Params(iAOI).Advanced.AOI.Left = .X
            xTest.RunningModel.LEDs.TurnLight.Params(iAOI).Advanced.AOI.Top = .Y
            xTest.RunningModel.LEDs.TurnLight.Params(iAOI).Advanced.AOI.Width = .Width
            xTest.RunningModel.LEDs.TurnLight.Params(iAOI).Advanced.AOI.Height = .Height
            xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
        End With

    End Sub

    Private Sub ViewLEDs_SavePositionPressedDL(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer) Handles ucViewLEDsDayResults.SavePositionPressed
        mnu.ActivateMenuSuspended()

        With xSizeableShape.rect
            sender.DisplayPositionTestLimitsOneLed(iAOI, .X, .X + .Width, .Y, .Y + .Height)
            xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
            UpdateEvents("RecipLEDs.DayLight(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.DayLight.Params(iAOI), .X, .X + .Width, .Y, .Y + .Height)
            xTest.RunningModel.LEDs.DayLight.Params(iAOI).PosHori.Min = .X
            xTest.RunningModel.LEDs.DayLight.Params(iAOI).PosHori.Max = .X + .Width
            xTest.RunningModel.LEDs.DayLight.Params(iAOI).PosVert.Min = .Y
            xTest.RunningModel.LEDs.DayLight.Params(iAOI).PosVert.Max = .Y + .Height
            xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
        End With

    End Sub
    Private Sub ViewLEDs_SaveColorPressedDL(sender As LasCore.ucViewLEDsResults, iAOI As Integer, RedMin As Integer, RedMax As Integer, GreenMin As Integer, GreenMax As Integer, BlueMin As Integer, BlueMax As Integer) Handles ucViewLEDsDayResults.SaveColorPressed
        mnu.ActivateMenuSuspended()

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipLEDs.DayLight(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.DayLight.Params(iAOI), RedMin, RedMax, GreenMin, GreenMax, BlueMin, BlueMax)
        xTest.RunningModel.LEDs.DayLight.Params(iAOI).Red.Min = RedMin
        xTest.RunningModel.LEDs.DayLight.Params(iAOI).Red.Max = RedMax
        xTest.RunningModel.LEDs.DayLight.Params(iAOI).Green.Min = GreenMin
        xTest.RunningModel.LEDs.DayLight.Params(iAOI).Green.Max = GreenMax
        xTest.RunningModel.LEDs.DayLight.Params(iAOI).Blue.Min = BlueMin
        xTest.RunningModel.LEDs.DayLight.Params(iAOI).Blue.Max = BlueMax
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

    End Sub
    Private Sub ViewLEDs_SaveSizePressedDL(sender As LasCore.ucViewLEDsResults, iAOI As Integer, HorMin As Integer, HorMax As Integer, VerMin As Integer, VerMax As Integer) Handles ucViewLEDsDayResults.SaveSizePressed
        mnu.ActivateMenuSuspended()

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipLEDs.DayLight(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.DayLight.Params(iAOI), HorMin, HorMax, VerMin, VerMax)
        xTest.RunningModel.LEDs.DayLight.Params(iAOI).SizeHori.Min = HorMin
        xTest.RunningModel.LEDs.DayLight.Params(iAOI).SizeHori.Max = HorMax
        xTest.RunningModel.LEDs.DayLight.Params(iAOI).SizeVert.Min = VerMin
        xTest.RunningModel.LEDs.DayLight.Params(iAOI).SizeVert.Max = VerMax
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewLEDs_SaveAoiPressedDL(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer) Handles ucViewLEDsDayResults.SaveAoiPressed
        mnu.ActivateMenuSuspended()

        With xSizeableShape.rect
            sender.DisplayAoiTestLimitsOneLed(iAOI, .X, .Y, .X + .Width, .Y + .Height)
            xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
            UpdateEvents("RecipLEDs.DayLight(" & iAOI.ToString & ").Advanced.AOI", xTest.RunningModel.LEDs.DayLight.Params(iAOI).Advanced.AOI, .X, .Y, .Width, .Height)
            xTest.RunningModel.LEDs.DayLight.Params(iAOI).Advanced.AOI.Left = .X
            xTest.RunningModel.LEDs.DayLight.Params(iAOI).Advanced.AOI.Top = .Y
            xTest.RunningModel.LEDs.DayLight.Params(iAOI).Advanced.AOI.Width = .Width
            xTest.RunningModel.LEDs.DayLight.Params(iAOI).Advanced.AOI.Height = .Height
            xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
        End With

    End Sub

    Private Sub ViewLEDs_SavePositionPressedSM(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer) Handles ucViewLEDsSideResults.SavePositionPressed
        mnu.ActivateMenuSuspended()

        With xSizeableShape.rect
            sender.DisplayPositionTestLimitsOneLed(iAOI, .X, .X + .Width, .Y, .Y + .Height)
            xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
            UpdateEvents("RecipLEDs.SideMarker(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.SideMarker.Params(iAOI), .X, .X + .Width, .Y, .Y + .Height)
            xTest.RunningModel.LEDs.SideMarker.Params(iAOI).PosHori.Min = .X
            xTest.RunningModel.LEDs.SideMarker.Params(iAOI).PosHori.Max = .X + .Width
            xTest.RunningModel.LEDs.SideMarker.Params(iAOI).PosVert.Min = .Y
            xTest.RunningModel.LEDs.SideMarker.Params(iAOI).PosVert.Max = .Y + .Height
            xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
        End With

    End Sub
    Private Sub ViewLEDs_SaveColorPressedSM(sender As LasCore.ucViewLEDsResults, iAOI As Integer, RedMin As Integer, RedMax As Integer, GreenMin As Integer, GreenMax As Integer, BlueMin As Integer, BlueMax As Integer) Handles ucViewLEDsSideResults.SaveColorPressed
        mnu.ActivateMenuSuspended()

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipLEDs.SideMarker(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.SideMarker.Params(iAOI), RedMin, RedMax, GreenMin, GreenMax, BlueMin, BlueMax)
        xTest.RunningModel.LEDs.SideMarker.Params(iAOI).Red.Min = RedMin
        xTest.RunningModel.LEDs.SideMarker.Params(iAOI).Red.Max = RedMax
        xTest.RunningModel.LEDs.SideMarker.Params(iAOI).Green.Min = GreenMin
        xTest.RunningModel.LEDs.SideMarker.Params(iAOI).Green.Max = GreenMax
        xTest.RunningModel.LEDs.SideMarker.Params(iAOI).Blue.Min = BlueMin
        xTest.RunningModel.LEDs.SideMarker.Params(iAOI).Blue.Max = BlueMax
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

    End Sub
    Private Sub ViewLEDs_SaveSizePressedSM(sender As LasCore.ucViewLEDsResults, iAOI As Integer, HorMin As Integer, HorMax As Integer, VerMin As Integer, VerMax As Integer) Handles ucViewLEDsSideResults.SaveSizePressed
        mnu.ActivateMenuSuspended()

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipLEDs.SideMarker(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.SideMarker.Params(iAOI), HorMin, HorMax, VerMin, VerMax)
        xTest.RunningModel.LEDs.SideMarker.Params(iAOI).SizeHori.Min = HorMin
        xTest.RunningModel.LEDs.SideMarker.Params(iAOI).SizeHori.Max = HorMax
        xTest.RunningModel.LEDs.SideMarker.Params(iAOI).SizeVert.Min = VerMin
        xTest.RunningModel.LEDs.SideMarker.Params(iAOI).SizeVert.Max = VerMax
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewLEDs_SaveAoiPressedSM(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer) Handles ucViewLEDsSideResults.SaveAoiPressed
        mnu.ActivateMenuSuspended()

        With xSizeableShape.rect
            sender.DisplayAoiTestLimitsOneLed(iAOI, .X, .Y, .X + .Width, .Y + .Height)
            xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
            UpdateEvents("RecipLEDs.SideMarker(" & iAOI.ToString & ").Advanced.AOI", xTest.RunningModel.LEDs.SideMarker.Params(iAOI).Advanced.AOI, .X, .Y, .Width, .Height)
            xTest.RunningModel.LEDs.SideMarker.Params(iAOI).Advanced.AOI.Left = .X
            xTest.RunningModel.LEDs.SideMarker.Params(iAOI).Advanced.AOI.Top = .Y
            xTest.RunningModel.LEDs.SideMarker.Params(iAOI).Advanced.AOI.Width = .Width
            xTest.RunningModel.LEDs.SideMarker.Params(iAOI).Advanced.AOI.Height = .Height
            xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
        End With

    End Sub

    Private Sub ViewLEDs_SavePositionPressedCH(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer) Handles ucViewLEDsComingHomeResults.SavePositionPressed
        mnu.ActivateMenuSuspended()

        With xSizeableShape.rect
            sender.DisplayPositionTestLimitsOneLed(iAOI, .X, .X + .Width, .Y, .Y + .Height)
            xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
            UpdateEvents("RecipLEDs.ComingHome(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.ComingHome.Params(iAOI), .X, .X + .Width, .Y, .Y + .Height)
            xTest.RunningModel.LEDs.ComingHome.Params(iAOI).PosHori.Min = .X
            xTest.RunningModel.LEDs.ComingHome.Params(iAOI).PosHori.Max = .X + .Width
            xTest.RunningModel.LEDs.ComingHome.Params(iAOI).PosVert.Min = .Y
            xTest.RunningModel.LEDs.ComingHome.Params(iAOI).PosVert.Max = .Y + .Height
            xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
        End With

    End Sub
    Private Sub ViewLEDs_SaveColorPressedCH(sender As LasCore.ucViewLEDsResults, iAOI As Integer, RedMin As Integer, RedMax As Integer, GreenMin As Integer, GreenMax As Integer, BlueMin As Integer, BlueMax As Integer) Handles ucViewLEDsComingHomeResults.SaveColorPressed
        mnu.ActivateMenuSuspended()

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipLEDs.ComingHome(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.ComingHome.Params(iAOI), RedMin, RedMax, GreenMin, GreenMax, BlueMin, BlueMax)
        xTest.RunningModel.LEDs.ComingHome.Params(iAOI).Red.Min = RedMin
        xTest.RunningModel.LEDs.ComingHome.Params(iAOI).Red.Max = RedMax
        xTest.RunningModel.LEDs.ComingHome.Params(iAOI).Green.Min = GreenMin
        xTest.RunningModel.LEDs.ComingHome.Params(iAOI).Green.Max = GreenMax
        xTest.RunningModel.LEDs.ComingHome.Params(iAOI).Blue.Min = BlueMin
        xTest.RunningModel.LEDs.ComingHome.Params(iAOI).Blue.Max = BlueMax
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

    End Sub
    Private Sub ViewLEDs_SaveSizePressedCH(sender As LasCore.ucViewLEDsResults, iAOI As Integer, HorMin As Integer, HorMax As Integer, VerMin As Integer, VerMax As Integer) Handles ucViewLEDsComingHomeResults.SaveSizePressed
        mnu.ActivateMenuSuspended()

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipLEDs.ComingHome(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.ComingHome.Params(iAOI), HorMin, HorMax, VerMin, VerMax)
        xTest.RunningModel.LEDs.ComingHome.Params(iAOI).SizeHori.Min = HorMin
        xTest.RunningModel.LEDs.ComingHome.Params(iAOI).SizeHori.Max = HorMax
        xTest.RunningModel.LEDs.ComingHome.Params(iAOI).SizeVert.Min = VerMin
        xTest.RunningModel.LEDs.ComingHome.Params(iAOI).SizeVert.Max = VerMax
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewLEDs_SaveAoiPressedCH(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer) Handles ucViewLEDsComingHomeResults.SaveAoiPressed
        mnu.ActivateMenuSuspended()

        With xSizeableShape.rect
            sender.DisplayAoiTestLimitsOneLed(iAOI, .X, .Y, .X + .Width, .Y + .Height)
            xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
            UpdateEvents("RecipLEDs.ComingHome(" & iAOI.ToString & ").Advanced.AOI", xTest.RunningModel.LEDs.ComingHome.Params(iAOI).Advanced.AOI, .X, .Y, .Width, .Height)
            xTest.RunningModel.LEDs.ComingHome.Params(iAOI).Advanced.AOI.Left = .X
            xTest.RunningModel.LEDs.ComingHome.Params(iAOI).Advanced.AOI.Top = .Y
            xTest.RunningModel.LEDs.ComingHome.Params(iAOI).Advanced.AOI.Width = .Width
            xTest.RunningModel.LEDs.ComingHome.Params(iAOI).Advanced.AOI.Height = .Height
            xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
        End With

    End Sub

    Private Sub ViewLEDs_SavePositionPressedCL(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer) Handles ucViewLEDsCorneringLightResults.SavePositionPressed
        mnu.ActivateMenuSuspended()

        With xSizeableShape.rect
            sender.DisplayPositionTestLimitsOneLed(iAOI, .X, .X + .Width, .Y, .Y + .Height)
            xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
            UpdateEvents("RecipLEDs.CorneringLight(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.CorneringLight.Params(iAOI), .X, .X + .Width, .Y, .Y + .Height)
            xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).PosHori.Min = .X
            xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).PosHori.Max = .X + .Width
            xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).PosVert.Min = .Y
            xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).PosVert.Max = .Y + .Height
            xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
        End With

    End Sub
    Private Sub ViewLEDs_SaveColorPressedCL(sender As LasCore.ucViewLEDsResults, iAOI As Integer, RedMin As Integer, RedMax As Integer, GreenMin As Integer, GreenMax As Integer, BlueMin As Integer, BlueMax As Integer) Handles ucViewLEDsCorneringLightResults.SaveColorPressed
        mnu.ActivateMenuSuspended()

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipLEDs.CorneringLight(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.CorneringLight.Params(iAOI), RedMin, RedMax, GreenMin, GreenMax, BlueMin, BlueMax)
        xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).Red.Min = RedMin
        xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).Red.Max = RedMax
        xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).Green.Min = GreenMin
        xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).Green.Max = GreenMax
        xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).Blue.Min = BlueMin
        xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).Blue.Max = BlueMax
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

    End Sub
    Private Sub ViewLEDs_SaveSizePressedCL(sender As LasCore.ucViewLEDsResults, iAOI As Integer, HorMin As Integer, HorMax As Integer, VerMin As Integer, VerMax As Integer) Handles ucViewLEDsCorneringLightResults.SaveSizePressed
        mnu.ActivateMenuSuspended()

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipLEDs.CorneringLight(" & iAOI.ToString & ")", xTest.RunningModel.LEDs.CorneringLight.Params(iAOI), HorMin, HorMax, VerMin, VerMax)
        xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).SizeHori.Min = HorMin
        xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).SizeHori.Max = HorMax
        xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).SizeVert.Min = VerMin
        xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).SizeVert.Max = VerMax
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewLEDs_SaveAoiPressedCL(ByVal sender As LasCore.ucViewLEDsResults, ByVal iAOI As Integer) Handles ucViewLEDsCorneringLightResults.SaveAoiPressed
        mnu.ActivateMenuSuspended()

        With xSizeableShape.rect
            sender.DisplayAoiTestLimitsOneLed(iAOI, .X, .Y, .X + .Width, .Y + .Height)
            xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
            UpdateEvents("RecipLEDs.CorneringLight(" & iAOI.ToString & ").Advanced.AOI", xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).Advanced.AOI, .X, .Y, .Width, .Height)
            xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).Advanced.AOI.Left = .X
            xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).Advanced.AOI.Top = .Y
            xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).Advanced.AOI.Width = .Width
            xTest.RunningModel.LEDs.CorneringLight.Params(iAOI).Advanced.AOI.Height = .Height
            xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
        End With

    End Sub


    Private Sub UpdateEvents(ParamName As String, Position As RecipeLEDs.udtParamLED, X1 As Single, X2 As Single, Y1 As Single, Y2 As Single)

        If Position.PosHori.Min <> X1 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".PosHori.Min" & ": " & Position.PosHori.Min & " --> " & X1)
        End If
        If Position.PosHori.Max <> X2 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".PosHori.Max" & ": " & Position.PosHori.Max & " --> " & X2)
        End If
        If Position.PosVert.Min <> Y1 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".PosVert.Min" & ": " & Position.PosVert.Min & " --> " & Y1)
        End If
        If Position.PosVert.Max <> Y2 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".PosVert.Max" & ": " & Position.PosVert.Max & " --> " & Y2)
        End If

    End Sub
    Private Sub UpdateEvents(ParamName As String, Position As RecipeLEDs.udtParamLED, RedMin As Integer, RedMax As Integer, GreenMin As Integer, GreenMax As Integer, BlueMin As Integer, BlueMax As Integer)

        If Position.Red.Min <> RedMin Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Red.Min" & ": " & Position.Red.Min & " --> " & RedMin)
        End If
        If Position.Red.Max <> RedMax Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Red.Max" & ": " & Position.Red.Max & " --> " & RedMax)
        End If
        If Position.Green.Min <> GreenMin Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Green.Min" & ": " & Position.Green.Min & " --> " & GreenMin)
        End If
        If Position.Green.Max <> GreenMax Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Green.Max" & ": " & Position.Green.Max & " --> " & GreenMax)
        End If
        If Position.Blue.Min <> BlueMin Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Blue.Min" & ": " & Position.Blue.Min & " --> " & BlueMin)
        End If
        If Position.Blue.Max <> BlueMax Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Blue.Max" & ": " & Position.Blue.Max & " --> " & BlueMax)
        End If

    End Sub
    Private Sub UpdateEvents(ParamName As String, Position As RecipeLEDs.udtParamLED, X1 As Integer, X2 As Integer, Y1 As Integer, Y2 As Integer)

        If Position.SizeHori.Min <> X1 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".SizeHori.Min" & ": " & Position.SizeHori.Min & " --> " & X1)
        End If
        If Position.SizeHori.Max <> X2 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".SizeHori.Max" & ": " & Position.SizeHori.Max & " --> " & X2)
        End If
        If Position.SizeVert.Min <> Y1 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".SizeVert.Min" & ": " & Position.SizeVert.Min & " --> " & Y1)
        End If
        If Position.SizeVert.Max <> Y2 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".SizeVert.Max" & ": " & Position.SizeVert.Max & " --> " & Y2)
        End If
    End Sub
    Private Sub UpdateEvents(ParamName As String, aoi As LasCore.ImageProcessing.udtAOI, Left As Integer, Top As Integer, Width As Integer, Height As Integer)

        If aoi.Left <> Left Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Left" & ": " & aoi.Left & " --> " & Left)
        End If
        If aoi.Top <> Top Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Top" & ": " & aoi.Top & " --> " & Top)
        End If
        If aoi.Width <> Width Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Width" & ": " & aoi.Width & " --> " & Width)
        End If
        If aoi.Height <> Height Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Height" & ": " & aoi.Height & " --> " & Height)
        End If

    End Sub


#Region "Wipe"

    Private Sub ucViewWipeResults_CancelPressed(sender As ucViewWipeResults, bmpToShow As Bitmap) Handles ucViewWipeResults.CancelPressed
        picImageCamera.Image = bmpToShow
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)
        Application.DoEvents()

        mnu.ActivateMenuSuspended()

        'If Not SizeableRect Is Nothing Then
        '    SizeableRect.Remove()
        '    SizeableRect = Nothing
        'End If

    End Sub

    Private Sub ucViewWipeResults_EditAoiPressed(sender As ucViewWipeResults, iAOI As Integer, bmpToShow As Bitmap, AoiArea As Rectangle) Handles ucViewWipeResults.EditAoiPressed
        mnu.SuspendMenu()

        'SizeableRect = New LasCore.Geometry.SizeableRectangle(picImageCamera, AoiArea.X, AoiArea.Y, AoiArea.Width, AoiArea.Height, Color.Red, 1, frmMainLocationX, frmMainLocationY)
        xSizeableShape.Show(AoiArea)
    End Sub

    Private Sub ucViewWipeResults_SaveAoiPressed(sender As ucViewWipeResults, iAOI As Integer) Handles ucViewWipeResults.SaveAoiPressed

        mnu.ActivateMenuSuspended()

        'xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        'UpdateEvents("RecipLEDs.TurnLightWipe(" & iAOI.ToString & ").LedAoi", xTest.RunningModel.LEDs.TurnLightWipe(iAOI).LedAoi, SizeableRect.xRect, SizeableRect.yRect,
        '             SizeableRect.wRect, SizeableRect.hRect)
        'xTest.RunningModel.LEDs.TurnLightWipe(iAOI).LedAoi.Left = SizeableRect.xRect
        'xTest.RunningModel.LEDs.TurnLightWipe(iAOI).LedAoi.Top = SizeableRect.yRect
        'xTest.RunningModel.LEDs.TurnLightWipe(iAOI).LedAoi.Width = SizeableRect.wRect
        'xTest.RunningModel.LEDs.TurnLightWipe(iAOI).LedAoi.Height = SizeableRect.hRect
        'xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        'sender.DisplayAoiTestLimits(iAOI, New Rectangle(SizeableRect.xRect, SizeableRect.yRect, SizeableRect.wRect, SizeableRect.hRect))

        With xSizeableShape.rect
            xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
            UpdateEvents("RecipLEDs.TurnLightWipe(" & iAOI.ToString & ").LedAoi", xTest.RunningModel.LEDs.TurnLightWipe(iAOI).LedAoi, .X, .Y, .Width, .Height)
            xTest.RunningModel.LEDs.TurnLightWipe(iAOI).LedAoi.Left = .X
            xTest.RunningModel.LEDs.TurnLightWipe(iAOI).LedAoi.Top = .Y
            xTest.RunningModel.LEDs.TurnLightWipe(iAOI).LedAoi.Width = .Width
            xTest.RunningModel.LEDs.TurnLightWipe(iAOI).LedAoi.Height = .Height
            xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

            sender.DisplayAoiTestLimits(iAOI, New Rectangle(.X, .Y, .Width, .Height))
        End With


        'If Not SizeableRect Is Nothing Then
        '    SizeableRect.Remove()
        '    SizeableRect = Nothing
        'End If

    End Sub

    Private Sub ucViewWipeResults_ShowImage(sender As ucViewWipeResults, iAOI As Integer, bmpToShow As Bitmap, result As ucViewWipeResults.udtResultWipe, param As List(Of ucViewWipeResults.udtParamWipe)) Handles _
        ucViewWipeResults.ShowImage

        picImageCamera.Image = bmpToShow
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)
        Application.DoEvents()


        xGraphRes.DrawMsg(Color.Cyan, 3, 3, "Frame " & iAOI.ToString, 8)
        For Each item As LasCore.ucViewWipeResults.udtParamWipe In param
            Dim rect As New Rectangle(item.AOI.Left, item.AOI.Top, item.AOI.Width, item.AOI.Height)
            xGraphRes.DrawWnd(Color.Green, 1, rect)
            xGraphRes.DrawMsg(Color.Cyan, rect.X, rect.Y - 8, item.Name)
        Next


    End Sub


#End Region

#End Region

#Region "EditCutoffResults"
    Private Sub ViewCutoffResults_ShowPressed(ByVal sender As LasCore.ucViewCutoffResults, ByVal bmpToShow As System.Drawing.Bitmap, RefPoint As LasCore.ImageProcessing.udtImagePoint) Handles _
        ucViewLowBeamCutoffSharpness.ShowPressed, ucViewLowBeamCutoffFlatness.ShowPressed

        picImageCamera.Image = bmpToShow
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)

        xGraphRes.DrawLowBeamCutoffResults(xTest.Results)
        xGraphRes.DrawReferencePoint(RefPoint.X, RefPoint.Y)

    End Sub
    Private Sub ViewCutoffLowBeamBaseResults_ShowPressed(ByVal sender As LasCore.ucViewCutoffResults, ByVal bmpToShow As System.Drawing.Bitmap, RefPoint As LasCore.ImageProcessing.udtImagePoint) Handles _
        ucViewLowBeamBaseCutoffSharpness.ShowPressed, ucViewLowBeamBaseCutoffFlatness.ShowPressed

        picImageCamera.Image = bmpToShow
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)


        xGraphRes.DrawLowBeamBaseCutoffResults(xTest.Results)
        xGraphRes.DrawReferencePoint(RefPoint.X, RefPoint.Y)

    End Sub
    Private Sub ViewCutoffLowBeamTopResults_ShowPressed(ByVal sender As LasCore.ucViewCutoffResults, ByVal bmpToShow As System.Drawing.Bitmap, RefPoint As LasCore.ImageProcessing.udtImagePoint) Handles _
       ucViewLowBeamTopCutoffSharpness.ShowPressed, ucViewLowBeamTopCutoffFlatness.ShowPressed

        picImageCamera.Image = bmpToShow
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)


        xGraphRes.DrawLowBeamTopCutoffResults(xTest.Results)
        xGraphRes.DrawReferencePoint(RefPoint.X, RefPoint.Y)

    End Sub

    Private Sub ViewCutoffResults_CancelPressed(ByVal sender As LasCore.ucViewCutoffResults) Handles _
        ucViewLowBeamCutoffSharpness.CancelPressed, ucViewLowBeamCutoffFlatness.CancelPressed, ucViewLowBeamCutoffFWHM.CancelPressed,
        ucViewLowBeamBaseCutoffSharpness.CancelPressed, ucViewLowBeamBaseCutoffFlatness.CancelPressed, ucViewLowBeamBaseCutoffFWHM.CancelPressed,
        ucViewLowBeamTopCutoffSharpness.CancelPressed, ucViewLowBeamTopCutoffFlatness.CancelPressed, ucViewLowBeamTopCutoffFWHM.CancelPressed


        mnu.ActivateMenuSuspended()
        ViewCutoffResult_EnableControls(sender.Name, True)

    End Sub

    Private Sub ViewCutoffResults_EditPressed(ByVal sender As LasCore.ucViewCutoffResults) Handles _
        ucViewLowBeamCutoffSharpness.EditPressed, ucViewLowBeamCutoffFlatness.EditPressed, ucViewLowBeamCutoffFWHM.EditPressed

        mnu.SuspendMenu()
        ViewCutoffResult_EnableControls(sender.Name, False)

        picImageCamera.Image = xTest.Results.GeomTest.LowBeamCutoff.BmpUsed
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)


        Dim IdCamera As Byte = xTest.RunningModel.Geom.PointHC.Advanced.Camera.Id
        Dim cam As LasCore.Icamera = xCameraManagement.GetCamera(IdCamera)

        For i As Integer = 1 To 5
            Dim pto As New Geometry.Point(xTest.RunningModel.Geom.LowBeamCutoff.ScanPos(i), CSng(0.0), xTest.GeomTest.ptoRefCutoff.X, xTest.GeomTest.ptoRefCutoff.Y, cam)
            Dim iScan As Integer = pto.X
            Dim iY1 As Integer = xTest.GeomTest.ptoRefCutoff.Y - 30
            Dim iY2 As Integer = xTest.GeomTest.ptoRefCutoff.Y + 60
            Dim iY As Integer = xTest.GeomTest.ptoRefCutoff.Y - (xTest.Results.GeomTest.LowBeamCutoff.FlatnessAtPos(i).Value * cam.Config.Alignement.GradToPixelVert)
            If xTest.Results.GeomTest.LowBeamCutoff.SharpnessAtPos(i).Ok Then
                xGraphRes.DrawLine(Color.Green, 1, iScan, iY1, iScan, iY2)
                If xTest.Results.GeomTest.LowBeamCutoff.FlatnessAtPos(i).TestDone Then
                    If xTest.Results.GeomTest.LowBeamCutoff.FlatnessAtPos(i).Ok Then
                        xGraphRes.DrawCrossWithCircle(Color.Green, 1, pto.X, iY, 10, 10, 3)
                    Else
                        xGraphRes.DrawCrossWithCircle(Color.Red, 1, pto.X, iY, 10, 10, 3)
                    End If
                End If
            Else
                xGraphRes.DrawLine(Color.Red, 1, iScan, iY1, iScan, iY2)
            End If
        Next

    End Sub
    Private Sub ViewCutoffBiglResults_EditPressed(ByVal sender As LasCore.ucViewCutoffResults) Handles _
        ucViewLowBeamBaseCutoffSharpness.EditPressed, ucViewLowBeamBaseCutoffFlatness.EditPressed, ucViewLowBeamBaseCutoffFWHM.EditPressed

        mnu.SuspendMenu()
        ViewCutoffResult_EnableControls(sender.Name, False)

        picImageCamera.Image = xTest.Results.GeomTest.BiglMaxGrad.BmpUsed
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)


        Dim IdCamera As Byte = xTest.RunningModel.Geom.LowBeamBaseCutoff.Advanced.Camera.Id
        Dim cam As LasCore.Icamera = xCameraManagement.GetCamera(IdCamera)

        For i As Integer = 1 To 5
            Dim pto As New Geometry.Point(xTest.RunningModel.Geom.LowBeamBaseCutoff.ScanPos(i), CSng(0.0), xTest.GeomTest.ptoRefCutoff.X, xTest.GeomTest.ptoRefCutoff.Y, cam)
            Dim iScan As Integer = pto.X
            Dim iY1 As Integer = xTest.GeomTest.ptoRefCutoff.Y - 30
            Dim iY2 As Integer = xTest.GeomTest.ptoRefCutoff.Y + 60
            Dim iY As Integer = xTest.GeomTest.ptoRefCutoff.Y - (xTest.Results.GeomTest.LowBeamBaseCutoff.FlatnessAtPos(i).Value * cam.Config.Alignement.GradToPixelVert)
            If xTest.Results.GeomTest.LowBeamBaseCutoff.SharpnessAtPos(i).Ok Then
                xGraphRes.DrawLine(Color.Green, 1, iScan, iY1, iScan, iY2)
                If xTest.Results.GeomTest.LowBeamBaseCutoff.FlatnessAtPos(i).TestDone Then
                    If xTest.Results.GeomTest.LowBeamBaseCutoff.FlatnessAtPos(i).Ok Then
                        xGraphRes.DrawCrossWithCircle(Color.Green, 1, pto.X, iY, 10, 10, 3)
                    Else
                        xGraphRes.DrawCrossWithCircle(Color.Red, 1, pto.X, iY, 10, 10, 3)
                    End If
                End If
            Else
                xGraphRes.DrawLine(Color.Red, 1, iScan, iY1, iScan, iY2)
            End If
        Next

    End Sub
    Private Sub ViewCutoffLowBeamTopResults_EditPressed(ByVal sender As LasCore.ucViewCutoffResults) Handles _
        ucViewLowBeamTopCutoffSharpness.EditPressed, ucViewLowBeamTopCutoffFlatness.EditPressed, ucViewLowBeamTopCutoffFWHM.EditPressed

        mnu.SuspendMenu()
        ViewCutoffResult_EnableControls(sender.Name, False)

        picImageCamera.Image = xTest.Results.GeomTest.LowBeamMaxGrad.BmpUsed
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)


        Dim IdCamera As Byte = xTest.RunningModel.Geom.LowBeamTopCutoff.Advanced.Camera.Id
        Dim cam As LasCore.Icamera = xCameraManagement.GetCamera(IdCamera)

        For i As Integer = 1 To 5
            Dim pto As New Geometry.Point(xTest.RunningModel.Geom.LowBeamTopCutoff.ScanPos(i), CSng(0.0), xTest.GeomTest.ptoRefCutoff.X, xTest.GeomTest.ptoRefCutoff.Y, cam)
            Dim iScan As Integer = pto.X
            Dim iY1 As Integer = xTest.GeomTest.ptoRefCutoff.Y - 30
            Dim iY2 As Integer = xTest.GeomTest.ptoRefCutoff.Y + 60
            Dim iY As Integer = xTest.GeomTest.ptoRefCutoff.Y - (xTest.Results.GeomTest.LowBeamTopCutoff.FlatnessAtPos(i).Value * cam.Config.Alignement.GradToPixelVert)
            If xTest.Results.GeomTest.LowBeamTopCutoff.SharpnessAtPos(i).Ok Then
                xGraphRes.DrawLine(Color.Green, 1, iScan, iY1, iScan, iY2)
                If xTest.Results.GeomTest.LowBeamTopCutoff.FlatnessAtPos(i).TestDone Then
                    If xTest.Results.GeomTest.LowBeamTopCutoff.FlatnessAtPos(i).Ok Then
                        xGraphRes.DrawCrossWithCircle(Color.Green, 1, pto.X, iY, 10, 10, 3)
                    Else
                        xGraphRes.DrawCrossWithCircle(Color.Red, 1, pto.X, iY, 10, 10, 3)
                    End If
                End If
            Else
                xGraphRes.DrawLine(Color.Red, 1, iScan, iY1, iScan, iY2)
            End If
        Next

    End Sub

    Private Sub ViewCutoffResult_SavePressedSharpness(ByVal sender As LasCore.ucViewCutoffResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewLowBeamCutoffSharpness.SavePressed
        mnu.ActivateMenuSuspended()
        ViewCutoffResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeGeom.LowBeamCutoff.Sharpness", xTest.RunningModel.Geom.LowBeamCutoff.Sharpness, Min, Max)
        xTest.RunningModel.Geom.LowBeamCutoff.Sharpness.Min = Min
        xTest.RunningModel.Geom.LowBeamCutoff.Sharpness.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewCutoffResult_SavePressedFlatness(ByVal sender As LasCore.ucViewCutoffResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewLowBeamCutoffFlatness.SavePressed
        mnu.ActivateMenuSuspended()
        ViewCutoffResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeGeom.LowBeamCutoff.Flatness", xTest.RunningModel.Geom.LowBeamCutoff.Flatness, Min, Max)
        xTest.RunningModel.Geom.LowBeamCutoff.Flatness.Min = Min
        xTest.RunningModel.Geom.LowBeamCutoff.Flatness.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewCutoffResult_SavePressedFWHM(ByVal sender As LasCore.ucViewCutoffResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewLowBeamCutoffFWHM.SavePressed
        mnu.ActivateMenuSuspended()
        ViewCutoffResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeGeom.LowBeamCutoff.FullWidthHalfMax", xTest.RunningModel.Geom.LowBeamCutoff.FullWidthHalfMax, Min, Max)
        xTest.RunningModel.Geom.LowBeamCutoff.FullWidthHalfMax.Min = Min
        xTest.RunningModel.Geom.LowBeamCutoff.FullWidthHalfMax.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub


    Private Sub ViewCutoffLowBeamBaseResult_SavePressedSharpness(ByVal sender As LasCore.ucViewCutoffResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewLowBeamBaseCutoffSharpness.SavePressed
        mnu.ActivateMenuSuspended()
        ViewCutoffResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeGeom.LowBeamBaseCutoff.Sharpness", xTest.RunningModel.Geom.LowBeamBaseCutoff.Sharpness, Min, Max)
        xTest.RunningModel.Geom.LowBeamBaseCutoff.Sharpness.Min = Min
        xTest.RunningModel.Geom.LowBeamBaseCutoff.Sharpness.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewCutoffLowBeamBaseResult_SavePressedFlatness(ByVal sender As LasCore.ucViewCutoffResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewLowBeamBaseCutoffFlatness.SavePressed
        mnu.ActivateMenuSuspended()
        ViewCutoffResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeGeom.LowBeamBaseCutoff.Flatness", xTest.RunningModel.Geom.LowBeamBaseCutoff.Flatness, Min, Max)
        xTest.RunningModel.Geom.LowBeamBaseCutoff.Flatness.Min = Min
        xTest.RunningModel.Geom.LowBeamBaseCutoff.Flatness.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewCutoffLowBeamBaseResult_SavePressedFWHM(ByVal sender As LasCore.ucViewCutoffResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewLowBeamBaseCutoffFWHM.SavePressed
        mnu.ActivateMenuSuspended()
        ViewCutoffResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeGeom.LowBeamBaseCutoff.FullWidthHalfMax", xTest.RunningModel.Geom.LowBeamBaseCutoff.FullWidthHalfMax, Min, Max)
        xTest.RunningModel.Geom.LowBeamBaseCutoff.FullWidthHalfMax.Min = Min
        xTest.RunningModel.Geom.LowBeamBaseCutoff.FullWidthHalfMax.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub

    Private Sub ViewCutoffLowBeamTopResult_SavePressedSharpness(ByVal sender As LasCore.ucViewCutoffResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewLowBeamTopCutoffSharpness.SavePressed
        mnu.ActivateMenuSuspended()
        ViewCutoffResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeGeom.LowBeamTopCutoff.Sharpness", xTest.RunningModel.Geom.LowBeamTopCutoff.Sharpness, Min, Max)
        xTest.RunningModel.Geom.LowBeamTopCutoff.Sharpness.Min = Min
        xTest.RunningModel.Geom.LowBeamTopCutoff.Sharpness.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewCutoffLowBeamTopResult_SavePressedFlatness(ByVal sender As LasCore.ucViewCutoffResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewLowBeamTopCutoffFlatness.SavePressed
        mnu.ActivateMenuSuspended()
        ViewCutoffResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeGeom.LowBeamTopCutoff.Flatness", xTest.RunningModel.Geom.LowBeamTopCutoff.Flatness, Min, Max)
        xTest.RunningModel.Geom.LowBeamTopCutoff.Flatness.Min = Min
        xTest.RunningModel.Geom.LowBeamTopCutoff.Flatness.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub
    Private Sub ViewCutoffLowBeamTopResult_SavePressedFWHM(ByVal sender As LasCore.ucViewCutoffResults, ByVal Min As Single, ByVal Max As Single) Handles ucViewLowBeamTopCutoffFWHM.SavePressed
        mnu.ActivateMenuSuspended()
        ViewCutoffResult_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        UpdateEvents("RecipeGeom.LowBeamTopCutoff.FullWidthHalfMax", xTest.RunningModel.Geom.LowBeamTopCutoff.FullWidthHalfMax, Min, Max)
        xTest.RunningModel.Geom.LowBeamTopCutoff.FullWidthHalfMax.Min = Min
        xTest.RunningModel.Geom.LowBeamTopCutoff.FullWidthHalfMax.Max = Max
        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    End Sub





    Private Sub ViewCutoffResult_EnableControls(ByVal senderName As String, ByVal bYes As Boolean)
        'Enabled/disable all other controls
        For Each item As Control In grpCutoff.Controls
            If TypeOf (item) Is TabControl Then
                For Each elem As Control In item.Controls
                    If TypeOf (elem) Is TabPage Then
                        For Each tab As Control In elem.Controls
                            If TypeOf (tab) Is LasCore.ucViewCutoffResults Then
                                Dim _uc As LasCore.ucViewCutoffResults
                                _uc = DirectCast(tab, LasCore.ucViewCutoffResults)
                                If _uc.Name <> senderName Then
                                    _uc.EnableMenu(bYes)
                                    _uc.Visible = bYes
                                End If
                            End If
                        Next
                    End If

                Next
            End If
        Next

    End Sub

    Private Sub UpdateEvents(ParamName As String, param As Recipe.udtParam, Min As Single, Max As Single)

        If param.Min <> Min Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".PositionToll.Hori.Min" & ": " & param.Min & " --> " & Min)
        End If
        If param.Max <> Max Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".PositionToll.Hori.Max" & ": " & param.Max & " --> " & Max)
        End If

    End Sub

#End Region

    '#Region "EditShapeResults"

    '    Private Sub ViewShapeResults_ShowPressed(ByVal sender As LasCore.ucViewShapeResults, ByVal bmpToShow As System.Drawing.Bitmap) Handles _
    '       ucViewShapeLowBeamResults.ShowPressed

    '        picImageCamera.Image = bmpToShow
    '        picImageCamera.Invalidate()
    '        picImageCamera.Refresh()
    '        Application.DoEvents()
    '        LasCore.Utilities.WaitWithEvents(100)

    '        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
    '        xGraphRes.DrawHV(New AForge.Point(xTest.RunningModel.Generic.CoordHV.X, xTest.RunningModel.Generic.CoordHV.Y))

    '        xGraphRes.DrawShapeResults(xTest.Results)


    '    End Sub

    '    Private Sub ViewShapeResults_CancelPressed(ByVal sender As LasCore.ucViewShapeResults) Handles _
    '        ucViewShapeLowBeamResults.CancelPressed

    '        mnu.ActivateMenuSuspended()
    '        ViewShapeResult_EnableControls(sender.Name, True)

    '    End Sub

    '    Private Sub ViewShapeResults_EditPressed(ByVal sender As LasCore.ucViewShapeResults) Handles _
    '        ucViewShapeLowBeamResults.EditPressed

    '        mnu.SuspendMenu()
    '        ViewShapeResult_EnableControls(sender.Name, False)


    '    End Sub

    '    Private Sub ViewShapeResult_SavePressed(ByVal sender As LasCore.ucViewShapeResults, ByVal SiteMin As Single, ByVal SiteMax As Single,
    '                                            AzimMin As Single, AzimMax As Single, HeightMin As Single, HeightMax As Single) Handles ucViewShapeLowBeamResults.SavePressed
    '        mnu.ActivateMenuSuspended()
    '        ViewShapeResult_EnableControls(sender.Name, True)
    '        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
    '        UpdateEvents("RecipeGeom.Shape.LowBeam", xTest.RunningModel.Geom.Shape.LowBeam, SiteMin, SiteMax, AzimMin, AzimMax, HeightMin, HeightMax)

    '        xTest.RunningModel.Geom.Shape.LowBeam.Site.Min = SiteMin
    '        xTest.RunningModel.Geom.Shape.LowBeam.Site.Max = SiteMax
    '        xTest.RunningModel.Geom.Shape.LowBeam.Azim.Min = AzimMin
    '        xTest.RunningModel.Geom.Shape.LowBeam.Azim.Max = AzimMax
    '        xTest.RunningModel.Geom.Shape.LowBeam.StepHeight.Min = HeightMin
    '        xTest.RunningModel.Geom.Shape.LowBeam.StepHeight.Max = HeightMax
    '        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)
    '    End Sub

    '    Private Sub ViewShapeResult_EnableControls(ByVal senderName As String, ByVal bYes As Boolean)
    '        'Enabled/disable all other controls

    '        For Each item As Control In grpShape.Controls
    '            If TypeOf (item) Is LasCore.ucViewShapeResults Then
    '                Dim _uc As LasCore.ucViewShapeResults
    '                _uc = DirectCast(item, LasCore.ucViewShapeResults)
    '                If _uc.Name <> senderName Then
    '                    _uc.EnableMenu(bYes)
    '                End If
    '            End If
    '        Next


    '    End Sub

    '    Private Sub UpdateEvents(ParamName As String, Bulb As RecipeGeom.udtShapeAnalysisParams, SiteMin As Single, SiteMax As Single, AzimMin As Single, AzimMax As Single,
    '                             HeightMin As Single, HeightMax As Single)

    '        If Bulb.Site.Min <> SiteMin Then
    '            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Site.Min" & ": " & Bulb.Site.Min & " --> " & SiteMin)
    '        End If
    '        If Bulb.Site.Max <> SiteMax Then
    '            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Site.Max" & ": " & Bulb.Site.Max & " --> " & SiteMax)
    '        End If
    '        If Bulb.Azim.Min <> AzimMin Then
    '            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Azim.Min" & ": " & Bulb.Azim.Min & " --> " & AzimMin)
    '        End If
    '        If Bulb.Azim.Max <> AzimMax Then
    '            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Azim.Max" & ": " & Bulb.Azim.Max & " --> " & AzimMax)
    '        End If
    '        If Bulb.StepHeight.Min <> HeightMin Then
    '            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".StepHeight.Min" & ": " & Bulb.StepHeight.Min & " --> " & HeightMin)
    '        End If
    '        If Bulb.StepHeight.Max <> HeightMax Then
    '            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".StepHeight.Max" & ": " & Bulb.StepHeight.Max & " --> " & HeightMax)
    '        End If

    '    End Sub
    '#End Region

#Region "EditHighBeamShutterTestResults"

    Private Sub ViewHighBeamShutterResults_CancelPressed(ByVal sender As LasCore.ucViewDrivePointResult) Handles _
        ucViewHighBeamShutterOnResults.CancelPressed, ucViewHighBeamShutterOffResults.CancelPressed

        mnu.ActivateMenuSuspended()
        ViewHighBeamShutterResults_EnableControls(sender.Name, True)
    End Sub
    Private Sub ViewHighBeamShutterOnResults_EditPressed(ByVal sender As LasCore.ucViewDrivePointResult) Handles ucViewHighBeamShutterOnResults.EditPressed

        mnu.SuspendMenu()
        ViewHighBeamShutterResults_EnableControls(sender.Name, False)

        ' picImageCamera.Image = xTest.Results.GeomTest.HighBeamShutter.HighBeamShutterOnBmpUsed
        picImageCamera.Image = xTest.Results.OthersTest.HighBeamShutter.HighBeamShutterOnBmpUsed
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        xGraphRes.DrawHV(New AForge.Point(xTest.RunningModel.Generic.CoordHV.X, xTest.RunningModel.Generic.CoordHV.Y))

        Dim IdCamera As Byte = xTest.RunningModel.Geom.PointHC.Advanced.Camera.Id
        Dim cam As LasCore.Icamera = xCameraManagement.GetCamera(IdCamera)

        For Each item As RecipeGeom.udtHighBeamShutterAnalysis.udtTestPoint In xTest.RunningModel.Geom.HighBeamShutter.TestPoints
            Dim pto As New Geometry.Point(CSng(item.coordH), CSng(item.coordV), xTest.RunningModel.Generic.CoordHV.X, xTest.RunningModel.Generic.CoordHV.Y, cam)
            xGraphRes.DrawPhotomPoint(Color.Green, 1, pto.X, pto.Y, 3, item.Name)
        Next

    End Sub
    Private Sub ViewHighBeamShutteOffrResults_EditPressed(ByVal sender As LasCore.ucViewDrivePointResult) Handles ucViewHighBeamShutterOffResults.EditPressed

        mnu.SuspendMenu()
        ViewHighBeamShutterResults_EnableControls(sender.Name, False)

        picImageCamera.Image = xTest.Results.OthersTest.HighBeamShutter.HighBeamShutterOffBmpUsed
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        xGraphRes.DrawHV(New AForge.Point(xTest.RunningModel.Generic.CoordHV.X, xTest.RunningModel.Generic.CoordHV.Y))

        Dim IdCamera As Byte = xTest.RunningModel.Geom.PointHC.Advanced.Camera.Id
        Dim cam As LasCore.Icamera = xCameraManagement.GetCamera(IdCamera)

        For Each item As RecipeGeom.udtHighBeamShutterAnalysis.udtTestPoint In xTest.RunningModel.Geom.HighBeamShutter.TestPoints
            Dim pto As New Geometry.Point(CSng(item.coordH), CSng(item.coordV), xTest.RunningModel.Generic.CoordHV.X, xTest.RunningModel.Generic.CoordHV.Y, cam)
            xGraphRes.DrawPhotomPoint(Color.Green, 1, pto.X, pto.Y, 3, item.Name)
        Next

    End Sub
    Private Sub ViewHighBeamShutterOnResults_SavePressed(ByVal sender As LasCore.ucViewDrivePointResult, ByVal Value() As Integer, GreaterThen() As Boolean) Handles ucViewHighBeamShutterOnResults.SavePressed

        mnu.ActivateMenuSuspended()
        ViewHighBeamShutterResults_EnableControls(sender.Name, True)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)

        For i As Integer = 0 To 5
            UpdateEvents("RecipeGeom.HighBeamShutter.TestPoints(" & i.ToString & ").ShutterOn", xTest.RunningModel.Geom.HighBeamShutter.TestPoints(i).ShutterOn, Value(i), GreaterThen(i))
            xTest.RunningModel.Geom.HighBeamShutter.TestPoints(i).ShutterOn.GreyLevel = Value(i)
            xTest.RunningModel.Geom.HighBeamShutter.TestPoints(i).ShutterOn.GreaterThen = GreaterThen(i)
        Next

        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(0).ShutterOn.GreyLevel = Value(0)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(0).ShutterOn.GreaterThen = GreaterThen(0)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(1).ShutterOn.GreyLevel = Value(1)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(1).ShutterOn.GreaterThen = GreaterThen(1)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(2).ShutterOn.GreyLevel = Value(2)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(2).ShutterOn.GreaterThen = GreaterThen(2)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(3).ShutterOn.GreyLevel = Value(3)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(3).ShutterOn.GreaterThen = GreaterThen(3)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(4).ShutterOn.GreyLevel = Value(4)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(4).ShutterOn.GreaterThen = GreaterThen(4)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(5).ShutterOn.GreyLevel = Value(5)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(5).ShutterOn.GreaterThen = GreaterThen(5)

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)


    End Sub
    Private Sub ViewHighBeamShutterOffResults_SavePressed(ByVal sender As LasCore.ucViewDrivePointResult, ByVal Value() As Integer, GreaterThen() As Boolean) Handles ucViewHighBeamShutterOffResults.SavePressed

        mnu.ActivateMenuSuspended()
        ViewHighBeamShutterResults_EnableControls(sender.Name, True)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)

        For i As Integer = 0 To 5
            UpdateEvents("RecipeGeom.HighBeamShutter.TestPoints(" & i.ToString & ").ShutterOff", xTest.RunningModel.Geom.HighBeamShutter.TestPoints(i).ShutterOff, Value(i), GreaterThen(i))
            xTest.RunningModel.Geom.HighBeamShutter.TestPoints(i).ShutterOff.GreyLevel = Value(i)
            xTest.RunningModel.Geom.HighBeamShutter.TestPoints(i).ShutterOff.GreaterThen = GreaterThen(i)
        Next

        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(0).ShutterOff.GreyLevel = Value(0)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(0).ShutterOff.GreaterThen = GreaterThen(0)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(1).ShutterOff.GreyLevel = Value(1)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(1).ShutterOff.GreaterThen = GreaterThen(1)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(2).ShutterOff.GreyLevel = Value(2)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(2).ShutterOff.GreaterThen = GreaterThen(2)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(3).ShutterOff.GreyLevel = Value(3)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(3).ShutterOff.GreaterThen = GreaterThen(3)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(4).ShutterOff.GreyLevel = Value(4)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(4).ShutterOff.GreaterThen = GreaterThen(4)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(5).ShutterOff.GreyLevel = Value(5)
        'xTest.RunningModel.Geom.HighBeamShutter.TestPoints(5).ShutterOff.GreaterThen = GreaterThen(5)

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)


    End Sub

    Private Sub ViewHighBeamShutterResults_EnableControls(ByVal senderName As String, ByVal bYes As Boolean)

        For Each item As Control In grpHighBeamShutter.Controls
            If TypeOf (item) Is LasCore.ucViewDrivePointResult Then
                Dim _uc As LasCore.ucViewDrivePointResult
                _uc = DirectCast(item, LasCore.ucViewDrivePointResult)
                If _uc.Name <> senderName Then
                    _uc.EnableMenu(bYes)
                    _uc.Visible = bYes
                End If
            End If
        Next


        'For Each item As Control In grpMotorsPos.Controls
        '    If TypeOf (item) Is LasCore.ucViewMotorPosResults Then
        '        Dim _uc As LasCore.ucViewMotorPosResults
        '        _uc = DirectCast(item, LasCore.ucViewMotorPosResults)
        '        If _uc.Name <> senderName Then
        '            _uc.EnableMenu(bYes)
        '            _uc.Visible = bYes
        '        End If
        '    End If
        'Next

    End Sub

    Private Sub UpdateEvents(ParamName As String, point As RecipeGeom.udtHighBeamShutterAnalysis.udtGreyLevel, Value As Integer, GreaterThen As Boolean)
        If point.GreyLevel <> Value Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".GreyLevel" & ": " & point.GreyLevel & " --> " & Value)
        End If
        If point.GreaterThen <> GreaterThen Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".GreaterThen" & ": " & point.GreaterThen & " --> " & GreaterThen)
        End If
    End Sub

#End Region

#Region "EditPhotomResults"

    Private Sub ViewPhotomResultsLowBeam_CancelPressed(ByVal sender As LasCore.ucViewPhotomResults) Handles _
        ucViewPhotomResultsLowBeam.CancelPressed, ucViewPhotomResultsHighBeam.CancelPressed, ucViewPhotomResultsFogBeam.CancelPressed,
        ucViewPhotomResultsDrl.CancelPressed, ucViewPhotomResultsTi.CancelPressed

        mnu.ActivateMenuSuspended()
        ViewPhotomResults_EnableControls(sender.Name, True)

    End Sub

    Private Sub ViewPhotomResultsLowBeam_EditPressed(ByVal sender As LasCore.ucViewPhotomResults) Handles _
        ucViewPhotomResultsLowBeam.EditPressed, ucViewPhotomResultsHighBeam.EditPressed, ucViewPhotomResultsFogBeam.EditPressed,
        ucViewPhotomResultsDrl.EditPressed, ucViewPhotomResultsTi.EditPressed

        mnu.SuspendMenu()
        ViewPhotomResults_EnableControls(sender.Name, False)

    End Sub

    Private Sub ViewPhotomResultsLowBeam_SavePressed(ByVal sender As LasCore.ucViewPhotomResults, iPoint As Integer,
                                                     PointName As String, ByVal Min As String, ByVal Max As String) Handles ucViewPhotomResultsLowBeam.SavePressed

        mnu.ActivateMenuSuspended()
        ViewPhotomResults_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)


        SaveDataPhotom("LowBeam", xTest.RunningModel.Photom.LowBeam, iPoint, PointName, Min, Max)

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

    End Sub


    Private Sub ViewPhotomResultsHighBeam_SavePressed(ByVal sender As LasCore.ucViewPhotomResults, iPoint As Integer,
                                                     PointName As String, ByVal Min As String, ByVal Max As String) Handles ucViewPhotomResultsHighBeam.SavePressed

        mnu.ActivateMenuSuspended()
        ViewPhotomResults_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)

        SaveDataPhotom("HighBeam", xTest.RunningModel.Photom.HighBeam, iPoint, PointName, Min, Max)

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

    End Sub

    Private Sub ViewPhotomResultsFogBeam_SavePressed(ByVal sender As LasCore.ucViewPhotomResults, iPoint As Integer,
                                                     PointName As String, ByVal Min As String, ByVal Max As String) Handles ucViewPhotomResultsFogBeam.SavePressed

        mnu.ActivateMenuSuspended()
        ViewPhotomResults_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)

        SaveDataPhotom("FogBeam", xTest.RunningModel.Photom.FogBeam, iPoint, PointName, Min, Max)

        'Select Case PointName
        '    Case "Emax"
        '        UpdateEvents("RecipePhotom.FogBeam.Emax", xTest.RunningModel.Photom.FogBeam.Emax, Min, Max)
        '        If Min <> cTestDisabled Then
        '            xTest.RunningModel.Photom.FogBeam.Emax.Min = LasCore.TextToSingle(Min)
        '        End If
        '        If Max <> cTestDisabled Then
        '            xTest.RunningModel.Photom.FogBeam.Emax.Max = LasCore.TextToSingle(Max)
        '        End If
        '    Case "HV"
        '        UpdateEvents("RecipePhotom.FogBeam.HV", xTest.RunningModel.Photom.FogBeam.HV, Min, Max)
        '        If Min <> cTestDisabled Then
        '            xTest.RunningModel.Photom.FogBeam.HV.Min = LasCore.TextToSingle(Min)
        '        End If
        '        If Max <> cTestDisabled Then
        '            xTest.RunningModel.Photom.FogBeam.HV.Max = LasCore.TextToSingle(Max)
        '        End If
        '    Case "HV/Emax"
        '        UpdateEvents("RecipePhotom.FogBeam.HV/Emax", xTest.RunningModel.Photom.FogBeam.HVsuEmax, Min, Max)
        '        If Min <> cTestDisabled Then
        '            xTest.RunningModel.Photom.FogBeam.HVsuEmax.Min = LasCore.TextToSingle(Min)
        '        End If
        '        If Max <> cTestDisabled Then
        '            xTest.RunningModel.Photom.FogBeam.HVsuEmax.Max = LasCore.TextToSingle(Max)
        '        End If
        '    Case Else
        '        UpdateEvents("RecipePhotom.FogBeam." & PointName, xTest.RunningModel.Photom.FogBeam.Point(iPoint - 3), Min, Max)
        '        If Min <> cTestDisabled Then
        '            xTest.RunningModel.Photom.FogBeam.Point(iPoint - 3).Min = LasCore.TextToSingle(Min)
        '        End If
        '        If Max <> cTestDisabled Then
        '            xTest.RunningModel.Photom.FogBeam.Point(iPoint - 3).Max = LasCore.TextToSingle(Max)
        '        End If

        'End Select

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

    End Sub

    Private Sub ViewPhotomResultsDrl_SavePressed(ByVal sender As LasCore.ucViewPhotomResults, iPoint As Integer,
                                                     PointName As String, ByVal Min As String, ByVal Max As String) Handles ucViewPhotomResultsDrl.SavePressed

        mnu.ActivateMenuSuspended()
        ViewPhotomResults_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)

        SaveDataPhotom("DRL", xTest.RunningModel.Photom.Drl, iPoint, PointName, Min, Max)

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

    End Sub


    Private Sub ViewPhotomResultsTi_SavePressed(ByVal sender As LasCore.ucViewPhotomResults, iPoint As Integer,
                                                     PointName As String, ByVal Min As String, ByVal Max As String) Handles ucViewPhotomResultsTi.SavePressed

        mnu.ActivateMenuSuspended()
        ViewPhotomResults_EnableControls(sender.Name, True)
        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)

        SaveDataPhotom("TI", xTest.RunningModel.Photom.TurnIndicator, iPoint, PointName, Min, Max)

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

    End Sub

    Private Sub ViewPhotomResults_EnableControls(ByVal senderName As String, ByVal bYes As Boolean)
        'Enabled/disable all other controls

        'For Each item As Control In grpShape.Controls
        '    If TypeOf (item) Is LasCore.ucViewPhotomResults Then
        '        Dim _uc As LasCore.ucViewPhotomResults
        '        _uc = DirectCast(item, LasCore.ucViewPhotomResults)
        '        If _uc.Name <> senderName Then
        '            _uc.EnableMenu(bYes)
        '        End If
        '    End If
        'Next


    End Sub

    Private Sub UpdateEvents(ParamName As String, Point As RecipePhotom.udtRecipePhotomPoint, Min As String, Max As String)
        Dim sngMin As Single = 0
        Dim sngMax As Single = 0
        If Min <> cTestDisabled Then
            sngMin = LasCore.TextToSingle(Min)
        End If
        If Max <> cTestDisabled Then
            sngMax = LasCore.TextToSingle(Max)
        End If

        If Min <> cTestDisabled Then
            If Point.Min <> sngMin Then
                xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Min" & ": " & Point.Min & " --> " & sngMin)
            End If
        End If
        If Max <> cTestDisabled Then
            If Point.Max <> sngMax Then
                xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Max" & ": " & Point.Max & " --> " & sngMax)
            End If
        End If
    End Sub

    Private Sub SaveDataPhotom(BeamName As String, ByRef beam As RecipePhotom.udtRecipePhotomDataBeam, iPoint As Integer, PointName As String, ByVal Min As String, ByVal Max As String)

        Select Case PointName
            Case "Emax"
                UpdateEvents("RecipePhotom." & BeamName & ".Emax", beam.Emax, Min, Max)
                If Min <> cTestDisabled Then
                    beam.Emax.Min = LasCore.TextToSingle(Min)
                End If
                If Max <> cTestDisabled Then
                    beam.Emax.Max = LasCore.TextToSingle(Max)
                End If
            Case "HV"
                UpdateEvents("RecipePhotom." & BeamName & ".HV", beam.HV, Min, Max)
                If Min <> cTestDisabled Then
                    beam.HV.Min = LasCore.TextToSingle(Min)
                End If
                If Max <> cTestDisabled Then
                    beam.HV.Max = LasCore.TextToSingle(Max)
                End If
            Case "HV/Emax"
                UpdateEvents("RecipePhotom." & BeamName & ".HV/Emax", beam.HVsuEmax, Min, Max)
                If Min <> cTestDisabled Then
                    beam.HVsuEmax.Min = LasCore.TextToSingle(Min)
                End If
                If Max <> cTestDisabled Then
                    beam.HVsuEmax.Max = LasCore.TextToSingle(Max)
                End If
            Case Else
                UpdateEvents("RecipePhotom." & BeamName & "." & PointName, beam.Point(iPoint - 3), Min, Max)
                If Min <> cTestDisabled Then
                    beam.Point(iPoint - 3).Min = LasCore.TextToSingle(Min)
                End If
                If Max <> cTestDisabled Then
                    beam.Point(iPoint - 3).Max = LasCore.TextToSingle(Max)
                End If

        End Select

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

    End Sub
#End Region

#Region "EditOthersResults"
    Private Sub ViewInitPosPoint_ShowPressed(ByVal sender As LasCore.ucViewPointResults, ByVal bmpToShow As System.Drawing.Bitmap, pto As Geometry.udtPoint, X As Integer, Y As Integer, Width As Integer, Height As Integer, ResOk As Boolean) Handles _
       ucViewInitialPosition.ShowPressed

        picImageCamera.Image = bmpToShow
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)

        Dim col As Color = IIf(ResOk, Color.Lime, Color.Red)

        'xGraphRes.DrawCrossWithCircle(col, 1, pto.X, pto.Y, 20, 20, 3)
        'xGraphRes.DrawRecipeWnd(col, 1, X, Y, X + Width, Y + Height)

        'xGraphRes.DrawReferencePoint(xTest.RunningModel.Generic.CoordHV.X, xTest.RunningModel.Generic.CoordHV.Y)

    End Sub
    Private Sub ViewInitPosPoint_CancelPressed(ByVal sender As LasCore.ucViewPointResults) Handles _
       ucViewInitialPosition.CancelPressed

        mnu.ActivateMenuSuspended()
        ViewGeomPoint_EnableControls(sender.Name, True)
    End Sub
    Private Sub ViewInitPosPoint_EditPressed(ByVal sender As LasCore.ucViewPointResults, ByVal bmpToShow As System.Drawing.Bitmap, pto As Geometry.udtPoint) Handles _
        ucViewInitialPosition.EditPressed

        mnu.SuspendMenu()
        ViewGeomPoint_EnableControls(sender.Name, False)

        picImageCamera.Image = bmpToShow
        picImageCamera.Invalidate()
        picImageCamera.Refresh()
        Application.DoEvents()
        LasCore.Utilities.WaitWithEvents(100)

        xGraphRes.DrawCrossWithCircle(Color.Lime, 1, pto.X, pto.Y, 20, 20, 3)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)
        xGraphRes.DrawHV(New AForge.Point(xTest.RunningModel.Generic.CoordHV.X, xTest.RunningModel.Generic.CoordHV.Y))

    End Sub

    Private Sub ViewInitPosPoint_CreateSizeableRect(ByVal sender As LasCore.ucViewPointResults, rect As Rectangle, pto As Point) Handles _
        ucViewInitialPosition.CreateSizeableRect

        'SizeableRect = New LasCore.Geometry.SizeableRectangle(picImageCamera, x, Y, Width, Height, Color.Red, 1, frmMainLocationX, frmMainLocationY)

        Dim Crosses As New List(Of CsharpLibrary.Cross)
        Dim c As New CsharpLibrary.Cross(Color.Lime, 1, New Point(pto.X, pto.Y), New Size(20, 20), New CsharpLibrary.Circle(Color.Lime, 1, New Point(pto.X, pto.Y), 3))
        Crosses.Add(c)
        c = New CsharpLibrary.Cross(Color.Cyan, 1, New Point(xTest.RunningModel.Generic.CoordHV.X, xTest.RunningModel.Generic.CoordHV.Y), New Size(50, 50), Nothing)
        xSizeableShape.Show(rect, Crosses)

    End Sub
    Private Sub ViewInitPosPoint_RemoveSizeableRect(ByVal sender As LasCore.ucViewPointResults) Handles _
        ucViewInitialPosition.RemoveSizeableRect

        'If Not SizeableRect Is Nothing Then
        '    SizeableRect.Remove()
        '    SizeableRect = Nothing
        'End If

        Try
            xSizeableShape.Hide()
        Catch ex As Exception

        End Try
    End Sub

    Private Sub ViewInitPosPoint_SavePressedLBHS(ByVal sender As LasCore.ucViewPointResults, ByVal PtoRef As Geometry.udtPoint, ByVal camera As Icamera) Handles _
        ucViewInitialPosition.SavePressed

        mnu.ActivateMenuSuspended()
        'Enabled all other controls
        ViewGeomPoint_EnableControls(sender.Name, True)

        'Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect, SizeableRect.yRect, PtoRef, camera)
        'Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(SizeableRect.xRect + SizeableRect.wRect, SizeableRect.yRect + SizeableRect.hRect, PtoRef, camera)
        Dim lt As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X, xSizeableShape.rect.Y, PtoRef, camera)
        Dim rb As LasCore.Geometry.Point = New LasCore.Geometry.Point(xSizeableShape.rect.X + xSizeableShape.rect.Width, xSizeableShape.rect.Y + xSizeableShape.rect.Height, PtoRef, camera)

        xTest.RunningModel = xTest.RunningModel.ReadModel(xTest.RunningModel.Id, False)

        UpdateEvents("RecipeGeom.InitialPositionLowBeam", xTest.RunningModel.Geom.InitialPositionLowBeam, lt.H, rb.H, rb.V, lt.V)

        xTest.RunningModel.Geom.InitialPositionLowBeam.Hori.Min = lt.H
        xTest.RunningModel.Geom.InitialPositionLowBeam.Hori.Max = rb.H
        xTest.RunningModel.Geom.InitialPositionLowBeam.Vert.Min = rb.V
        xTest.RunningModel.Geom.InitialPositionLowBeam.Vert.Max = lt.V

        xTest.RunningModel.WriteModel(xTest.RunningModel.Id, xTest.RunningModel)

        sender.DisplayTestLimitsHor(xTest.RunningModel.Geom.InitialPositionLowBeam.Hori.Min, xTest.RunningModel.Geom.InitialPositionLowBeam.Hori.Max, xTest.RunningModel.Geom.InitialPositionLowBeam.Hori.Enabled, xAppConfig.Params.DisplayFrmt.Grad)
        sender.DisplayTestLimitsVer(xTest.RunningModel.Geom.InitialPositionLowBeam.Vert.Min, xTest.RunningModel.Geom.InitialPositionLowBeam.Vert.Max, xTest.RunningModel.Geom.InitialPositionLowBeam.Vert.Enabled, xAppConfig.Params.DisplayFrmt.Grad)

    End Sub

    Private Sub UpdateEvents(ParamName As String, point As RecipeGeom.udtInitialPositionPointAnalysis, X1 As Single, X2 As Single, Y1 As Single, Y2 As Single)

        If point.Hori.Min <> X1 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Hori.Min" & ": " & point.Hori.Min & " --> " & X1)
        End If
        If point.Hori.Max <> X2 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Hori.Max" & ": " & point.Hori.Max & " --> " & X2)
        End If
        If point.Vert.Min <> Y1 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Vert.Min" & ": " & point.Vert.Min & " --> " & Y1)
        End If
        If point.Vert.Max <> Y2 Then
            xDataStorage.AddEvent(xUsers.UserLogged.Name, "Recipe modified", ParamName & ".Vert.Max" & ": " & point.Vert.Max & " --> " & Y2)
        End If

    End Sub


#End Region


#Region "Workers"

    Private Sub panWorker_Click(sender As Object, e As EventArgs) Handles panWorker.Click, picWorker.Click, lblWorker.Click
        Dim dlg As New frmWorkerLogin
        Dim DiagRes As Windows.Forms.DialogResult = dlg.ShowDialog()
        If DiagRes = DialogResult.OK Then
            xDataStorage.AddEvent("System", "Login worker: " & xWorkers.WorkerLogged.Name, "OK")
        ElseIf DiagRes = DialogResult.No Then
            xDataStorage.AddEvent("System", "Logout worker", "OK")
        Else
        End If
    End Sub

#End Region

    Private Sub lblECUsErrors_Click(sender As Object, e As EventArgs) Handles lblECUsErrors.Click, lblLed61MtrRefErrors.Click
        Dim frm As New frmViewLabelText
        frm.txtText.Text = sender.text
        frm.Show()
    End Sub

    Private Sub lblTestResult_Click(sender As Object, e As EventArgs) Handles lblTestResult.Click
        Dim frm As New frmViewLabelText
        frm.txtText.Text = sender.text
        frm.Show()
    End Sub

    Private Sub ucMasterMonitor_Click(sender As Object, e As EventArgs) Handles ucMasterMonitor.oClick

        mnu.SuspendMenu()
        Dim frm As New frmMasterSchedulingEdit
        frm.myConfig = ucMasterMonitor
        frm.ShowDialog(Me)
        frm.Dispose()
        frm = Nothing
        mnu.ActivateMenuSuspended()

    End Sub

    Private Sub plsResetProd_Click(sender As Object, e As EventArgs) Handles plsResetProd.Click
        xRetentive.Variables.Good = 0
        xRetentive.Variables.Scrap = 0
        xRetentive.WriteDataToFile()
    End Sub

    Private Sub plsViewLowBeamBase_Click(sender As Object, e As EventArgs) Handles plsViewLowBeamBase.Click
        Try
            picImageCamera.Image = xTest.Results.GeomTest.LowBeamBaseCutoff.BmpUsed
            picImageCamera.Invalidate()
            Application.DoEvents()
            'Call xGraphRes.DrawLowBeamBaseTestResult(xTest.Results)
            Call xGraphRes.DrawLowBeamBaseCutoffResults(xTest.Results)
        Catch ex As Exception

        End Try
    End Sub
    Private Sub plsViewLowBeamTop_Click(sender As Object, e As EventArgs) Handles plsViewLowBeamTop.Click
        Try
            picImageCamera.Image = xTest.Results.GeomTest.LowBeamTopCutoff.BmpUsed
            picImageCamera.Invalidate()
            Application.DoEvents()
            'Call xGraphRes.DrawLowBeamTopTestResult(xTest.Results)
            Call xGraphRes.DrawLowBeamTopCutoffResults(xTest.Results)

        Catch ex As Exception

        End Try
    End Sub
    Private Sub plsViewLowBeam_Click(sender As Object, e As EventArgs) Handles plsViewLowBeam.Click
        Try

            ShowGeomBitmap()
            picImageCamera.Invalidate()
            Application.DoEvents()
            Call xGraphRes.DrawGeomTestResult(xTest.Results)

        Catch ex As Exception

        End Try
    End Sub

    Private Sub lblCizeta_Click(sender As Object, e As EventArgs) Handles lblCizeta.Click

    End Sub

    Private Sub picCizeta_MouseDown(sender As Object, e As MouseEventArgs) Handles panCizeta.MouseDown, lblPoweredBy.MouseDown, lblCizeta.MouseDown

    End Sub




End Class
